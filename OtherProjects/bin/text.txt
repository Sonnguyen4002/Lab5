
Trình đơn chính

WikipediaBách khoa toàn thư mở
Tìm kiếm trên Wikipedia
Tìm kiếm
Tạo tài khoản
Đăng nhập

Công cụ cá nhân
Tính năng Tạo tài khoản · Hướng dẫn người mới · Quy định · Viết bài mới · Chỗ thử · Câu thường hỏi · Sách hướng dẫn · Dịch bài · Thêm chú thích · Thảo luận · Liên hệ quản lý
Tiêu chuẩn bài viết Đủ độ nổi bật, văn phong trung lập và có nguồn đáng tin cậy · Không spam quảng cáo · Không vi phạm bản quyền · Cẩm nang biên soạn
Đóng (mở lại bằng cách xóa cookie dismissASN1 trong trình duyệt)
Nội dung ẩn
Đầu
Lịch sử
Triết lý thiết kế và tính năng
Cú pháp
Hiện/ẩn mục Cú pháp
Thư viện
Môi trường phát triển
Các bản triển khai
Hiện/ẩn mục Các bản triển khai
Phát triển
Sự phổ biến
Sử dụng
Ảnh hưởng ngôn ngữ
Xem thêm
Tham khảo
Liên kết ngoài
Python (ngôn ngữ lập trình)

Bài viết
Thảo luận
Đọc
Sửa đổi
Sửa mã nguồn
Xem lịch sử

Công cụ
Bách khoa toàn thư mở Wikipedia
Python

Mẫu hình	Ngôn ngữ lập trình hướng đối tượng, lập trình câu lệnh, lập trình hàm, lập trình thủ tục, lập trình phản xạ
Thiết kế bởi	Guido van Rossum
Nhà phát triển	Python Software Foundation
Xuất hiện lần đầu	1991; 33 năm trước
Phiên bản ổn định	
3.12.3[1] Sửa đổi tại Wikidata / 9 tháng 4 2024
Kiểm tra kiểu	Vịt, động, mạnh
từ phiên bản 3.5:

dần dần[2]
Giấy phép	Giấy phép Python Software Foundation
Phần mở rộng tên tập tin	.py,.pyc,.pyd,.pyo (trước 3.5),[3] .pyw,.pyz (từ 3.5)[4]
Trang mạng	www.python.org
Các bản triển khai lớn
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Phương ngữ
Cython, RPython, Starlark[5]
Ảnh hưởng từ
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl, Smalltalk
Ảnh hưởng tới
Boo, Cobra, CoffeeScript,[16] D, F#, Falcon, Genie,[17] Go, Apache Groovy, JavaScript,[18][19] Julia,[20] Nim, Ring,[21] Ruby,[22] Swift[23]
Python (phát âm tiếng Anh: /ˈpaɪθɑːn/) là một ngôn ngữ lập trình bậc cao cho các mục đích lập trình đa năng, do Guido van Rossum tạo ra và lần đầu ra mắt vào năm 1991. Python được thiết kế với ưu điểm mạnh là dễ đọc, dễ học và dễ nhớ. Python là ngôn ngữ có hình thức rất sáng sủa, cấu trúc rõ ràng, thuận tiện cho người mới học lập trình và là ngôn ngữ lập trình dễ học; được dùng rộng rãi trong phát triển trí tuệ nhân tạo. Cấu trúc của Python còn cho phép người sử dụng viết mã lệnh với số lần gõ phím tối thiểu.[24] Vào tháng 7 năm 2018, van Rossum đã từ chức lãnh đạo trong cộng đồng ngôn ngữ Python sau 30 năm làm việc.[25][26]

Python hoàn toàn tạo kiểu động và dùng cơ chế cấp phát bộ nhớ tự động; do vậy nó tương tự như Perl, Ruby, Scheme, Smalltalk, và Tcl. Python được phát triển trong một dự án mã mở, do tổ chức phi lợi nhuận Python Software Foundation quản lý.[27]

Ban đầu, Python được phát triển để chạy trên nền Unix. Nhưng rồi theo thời gian, Python dần mở rộng sang mọi hệ điều hành từ MS-DOS đến Mac OS, OS/2, Windows, Linux và các hệ điều hành khác thuộc họ Unix. Mặc dù sự phát triển của Python có sự đóng góp của rất nhiều cá nhân, nhưng Guido van Rossum hiện nay vẫn là tác giả chủ yếu của Python. Ông giữ vai trò chủ chốt trong việc quyết định hướng phát triển của Python.

Python luôn được xếp hạng vào những ngôn ngữ lập trình phổ biến nhất.[28][29][30][31]


Guido van Rossum, nhà sáng lập ngôn ngữ Python.
Lịch sử
Bài chi tiết: Lịch sử Python
Python đã được Guido van Rossum tạo ra vào những năm 1980[32] tại Trung tâm Toán học – Tin học (Centrum Wiskunde & Informatica, CWI) ở Hà Lan như là một ngôn ngữ kế tục ngôn ngữ ABC – một ngôn ngữ được lấy cảm hứng từ SETL,[33] có khả năng xử lí ngoại lệ và giao tiếp với hệ điều hành Amoeba.[34] Nó bắt đầu được triển khai vào tháng 12 năm 1989.[35] Van Rossum đã tự mình gánh vác trách nhiệm cho dự án, với vai trò là nhà phát triển chính, cho đến ngày 12 tháng 7 năm 2018, khi ông thông báo rằng ông sẽ rời bỏ trách nhiệm của ông và cả danh hiệu "Nhà độc tài nhân từ cho cuộc sống" của Python, một danh hiệu mà cộng đồng Python đã trao tặng cho ông vì sự tận tụy lâu dài của ông với vai trò là người ra quyết định chính cho dự án.[36] Vào tháng 1 năm 2019, các nhà phát triển phần lõi Python đã bầu ra một "Hội đồng chèo lái" gồm năm thành viên để dẫn dắt dự án.[37][38]

Python 2.0 được ra mắt vào ngày 16 tháng 10 năm 2000, với nhiều tính năng mới mẻ, bao gồm một bộ dọn rác phát hiện theo chu kỳ và khả năng hỗ trợ Unicode.[39]

Python 3.0 được ra mắt vào ngày mùng 3 tháng 12 năm 2008. Đây là một phiên bản lớn của Python không tương thích ngược hoàn toàn.[40] Nhiều tính năng lớn của nó đã được chuyển mã ngược (backport) về loạt phiên bản Python 2.6.x và 2.7.x.[41] Các bản phát hành của Python 3 có đi kèm với công cụ 2to3, có tác dụng tự động hoá việc dịch mã Python 2 sang Python 3.[42]

Python 3.9.2 và 3.8.8 được xúc tiến[43] vì tất cả các phiên bản trước của Python (bao gồm cả 2.7)[44] gặp một số vấn đề bảo mật, có thể dẫn đến thực thị mã từ xa[45] và "đầu độc" bộ nhớ đệm.[46]

Trong năm 2022, Python 3.10.4 và 3.9.12 được xúc tiến[47] cùng với 3.8.13 và 3.7.13, nguyên nhân là do một vài vấn đề về bảo mật.[48] Khi Python 3.9.13 được phát hành vào tháng Năm năm 2022, loạt phiên bản 3.9 (cùng với loạt 3.8 và 3.7) được thông báo rằng sẽ chỉ nhận được các bản vá bảo mật trong tương lai.[49] Vào ngày 7 tháng Chín năm 2022, bốn bản cập nhật mới được phát hành do có khả năng xảy ra một cuộc tấn công từ chối dịch vụ: 3.10.7, 3.9.14, 3.8.14 và 3.7.14.[50][51]

Tính đến tháng 10 năm 2023, Python 3.12 là bản phát hành ổn định mới nhất. Một số thay đổi đáng chú ý từ bản 3.11 bao gồm các thay đổi về ngôn ngữ và thư viện chuẩn.[52]

Triết lý thiết kế và tính năng
Python là một ngôn ngữ lập trình đa mẫu hình, lập trình hướng đối tượng và lập trình cấu trúc được hỗ trợ hoàn toàn, và nhiều tính năng của nó cũng hỗ trợ lập trình hàm và lập trình hướng khía cạnh (bao gồm siêu lập trình[53] và siêu đối tượng (phương thức thần kỳ)).[54] Các mẫu hình khác cũng được hỗ trợ thông qua các phần mở rộng, bao gồm thiết kế theo hợp đồng[55][56] và lập trình logic.[57]

Python sử dụng kiểu động và một dạng kết hợp giữa đếm tham chiếu và bộ dọn rác kiểm tra theo chu kì để quản lí bộ nhớ.[58] Nó cũng có tính năng phân giải tên động (liên kết muộn), cho phép liên kết các tên biến và phương thức trong quá trình thực thi chương trình.

Thiết kế của Python cung cấp một số tính năng cho lập trình hàm giống như trong ngôn ngữ Lisp. Python có các hàm filter, map và reduce; thông hiểu danh sách (list comprehension), từ điển (dictionary), tập hợp (set), và các biểu thức bộ sinh (generator).[59] Thư viện chuẩn cũng có hai mô đun (itertools và functools) triển khai các công cụ hàm được vay mượn từ Haskell và Standard ML.[60]

Triết lý căn bản của ngôn ngữ Python được trình bày trong tài liệu The Zen of Python (PEP 20), có dạng thơ Haiku, tóm gọn như sau:

Đẹp đẽ tốt hơn xấu xí
Minh bạch tốt hơn ngầm định
Đơn giản tốt hơn phức tạp
Phức tạp tốt hơn rắc rối
Tính dễ đọc rất quan trọng.
Thay vì tích hợp hết tất cả các tính năng vào phần cốt lõi, Python được thiết kế để dễ dàng mở rộng (bằng các mô đun). Tính mô đun nhỏ gọn này đã làm cho Python trở nên phổ biến như là một cách thêm các giao diện lập trình được vào các ứng dụng hiện có. Tầm nhìn của Van Rossum về một ngôn ngữ có phần lõi nhỏ với một thư viện chuẩn rộng lớn và một trình thông dịch dễ dàng mở rộng bắt nguồn từ việc ông nản lòng trước ABC, một ngôn ngữ lập trình tán thành hướng tiếp cận ngược lại.[32] Python thường được mô tả là một ngôn ngữ "tặng kèm pin" nhờ vào thư viện chuẩn bao quát của nó.[61]

Python nỗ lực hướng đến một cú pháp đơn giản hơn, gọn gàng hơn trong khi vẫn cho các nhà phát triển lựa chọn phương pháp viết mã của họ. Đối lập với khẩu hiệu "có nhiều hơn một cách để làm việc này," triết lý thiết kế của Python lại nằm trong châm ngôn "chỉ nên có một— và tốt nhất là chỉ một—cách rõ ràng để làm việc này".[62] Alex Martelli, một Viện sĩ (Fellow) tại Tổ chức Phần mềm Python (Python Software Foundation) và là một tác giả viết sách Python, viết rằng "Mô tả một thứ gì đó là "tài tình" không được coi là một lời khen ngợi trong văn hoá Python."[63]

Các nhà phát triển Python nỗ lực tránh xa việc tối ưu hoá quá sớm và không chấp nhận các bản vá không cải thiện đáng kể tốc độ mà lại làm mất đi tính rõ ràng lên những phần không thiết yếu của bản triển khai tham khảo CPython.[63] Khi cần đến tốc độ, một lập trình viên Python có thể di chuyển các hàm bị giới hạn về thời gian sang các mô đun mở rộng được viết bằng những ngôn ngữ như C, hoặc sử dụng PyPy, một trình biên dịch tức thời. Cython cũng có thể được dùng để phiên dịch một tập lệnh Python sang C và tạo ra các lệnh gọi API ở cấp độ của C trực tiếp vào trình thông dịch Python.

Mục tiêu mà các nhà phát triển Python hướng đến là đem đến niềm vui khi sử dụng ngôn ngữ này. Điều này được thể hiện qua bản thân cái tên – một sự tôn vinh dành cho nhóm hài người Anh Monty Python[64] – và trong một số cách tiếp cận thi thoảng vui tươi trong hướng dẫn và các tài liệu tham khảo, chẳng hạn như một vi dụ có đề cập đến trứng và spam (gợi nhắc đến một tiểu phẩm trong Monty Python) thay cho foo và bar tiêu chuẩn.[65][66]

Một từ ngữ mới phổ biến trong cộng đồng Python là pythonic (đậm chất Python), một từ có thể có nhiều ý nghĩa liên quan đến phong cách lập trình. Nói rằng một phần mã nào đó là pythonic tức là phần mã đó sử dụng tốt các thành ngữ Python, trông tự nhiên hoặc trôi chảy về ngôn ngữ, phù hợp với triết lý tối giản của Python và nhấn mạnh vào tính dễ đọc. Ngược lại, những phần mã khó hiểu hoặc trông như một bản dịch thô từ một ngôn ngữ lập trình khác được gọi là unpythonic (không đậm chất Python).[67][68]

Những người sử dụng và say mê Python, nhất là những người được cho là am hiểu hay có nhiều kinh nghiệm, thường được gọi là các Pythonista.[69][70]

Cú pháp
Bài chi tiết: Cú pháp Python
Python là một ngôn ngữ dễ đọc, dễ hiểu. Định dạng của nó rất gọn gàng về mặt trực quan, và nó thường sử dụng các từ khoá tiếng Anh trong khi các ngôn ngữ khác lại sử dụng các dấu câu. Khác với nhiều ngôn ngữ khác, nó không sử dụng các dấu ngoặc nhọn để giới hạn các khối lệnh, và dấu chấm phẩy cuối câu lệnh rất ít khi được sử dụng dù không bị cấm. Nó có ít ngoại lệ cú pháp và trường hợp đặc biệt hơn C và Pascal.[71]

Thụt lề
Python sử dụng thụt lề bằng khoảng trắng hoặc ký tự tab thay vì dùng ngoặc nhọn hay các từ khoá để giới hạn khối lệnh. Lề thường được thụt vào sau một câu lệnh và thụt ra để đánh dấu kết thúc khối lệnh hiện tại. Cho nên, cấu trúc trực quan của chương trình sẽ thể hiện một cách chính xác cấu trúc ngữ nghĩa của chương trình đó.[72] Tính năng này thỉnh thoảng cũng được gọi là "quy tắc việt vị", một quy tắc cũng xuất hiện ở một số ngôn ngữ; nhưng trong phần lớn ngôn ngữ thì thụt lề không phụ thuộc vào cú pháp. Cỡ thụt lề được khuyến cáo là bốn dấu cách.[73]

Câu lệnh và luồng điều khiển
Một số câu lệnh trong Python gồm có:

Câu lệnh gán, sử dụng một dấu bằng =.
Câu lệnh if: thực thi một khối lệnh nếu thoả mãn điều kiện, sử dụng cùng với else và elif (viết tắt của else-if).
Câu lệnh for: lặp qua một đối tượng lặp được, gán mỗi phần tử và một biến cục bộ để sử dụng trong khối lệnh của vòng lặp.
Câu lệnh while: thực thi một khối lệnh chừng nào điều kiện còn đúng.
Câu lệnh try: cho phép bắt ngoại lệ được nâng lên (raise) trong khối lệnh và dùng vế except để xử lý; câu lệnh cũng đảm bảo rằng phần mã dọn dẹp trong khối finally sẽ được chạy dù có lỗi hay không.
Câu lệnh raise: được dùng để nâng một ngoại lệ hoặc nâng lại một ngoại lệ đã được bắt từ trước.
Câu lệnh class: thực thi một khối lệnh và gắn không gian tên cục bộ của nó vào một lớp, để dùng trong lập trình hướng đối tượng.
Câu lệnh def: định nghĩa một hàm hoặc phương thức.
Câu lệnh with: bao bọc một khối lệnh bằng một bộ quản lí ngữ cảnh (context manager) (ví dụ như khoá luồng lại trước khi chạy mã rồi mở khoá, hoặc mở một tệp rồi đóng tệp lại), cho phép các hành vi kiểu RAII (sự đạt được tài nguyên là sự khởi tạo) và thay thể cho các câu lệnh try/finally thường thấy.[74]
Câu lệnh break: thoát ra khỏi vòng lặp.
Câu lệnh continue: bỏ qua lần lặp này và tiếp tục với mục kế tiếp.
Câu lệnh del: loại bỏ một biến, tức là tham chiếu từ tên đến giá trị sẽ bị xoá và cố gắng sử dụng biến đó sẽ gây lỗi. Một biến đã bị xoá có thể được gán lại.
Câu lệnh pass: đóng vai trò như là một dạng NOP. Câu lệnh này được dùng để tạo các khối lệnh rỗng.
Câu lệnh assert: được dùng trong khi gỡ lỗi để kiểm tra điều kiện nên đúng.
Câu lệnh yield: trả lại giá trị từ một hàm bộ sinh; bản thân yield cũng là một toán tử. Dạng này được dùng để triển khai các đồng thường trình.
Câu lệnh return: trả lại một giá trị từ một hàm hay phương thức.
Câu lệnh import: được dùng để nhập các mô đun chứa các hàm và biến được sử dụng trong chương trình hiện tại.
Câu lệnh gán (=) hoạt động bằng cách liên kết một tên dưới dạng một tham chiếu với một đối tượng được cấp phát động riêng lẻ. Các biến có thể được dùng lại bất cứ lúc nào với bất cứ đối tượng nào. Trong Python, một tên biến chỉ giữ tham chiếu một cách chung chung và không có kiểu dữ liệu cố định đi kèm. Tuy nhiên, tại một thời điểm nhất định, một biến sẽ tham chiếu đến một vài đối tượng có kiểu. Nó được gọi là kiểu động, ngược lại với các ngôn ngữ lập trình kiểu tĩnh với mỗi biến chỉ có thể chứa giá trị của một kiểu nhất định.

Biểu thức
Một số biểu thức trong Python tương tự như những biểu thức trong những ngôn ngữ khác chẳng hạn như C và Java, trong khi số khác thì không:

Phép cộng, trừ và nhân thì đều giống nhau, nhưng hành vi của phép chia thì khác nhau. Có hai loại phép chia trong Python: phép chia phần nguyên (phép chia số nguyên) dùng dấu // và phép chia dấu phẩy động dùng dấu /.[75] Python cũng sử dụng toán tử ** cho phép luỹ thừa.
Từ Python 3.5, toán tử trung tố @ mới đã được giới thiệu. Nó được thiết kể để được sử dụng trong các thư viện như NumPy để nhân ma trận.[76][77]
Từ Python 3.8, cú pháp :=, hay "toán tử moóc" đã được giới thiệu. Nó gán giá trị vào biến trong một phần của một biểu thức lớn hơn.[78]
Trong Python, == so sánh theo giá trị, khác với Java, vốn so sánh các số theo giá trị[79] và các đối tượng theo tham chiếu.[80] (So sánh giá trị trong Java có thể được thực hiện bằng phương thức equals().) Toán tử is của Python có thể được dùng để so sánh danh tính của đối tượng (so sánh theo tham chiếu). Trong Python, các phép so sánh có thể được xâu chuỗi lại với nhau, ví dụ như a <= b <= c.
Python sử dụng các từ khoá and, or, not để so sánh luận lý (boolean) thay vì dùng các loại biểu tượng &&, ||, ! được dùng trong Java và C.
Python có một loại biểu thức được gọi là thông hiểu danh sách (list comprehension) cũng như một loại biểu thức chung được gọi là biểu thức bộ sinh (generator expression).[59]
Các hàm vô danh được triển khai thông qua các biểu thức lambda; tuy nhiên, phần thân của hàm vô danh chỉ có thể là đúng một biểu thức.
Biểu thức điều kiện trong Python được viết dưới dạng x if c else y[81] (có sự khác biệt về trật tự của các toán hạng so với toán tử c ? x : y thường có trong những ngôn ngữ khác).
Có sự phân biệt giữa danh sách và bộ trong Python. Danh sách được viết dưới dạng [1, 2, 3], biển đổi được, và không thể được dùng như khoá cho từ điển (các khoá từ điển phải là bất biến trong Python). Bộ được viết dưới dạng (1, 2, 3), không biến đổi được nên có thể được dùng làm khoá của từ điển, với điều kiện là tất cả các phần tử trong bộ cũng phải là bất biến. Toán tử + có thể được sử dụng để nối liền hai bộ lại với nhau, như không trực tiếp thay đổi nội dung của chúng, mà sẽ tạo ra một bộ mới chứa các phần tử của cả hai bộ ban đầu. Vì vậy, cho một biến t ban đầu bằng (1, 2, 3), chạy lệnh t = t + (4, 5) sẽ thực thì t + (4, 5) đầu tiên, tạo ra (1, 2, 3, 4, 5), rồi mới được gán lại cho t, bằng cách đó đã "chỉnh sửa nội dung" của t một cách hiệu quả, trong khi vẫn tuân theo bản chất bất biến của đối tượng bộ. Trong các ngữ cảnh không mơ hồ thì dấu ngoặc đơn là không cần thiết.[82]
Python có một tính năng là tháo tách chuỗi (sequence unpacking) trong đó các biểu thức, mà mỗi biểu thức được đánh giá thành bất kì thứ gì có thể được gán vào (một biến, một thuộc tính viết được...), được liên kết theo cùng một cách với các bộ ban đầu đó và được đặt vào vế bên trái dấu bằng trong một câu lệnh gán. Câu lệnh này mong đợi một một đối tượng lặp được (iterable) ở vế bên phải dấu bằng tạo ra cùng một số lượng giá trị giống như ở các biểu thức trước đó khi đã và sẽ lặp qua, rồi gán mỗi giá trị được tạo ra bằng các biểu thức tương ứng ở vế bến trái.[83]
Python có một toán tử "định dạng xâu" là %. Chức năng này tương tự như định dạng xâu printf trong C, thí dụ như "spam=%s eggs=%d" % ("blah", 2) được đánh giá thành "spam=blah eggs=2". Trong Python 3 và 2.6+, chức năng này được bổ sung bằng phương thức format() của lớp str, ví dụ như "spam={0} eggs={1}".format("blah", 2). Python 3.6 đã bổ sung thêm "f-string": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}'.[84]
Các xâu trong Python có thể được ghép móc với nhau bằng cách "cộng" chúng lại (dùng cùng toán tử với phép cộng số nguyên và số phẩy động). Thí dụ, "spam" + "eggs" cho ra "spameggs". Kể cả nếu xấu chứa số, chúng vẫn sẽ được ghép móc thành xâu thay vì số nguyên. Thí dụ, "2" + "2" cho ra"22".
Python có nhiều kiểu hằng xâu khác nhau:
Xâu được phân cách bởi dấu nháy đơn hoặc nháy kép. Khác với hệ vỏ Unix, Perl và các ngôn ngữ ảnh hưởng từ Perl, dấu nháy đơn và dấu nháy kép có cùng chức năng. Cả hai loại xâu đều dùng dấu chéo ngược (\) làm ký tự thoát (escape character). Nội suy xâu đã được thêm vào kể từ Python 3.6 với tên gọi "hằng xâu được định dạng".[84]
Xâu ba dấu nháy: bắt đầu và kết thúc bằng ba dấu nháy đơn hoặc kép. Chúng có thể trải dài trên nhiều dòng giống như trong tài liệu đây (here document) trong các hệ vỏ, Perl và Ruby.
Các loại xâu thô, được kí hiệu bằng cách đặt trước hằng xâu một kí tự r. Các chuỗi thoát sẽ không bị thông dịch; cho nên xâuthô khá là hữu ích khi xâu có chứa nhiều dấu chéo ngược, chẳng hạn như biểu thức chính quy và đường dẫn tệp trên Windows.
Python có các biểu thức chỉ số mảng và cắt lát mảng đối với danh sách, được kí hiệu là a[khoá], a[đầu:cuối] hay a[đầu:cuối:bước]. Các chỉ số được đánh từ số không, và chỉ số âm sẽ chỉ lùi từ cuối lên. Việc cắt lát sẽ lấy các phần tử từ đầu cho đến chỉ số cuối (không kể chỉ số cuối). Tham số cắt lát thứ ba, được gọi là bước, cho phép các phần tử có thể được bỏ qua hoặc đảo chiều. Chỉ số lát có thể được bỏ trống, ví dụ a[:]trả lại một bản sao của danh sách đó. Mỗi phần tử trong một lát là một bản sao nông.
Trong Python các biểu thức và câu lệnh được phân biệt một cách vững chắc, ngược lại với các ngôn ngữ như Common Lisp, Scheme, hay Ruby. Điều này đã dẫn tới nhiều biểu thức và câu lệnh có cùng chức năng. Thí dụ:

Thông hiểu danh sách và vòng lặp for
Biểu thức điều kiện và khối lệnh if
Hàm eval() (đánh giá các biểu thức) và exec() (thực thi các câu lệnh); trong Python 2, exec là một câu lệnh.
Câu lệnh không thể nằm trong biểu thức, vậy nên các loại thông hiểu (gồm cả danh sách) và biểu thức lambda, vốn là các biểu thức, không thể chứa các câu lệnh. Một trường hợp cụ thể là một câu lệnh gán chẳng hạn như a = 1 không thể là một phần của biểu thức điều kiện của một câu lệnh điều kiện. Điều này sẽ giúp tránh được các lỗi viết sai toán tử bằng == bằng toán tử gán = trong câu điều kiện thường thấy ở C. Ví dụ, if (c = 1) { ... } là một đoạn mã C hợp lệ (nhưng chắc là không đúng ý) còn if c = 1: ... sẽ báo lỗi cú pháp trong Python.

Phương thức
Phương thức của đối tượng là một hàm đi kèm với lớp của đối tượng đó. Cú pháp hiện_thể.phương_thức(đối số), đối với các hàm và phương thức bình thường, thức chất là dạng cú pháp đặc biệt của Lớp.phương_thức(hiện_thể, đối số). Các phương thức trong Python có một tham số self được dùng để truy cập dữ liệu của hiện thể (instance), ngược lại với biến bản thân (self haythis) trong một số ngôn ngữ lập trình hướng đối tượng khác (C++, Java, Objective-C, hay Ruby). Ngoại trừ điều này, Python cũng cung cấp các phương thức gạch dưới (do tên của chúng bắt đầu và kết thúc bằng hai dấu gạch dưới), cho phép các lớp do người dùng định nghĩa thay đổi cách các lớp này được xử lý bởi các thao tác của Python chẳng hạn như lấy chiều dài, so sánh, tính toán số học, chuyển đổi kiểu...[85]

Kiểu dữ liệu

Cấp bậc kiểu tiêu chuẩn trong Python 3
Python sử dụng định kiểu vịt (duck typing) và có các đối tượng có kiểu nhưng tên biến thì không có kiểu. Giới hạn về kiểu không được kiểm tra trong lúc biên dịch; thay vào đó. các thao tác lên một đối tượng có thể thất bại, chỉ ra rằng đối tượng đó không thuộc vào kiểu dữ liệu phù hợp. Tuy là định kiểu động, Python cũng định kiểu mạnh khi không cho phép các thao tác mà không được định nghĩa rõ ràng (chẳng hạn như cộng một số vào một xâu) thay vì lặng lẽ cố gắng diễn giải thao tác đó.

Python cho phép các lập trình viên định nghĩa các kiểu của riêng họ bằng cách sử dụng lớp, thường được dùng trong lập trình hướng đối tượng. Các hiện thể của một lớp thường được tạo ra bằng cách gọi lớp đó (chẳng hạn như SpamClass() hay EggsClass()), các lớp lại là hiện thể của siêu lớp type (bản thân nó cũng là một hiện thể của chính nó), cho phép siêu lập trình và phản xạ.

Trước phiên bản 3.0, Python có hai loại lớp là kiểu cũ và kiểu mới.[86] Cú pháp của cả hai kiểu đều giống nhau. Sự khác biệt nằm ở chỗ lớp đó có kế thừa từ lớp object một cách trực tiếp hoặc gián tiếp hay không (tất cả các lớp kiểu mới đều kế thừa từ object và là hiện thể của type). Từ phiên bản Python 2.2 trở đi, cả hai loại lớp đều có thể được sử dụng. Lớp kiểu cũ đã bị loại bỏ trong Python 3.0.

Kế hoạch dài hạn là hỗ trợ định kiểu dần dần[87] và từ Python 3.5, cú pháp của ngôn ngữ này cho phép chỉ rõ các kiểu tĩnh nhưng chúng lại không được kiểm tra trong bản triển khai mặc định, CPython. Một trình kiểm tra kiểu tĩnh đang trong quá trình thử nghiệm và tuỳ chọn tên là mypy có hỗ trợ kiểm tra kiểu trong thời gian biên dịch.[88]

Tóm tắt các kiểu dữ liệu có sẵn trong Python 3
Kiểu	Thay đổi được	Mô tả	Ví dụ cú pháp
bool	không	Kiểu dữ liệu luận lý	TrueFalse
bytearray	có	Chuỗi các byte nối tiếp	bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes	không	Chuỗi các byte nối tiếp	b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex	không	Số phức với phần thực và phần ảo	3+2.7j3 + 2.7j
dict	có	Mảng liên kết (hay từ điển) các cặp khoá và giá trị; có thể chứa lẫn lộn nhiều kiểu (khoá và giá trị), khoá phải là loại băm được	{'key1': 1.0, 3: False}{}
ellipsisa	không	Một kiểu giữ chỗ chấm lửng được dùng như một chỉ số trong một mảng NumPy	...Ellipsis
float	không	Số phẩy động độ chính xác đôi. Độ chính xác phụ thuộc vào từng máy nhưng trên thực tế thì nó thường được triển khai là một số IEEE 754 64-bit với độ chính xác là 53 bit.[89]	1.33333
frozenset	không	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	frozenset([4.0, 'string', True])
int	không	Số nguyên với độ lớn không giới hạn[90]	42
list	có	Danh sách, có thể chứa lẫn lộn nhiều kiểu	[4.0, 'string', True][]
NoneTypea	không	Một đối tượng đại diện cho sự không có mặt của dữ liệu, tương đương với null trong các ngôn ngữ khác	None
NotImplementedTypea	không	Một kiểu giữ chỗ có thể được trả lại từ toán tử nạp chồng để biểu thị kiểu toán hạng không được hỗ trợ.	NotImplemented
range	không	Một chuỗi các số thường được dùng để lặp với số lần biết trước trong vòng lặpfor[91]	range(-1, 10)range(10, -5, -2)
set	có	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	{4.0, 'string', True}set()
str	không	Một xâu ký tự (string): chuỗi các điểm mã Unicode	'Wikipedia'"Wikipedia"
"""Trải dài trên
nhiều
dòng"""
tuple	không	Bộ; có thể chứa lẫn lộn nhiều kiểu	(4.0, 'xâu kí tự', True)('phần tử',)()
^a Không thể được truy cập trực tiếp bằng tên

Phép tính số học
Python có các kí hiệu thường dùng cho các toán tử số học (+, -, *, /), toán tử chia sàn // và toán tử chia lấy dư % (số dư có thể âm, chẳng hạn như 4 % -3 == -2). Nó cũng có toán tử ** cho phép luỹ thừa, chẳng hạn như 5**3 == 125 và 9**0.5 == 3.0, và toán tử nhân ma trận @.[92] Các toán tử này hoạt động giống như trong toán học truyền thống, với cùng thứ tự tính toán, toán tử trung tố (+ và - cũng có thể làm toán tử một ngôi để biểu diễn số dương và số âm một cách tương ứng).

Phép chia giữa các số nguyên tạo ra kết quả là số phẩy động. Hành vi của phép chia đã thay đổi đáng kể theo thời gian:[93]

Python hiện tại (kể từ 3.0) thay đổi / thành phép chia số phẩy động, ví dụ: 5/2 == 2.5.
Python 2.2 đã thay đổi phép chia số nguyên để nó làm tròn về phía âm vô cực, ví dụ 7/3 == 2 và -7/3 == -3. Toán tử chia sàn // đã được giới thiệu. Cho nên 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 và -7.5//3 == -3.0. Thêm from __future__ import division sẽ làm cho một mô đun sử dụng quy tắc chia của Python 3.0.
Python 2.1 về trước sử dụng hành vi chia kiểu C. Toán tử / là phép chia nguyên nếu cả hai toán hạng là số nguyên, nếu không thì là phép chia số phẩy động. Phép chia nguyên làm tròn về 0, ví dụ 7/3 == 2 và -7/3 == -2.
Trong thuật ngữ Python, / là phép chia đúng (gọi tắt là phép chia), và // là phép chia sàn. Toán tử / trước phiên bản 3.0 là phép chia cổ điển.[93]

Việc làm tròn về phía âm vô cực, dù khác biết so với những ngôn ngữ khác, đem lại sự chắc chắn. Ví dụ, phương trình (a + b)//b == a//b + 1 là luôn đúng. Còn phương trình b*(a//b) + a%b == a thì hợp lệ với cả giá trị a dương và âm. Tuy nhiên, duy trì tính hợp lệ của phương trình này cũng đồng nghĩa răng trong khi kết quả của a%b là, đúng như mong đợi, nằm trong nửa khoảng mở [0, b), với b là một số nguyên dương, nó cũng cần phải nằm trong khoảng (b, 0] khi b âm.[94]

Python cung cấp một hàm round để làm tròn một số phẩy động thành số nguyên gần nhất. Để gỡ hoà (với những số có chữ số cuối là 5), Python 3 sử dụng làm tròn thành số chẵn: round(1.5) và round(2.5) đều là 2.[95] Các phiên bản trước 3 làm tròn xa số không: round(0.5) là 1.0, round(-0.5) là −1.0.[96]

Python cho phép sử dụng các biểu thức luận lý với nhiều quan hệ băng nhau theo một cách đồng nhất với cách dùng chung trong toán học. Thí dụ, biểu thức a < b < c kiểm tra xem a có nhỏ hơn b và b có nhỏ hơn c hay không.[97] Các ngôn ngữ dựa trên C sẽ hiểu biểu thức trên khác đi: trong C, biểu thức trên sẽ đánh giá a < b trước tiên, cho ra kết quả 0 hoặc 1, rồi kết quả đó mới được so sánh với c.[98]

Python sử dụng số học có độ chính xác tuỳ ý cho tất cả các thao tác với số nguyên. Kiểu/Lớp Decimal trong mô đun decimal cung cấp số dấu phẩy động thập phân với một độ chính xác tuỳ ý được định trước và một vài chế độ làm tròn.[99] Lớp Fraction trong mô đun fractions cung cấp độ chính xác tuỳ ý cho số hữu tỉ.[100]

Nhờ thư viện toán học rộng lớn của Python và thư viện bên thứ ba NumPy với nhiều tính năng hơn nữa, Python thường được dùng như một ngôn ngữ kịch bản để giải quyết các vấn đề chẳng hạn như thao tác và xử lí dữ liệu số.[101][102]

Chú thích
# dòng chú thích
In giá trị
# Từ Python 3
print((7 + 8) / 2.0)
print((2 + 3j) * (4 - 6j))
Nội suy xâu (string interpolation)

print("Hello {}!".format("world"))
print("a = {.2f} và b = {.2f}".format(a,b))
Cấu trúc rẽ nhánh
Dạng 1:
if biểu_thức_điều_kiện:
    # lệnh...
Dạng 2:
if biểu_thức_điều_kiện:
    # lệnh...
else:
    # lệnh...
Dạng 3:
if biểu_thức_điều_kiện_1:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là đúng/true)
elif biểu_thức_điều_kiện_2:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là sai/false, nhưng biểu_thức_điều_kiện_2 là đúng/true)
else:
    # lệnh... (được thực hiện nếu tất cả các biểu thức điều kiện đi kèm if và elif đều sai)
Khớp theo mẫu, được thêm vào từ bản 3.10.0:
match biến_1:
    case điều_kiện_1:
        #được thực hiện nếu biến_1 = điều_kiện_1
    case điều_kiện_2:
        #được thực hiện nếu biến_1 = điều_kiện_2
Cấu trúc lặp
while biểu_thức_đúng:
    # lệnh...
for phần_tử in dãy:
    # lệnh...
L = ["Hà Nội", "Hải Phòng", "TP Hồ Chí Minh"]
for thành_phố in L:
    print(thành_phố)

for i in range(10):
    print(i)
Hàm
def tên_hàm (tham_biến_1, tham_biến_2, tham_biến_n):
    # lệnh...
    return giá_trị_hàm
Hàm với tham số mặc định:

def luỹ_thừa(x, n=2):
   """Lũy thừa với số mũ mặc định là 2"""
   return x**n

print(luỹ_thừa(3))   # 9
print(luỹ_thừa(2,3)) # 8
Lớp
class Lớp:
    #...

class LớpCon(Lớp):
    """LớpCon kế thừa lớp Lớp"""
    x = 3  # biến thành viên của lớp
    #
    def phương_thức(self, tham_biến):
        #...

# khởi tạo
a = LớpCon()
print(a.x)
print(a.phương_thức(m))  # m là giá trị gán cho tham biến
Xử lý ngoại lệ
try:
    câu_lệnh
except Loại_Lỗi:
    thông báo lỗi
Thư viện
Bộ thư viện chuẩn rộng lớn của Python – một trong những điểm mạnh lớn nhất của Python[103] – cung cấp các công cụ phù hợp cho nhiều công việc khác nhau. Với các ứng dụng giao tiếp với Internet, nhiều giao thức và định dạng chuẩn chẳng hạn như MIME and HTTP được hỗ trợ. Nó cũng có chứa các mô đun đành cho việc tạo lập giao diện người dùng đồ hoạ, kết nối với cơ sở dữ liệu quan hệ, sinh số giả ngẫu nhiên, tính toán với số thập phân có độ chính xác tuỳ ý,[104] thao tác với biểu thức chính quy và kiểm thử đơn vị.

Một số phần của thư viện chuẩn nằm trong đặc tả (ví dụ, Giao diện Cổng vào Máy chủ Web (Web Server Gateway Interface hay WSGI) triển khai wsgiref theo PEP 333[105]), nhưng phần lớn mô đun thì không. Chúng được xác định dựa vào mã, tài liệu bên trong và bộ kiểm thử (test suite) của chúng. Tuy nhiên, vì phần lớn thư viện chuẩn là mã Python đa nền tảng, chỉ một vài mô đun cần được chỉnh sửa hoặc viết lại cho các bản triển khai khác nhau.

Tính đến tháng 9 năm 2021, Python Package Index (PyPI), kho chính thức dành cho các phần mềm Python bên thứ ba, có chứa hơn 329.000[106] gói với nhiều chức năng đa dạng và phong phú, bao gồm:
Tự động hoá
Phân tích dữ liệu
Cơ sở dữ liệu
Tài liệu
Giao diện người dùng đồ hoạ
Xử lý hình ảnh
Học máy
Ứng dụng di động
Đa phương tiện
Mạng máy tính
Khoa học tính toán
Quản trị hệ thống
Kiểm thử tự động
Xử lí văn bản
Bộ khung mạng
Thu thập web
Môi trường phát triển
Xem thêm: So sánh các môi trường phát triển tích hợp § Python
Phần lớn trình hiện thực Python (kể cả CPython) có chứa một trình lặp đọc–tính–in (REPL), cho phép chúng hoạt động như là một trình thông dịch dòng lệnh mà người dùng sẽ lần lượt nhập các câu lệnh và nhận kết quả ngay lập tức.

Python đì kèm với một môi trường phát triển tịch hợp (IDE) được gọi là IDLE, phù hợp với người mới bắt đầu.

Các hệ vỏ khác, bao gồm IDLE và IPython, có thêm khả năng tự hoàn thiện, khôi phục trạng thái phiên, và tô sáng cú pháp.

Ngoài các môi trường phát triển tích hợp trên máy để bàn, còn có những IDE chạy trên trình duyệt web: SageMath (dành cho việc phát triển các chương trình Python liên quan đền toán học và khoa học); PythonAnywhere, một IDE kiêm môi trường chủ nhà; và Canopy IDE, một IDE Python thương mại tập trung vào khoa học tính toán.[107]

Các bản triển khai
Xem thêm: Danh sách phần mềm Python § Các bản thực hiện Python
Bản triển khai tham khảo
CPython là bản triển khai tham khảo của Python. Nó được viết bằng C, đáp ứng tiêu chuẩn C89 vời một vào tính năng C99 chọn lọc (từ khi các phiên bản C mới hơn ra mắt, nó được coi là lỗi thời;[108][109] CPython có chứa phần mở rộng C của riêng nó, nhưng các phần mở rộng bên thứ ba không bị giới hạn bởi các phiên bản C cũ hơn, có thể được cài đặt với C11 hoặc C++[110]). Nó biên dịch các chương trình Python thành một dạng mã byte trung gian, sau đó thực thi mã byte trên máy ảo của nó. CPython được phân phối cùng với một thư viện chuẩn rộng lớn được viết bằng C và Python bản địa (native). Nó có sẵn trên nhiều nền tảng, bao gồm Windows (từ Python 3.9, trình cài đặt Python sẽ không chạy một cách có chủ ý trên Windows 7 và 8;[111][112] Windows XP đã từng được hỗ trợ cho đến Python 3.5) và phần lớn hệ điều hành tương tự Unix hiện đại, bao gồm macOS (và máy Mac Apple M1, kể từ Python 3.9.1, với trình cài đặt thử nghiệm) và hỗ trợ không chính thức cho chẳng hạn như VMS.[113] Tính khả chuyển nền tảng là một trong những ưu tiên sớm nhất của nó, trong khung thời gian Python 1 và Python 2, khi ngay cả OS/2 và Solaris cũng được hỗ trợ;[114] song nhiều hệ điều hành cũng không còn được hỗ trợ nữa.

Các bản triển khai khác
PyPy là một trình thông dịch nhanh, tuân thủ cú pháp của Python 2.7 và 3.6.[115] Trình biên dịch tức thời của nó mang đến tốc độ vượt trội so với CPython nhưng một vài thư viện được viết bằng C lại không thể được sử dụng cùng với nó.[116]
Stackless Python là một phân nhánh (fork) đáng chú ý của CPython có cài đặt vi luồng; nó không sử dụng ngăn xếp lời gọi theo cùng một cách với CPython, vậy nên nó hỗ trợ các chương trình đồng thời một cách ồ ạt. PyPy cũng có một phiên bản không có ngăn xếp.[117]
MicroPython và CircuitPython là các biến thể Python 3 được tối ưu hoá cho vi điều khiển, bao gồm Lego Mindstorms EV3.[118]
Pyston là một biến thể của Python sử dụng biên dịch tức thời để tăng tốc độ thực thi các chương trình Python.[119]
Cinder là một phân nhánh hướng hiệu năng của CPython 3.8 có chứa một số tối ưu hoá bao gồm đệm bộ nhớ mã byte trong dòng, đánh giá các chương trình con một cách tham vọng, một trình biên dịch tức thời "mỗi lúc một phương thức" và một trình biên dịch mã byte thử nghiệm.[120]
Trình biên dịch chéo sang ngôn ngữ khác
Có một số trình biên dịch sang những ngôn ngữ đối tượng bậc cao khác từ ngôn ngữ mã nguồn là Python, một tập con giới hạn của Python hoặc một ngôn ngữ tương tự Python:

Brython,[121] Transcrypt[122][123] và Pyjs (phát hành lần cuối năm 2012) biên dịch Python sang JavaScript.
Codon biên dịch một tập con Python định kiểu tĩnh[124] sang mã máy (thông qua LLVM) và hỗ trợ đa luồng cho hệ thống bản địa.[125]
Cython biên dịch (một tập cha của) Python 2.7 sang C. Phần mã kết quả cũng dùng được với Python thông qua các lệnh gọi API mức C trực tiếp vào trình thông dịch Python.
Nuitka biên dịch Python sang C.[126]
Numba sử dụng LLVM để biên dịch một tập con của Python sang mã máy.
Pythran biên dịch một tập con của Python 3 sang C++.[127][128][129]
Pyrex (bản mới nhất năm 2010) và Shed Skin (bản mới nhất năm 2013) biên dịch lần lượt sang C và C++.
Google's Grumpy (bản mới nhất năm 2017) phiên dịch Python 2 to Go.[130][131][132]
IronPython cho phép chạy các chương trình Python 2.7 trên .NET Common Language Runtime.[133]
Jython biên dịch Python 2.7 sang mã byte Java, cho phép sử dụng các thư viện Java từ một chương trình Python.[134]
RPython có thể được biên dịch sang C, và được dùng để xây dựng trình thông dịch PyPy của Python.
Phát triển
Sự phát triển của Python được chỉ đạo phần lớn là thông qua quy trình Đề nghị Cải tiến Python (Python Enhancement Proposal, hay PEP), cơ chế chủ yếu để đề nghị các tính năng lớn mới, thu thập ý kiến của cộng đồng về các vấn đề và ghi chép lại các quyết định về thiết kế của Python.[135] Phong cách viết mã của Python nằm trong PEP 8.[73] Các PEP xuất sắc sẽ được xem lại và bình luận bởi cộng đồng Python và hội đồng chèo lái.[135]

Sự cải tiến ngôn ngữ tương ứng với sự phát triển của bản triển khai tham khảo CPython. Danh sách thư python-dev là diễn đàn chính về sự phát triển của ngôn ngữ này. Các vấn đề cụ thể được thảo luận trong hệ theo dõi lỗi Roundup được tổ chức trên bugs.python.org.[136] Sự phát triển ban đầu chỉ xảy ra trên một kho mã nguồn tự làm chủ chạy Mercurial cho đến khi Python di chuyển mã nguồn sang Github vào tháng Một năm 2017.[137]

Các bản phát hành công khai của CPython được chia thành ba loại, được phân biệt theo phần nào của số phiên bản được tăng lên:

Phiên bản không tương thích ngược: các mã nhiều khả năng sẽ không hoạt động được và cần phải được chuyển mã thủ công. Phần đầu tiên của số phiên bản được tăng lên. Các bản này ít khi được phát hành: phiên bản 3.0 đã được phát hành 8 năm trước bản 2.0. Theo ông Guido van Rossum, phiên bản 4.0 có lẽ sẽ không bao giờ được phát hành.[138]
Bản phát hành lớn hay bản phát hành "tính năng": tương thích phần lớn với các phiên bản trước đó nhưng có thêm những tính năng mới. Phần thứ hai của số phiên bản được tăng lên. Bắt đầu từ Python 3.8, các bản phát hành được thông báo là sẽ xảy ra hằng năm.[139][140] Mỗi phiên bản lớn sẽ được hỗ trợ bằng sửa lỗi trong vòng vài năm sau khi nó được phát hành.[141]
Phiên bản sửa lỗi: không có tính năng mới, xảy ra mỗi ba tháng và được phát hành khi số lượng lỗi được sửa ngược dòng đủ lớn kể từ bản phát hành cuối. Các lỗ hổng cũng sẽ được vá trong những phiên bản này. Phần thứ ba và phần cuối cùng của số phiên bản được tăng lên.
Nhiều phiên bản alpha, beta và phiên bản ứng cử cũng được phát hành để xem trước và kiểm thử trước bản phát hành cuối cùng. Mặc dù có một lịch trình sơ bộ cho mỗi bản phát hành, chúng thường được lùi lại nếu mã vẫn chưa sẵn sàng. Đội ngũ phát triển Python giám sát tình trạng của mã bằng các chạy tập kiểm thử đơn vị lớn trong quá trình phát triển.[142]

Hội thảo học thuật lớn nhất của Python là PyCon. Ngoài ra, cũng có các chương trình hướng dẫn Python đặc biệt khác, chẳng hạn như Pyladies.

Python 3.10 không khuyên dùng wstr (sẽ bị loại bỏ từ Python 3.12; nghĩa là các phần mở rộng Python[143] cần được chỉnh sửa khi đó),[144] đông thời thêm tính năng khớp theo mẫu (pattern matching) vào ngôn ngữ.[145]

Sự phổ biến
Kể từ năm 2003, Python luôn được xếp vào một trong số mười ngôn ngữ lập trình phổ biến nhất trong Chỉ số Cộng đồng Lập trình TIOBE, nơi mà tính đến tháng 10 năm 2021, Python là ngôn ngữ phổ biến nhất (đứng trước Java và C).[89] Nó từng được chọn là Ngôn ngữ Lập trình của Năm (vì "có đánh giá tăng cao nhất trong năm") vào các năm 2007, 2010, 2018, và 2020 (chỉ Python là được bốn năm[91]).

Một nghiên cứu thức nghiệm chỉ ra rằng các ngôn ngữ kịch bản, chẳng hạn như Python, cho năng suất cao hơn so với các ngôn ngữ thông thường, chẳng hạn như C và Java, đối với các vấn đề lập trình liên quan đến thao tác xâu và tìm kiếm trong từ điển, đồng thời quả quyết rằng sự tiêu tốn bộ nhớ thường "tốt hơn Java và không quá tệ hơn so với C hay C++".[146]

Các tổ chức lớn sử dụng Python gồm có Wikipedia, Google,[147] Yahoo!,[148] CERN, NASA, Facebook,[149] Amazon, Instagram,[150] Spotify[151] và các tổ chức nhỏ hơn như ILM and ITA. Trang mạng tin tức xã hội Reddit cũng được viết phần lớn bằng Python.[152]

Sử dụng
Bài chi tiết: Danh sách phần mềm Python

Được vận hành bởi Python
Python có thể đóng vài trò như là một ngôn ngữ kịch bản cho ứng dụng web, chẳng hạn như thông qua mod wsgi đối với máy chủ web Apache.[153] Với Giao diện Cổng vào Máy chủ Web, một API chuẩn đã và đang dần phát triển để tạo điều kiện cho các ứng dụng này. Các bộ khung web như Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle và Zope hỗ trợ các nhà phát triển trong khâu thiết kế và bảo trì các ứng dụng phức tạp. Pyjs và IronPython có thể được dùng để phát triển phía khách của các ứng dụng dựa trên Ajax. SQLAlchemy có thể được dùng để ánh xạ dữ liệu sang một cơ sở dữ liệu quan hệ. Twisted là một bộ khung dành cho việc giao tiếp giữa các máy tính và được sử dụng bởi Dropbox chẳng hạn.

Các thư viện như NumPy, SciPy và Matplotlib cho phép sử dụng một cách có hiệu quả Python trong tính toán khoa học,[154][155] với các thư viện chuyên ngành chẳng hạn như Biopython và Astropy cung cấp các chức năng miền cụ thể. SageMath là một hệ thống đại số máy tính với một giao diện vở lập trình được trong Python: thư viện của nó trải dài trên nhiều lĩnh vực của toán học, bao gồm đại số, toán tổ hợp, giải tích số, lý thuyết số và vi tích phân.[156] OpenCV có gán kết Python với một tập hợp các tính năng phong phú về thị giác máy tính và xử lý ảnh.[157]

Python thường được sử dụng trong các dự án trí tuệ nhân tạo và học máy với sự giúp đỡ của các thư viện như TensorFlow, Keras, Pytorch và Scikit-learn.[158][159][160][161] Vì là một ngôn ngữ kịch bản với kiến trúc mô đun, cú pháp đơn giản và các công cụ xử lý văn bản phong phú, Python cũng thường được sử dụng trong xử lý ngôn ngữ tự nhiên.

Python có thể được sử dụng để phát triển các giao diện người dùng đồ hoạ (GUI) bằng cách sử dụng các thư viện như Tkinter[162][163], hay để tạo ra trò chơi thông qua các thư viện chẳng hạn như Pygame, một thư viện làm trò chơi 2D.

Python đã được nhúng thành công trong nhiều sản phẩm phần mềm như là một ngôn ngữ kịch bản, bao gồm trong phần mềm phương pháp phần tử hữu hạn chẳng hạn như Abaqus, một trình dựng mô hình tham số 3D giống như FreeCAD, trong các gói hoạt hình 3D chẳng hạn như 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, Modo, MotionBuilder, Softimage, trong trình tổng hợp hiệu ứng trực quan Nuke, trong các chương trình sửa ảnh 2D như GIMP,[164] Inkscape, Scribus và Paint Shop Pro, và trong các chương trình kí hiệu âm nhạc như trình soạn nhạc và Capella. GNU Debugger sử dụng Python như là một trình in đẹp để thể hiện các cấu trúc phức tạp chẳng hạn như các kiểu chứa (container) trong C++. Esri quảng bá Python là lựa chọn tốt nhất để viết tập lệnh trong ArcGIS. Nó cũng được sử dụng trong một số trò chơi video, và được chọn làm một trong ba ngôn ngữ lập trình có sẵn đầu tiên trong Google App Engine, với hai ngôn ngữ còn lại là Java và Go.

Nhiều hệ điều hành có chứa Python như là một thành phần tiêu chuẩn. Nó đi kèm với hầu hết các bản phân phối Linux,[165] AmigaOS 4 (sử dụng Python 2.7), FreeBSD (dưới dạng gói), NetBSD, OpenBSD (dưới dạng gói) và macOS và có thể được dùng từ dòng lệnh (tức terminal – đầu cuối). Nhiều bản phân phối Linux sử dụng các trình cài đặt được viết bằng Python: Ubuntu sử dụng trình cài đặt Ubiquity, trong khi Red Hat Linux và Fedora sử dụng trình cài đặt Anaconda. Gentoo Linux sử dụng Python trong hệ thống quản lý gói của nó là Portage.

Python còn được sử dụng rộng rãi trong ngành công nghiệp an toàn thông tin, bao gồm phát triển khai thác.

LibreOffice có nhúng Python và dự định sẽ thay thế Java bằng Python. Python Scripting Provider là một tính năng lõi của nó[166] kể từ phiên bản 4.0 phát hành mùng 7 tháng Hai năm 2013.

Ảnh hưởng ngôn ngữ
Thiết kế và triết lý của Python đã ảnh hưởng đến nhiều ngôn ngữ lập trình khác:

CoffeeScript – một ngôn ngữ lập trình biên dịch chéo sang JavaScript – có cú pháp lấy cảm hứng từ Python.
ECMAScript/JavaScript mượn biến lặp (iterator) và bộ sinh từ Python.
GDScript, một ngôn ngữ kịch bản rất giống Python, được tích hợp vào bộ máy trò chơi Godot.[167]
Go được thiết kế nhằm "tăng tốc độ làm việc trong một ngôn ngữ kiểu động giống như Python" và cả hai có cùng cú pháp cắt lát mảng.
Groovy được tạo ra với mong muốn đem triết lí thiết kế của Python vào Java.[168]
Julia được thiết kế để "có thể sử dụng được vào các mục đích chung giống như Python vậy".[169]
Mojo, một tập cha của Python, cố gắng tương thích với cú pháp và hệ sinh thái của Python[170], và có thể chạy nhanh hơn Python lên đến 35.000 lần.[171]
Nim cũng có thụt lề và cú pháp tương đồng.[172]
Matsumoto Yukihiro, tác giả của ngôn ngữ Ruby từng cho biết: "Tôi muốn một ngôn ngữ kịch bản mạnh mẽ hơn Perl và hướng đối tượng nhiều hơn Python. Đó là lí do tôi quyết định thiết kế ngôn ngữ cho riêng mình."[173]
Xem thêm
icon	Cổng thông tin Lập trình máy tính
	Cổng thông tin Phần mềm tự do và nguồn mở
Zen of Python
pip (trình quản lý gói)
Tham khảo
^ “Python 3.12.3 and 3.13.0a6 released” (bằng tiếng Anh). 9 tháng 4 2024. Truy cập 9 tháng 4 2024. Kiểm tra giá trị ngày tháng trong: |access-date= và |date= (trợ giúp)
^ “PEP 483 -- The Theory of Type Hints”. Python.org.
^ Phần mở rộng tệp .pyo đã bị loại bỏ trong Python 3.5. Xem PEP 0488
^ Holth, Moore (ngày 30 tháng 3 năm 2014). “PEP 0441 -- Improving Python ZIP Application Support”. Truy cập ngày 12 tháng 11 năm 2015.
^ “Starlark Language”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 25 tháng 5 năm 2019.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Truy cập ngày 22 tháng 3 năm 2007.
^ Kuchling, Andrew M. (ngày 22 tháng 12 năm 2006). “Interview with Guido van Rossum (July 1998)”. amk.ca. Bản gốc lưu trữ ngày 1 tháng 5 năm 2007. Truy cập ngày 12 tháng 3 năm 2012.
^ van Rossum, Guido (1993). “An Introduction to Python for UNIX/C Programmers”. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.
^ a b “Classes”. The Python Tutorial. Python Software Foundation. Truy cập ngày 20 tháng 2 năm 2012. It is a mixture of the class mechanisms found in C++ and Modula-3
^ Lundh, Fredrik. “Call By Object”. effbot.org. Bản gốc lưu trữ ngày 23 tháng 11 năm 2019. Truy cập ngày 21 tháng 11 năm 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.
^ Simionato, Michele. “The Python 2.3 Method Resolution Order”. Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers
^ Kuchling, A. M. “Functional Programming HOWTO”. Python v2.7.2 documentation. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (ngày 18 tháng 5 năm 2001). “PEP 255 – Simple Generators”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (ngày 2 tháng 9 năm 2004). “PEP 318 – Decorators for Functions and Methods”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 24 tháng 2 năm 2012.
^ “More Control Flow Tools”. Python 3 documentation. Python Software Foundation. Truy cập ngày 24 tháng 7 năm 2015.
^ “CoffeeScript borrows chained comparisons from Python”.
^ “Genie Language - A brief guide”. Truy cập ngày 28 tháng 12 năm 2015.
^ “Perl and Python influences in JavaScript”. www.2ality.com. ngày 24 tháng 2 năm 2013. Truy cập ngày 15 tháng 5 năm 2015.
^ Rauschmayer, Axel. “Chapter 3: The Nature of JavaScript; Influences”. O'Reilly, Speaking JavaScript. Bản gốc lưu trữ ngày 26 tháng 12 năm 2018. Truy cập ngày 15 tháng 5 năm 2015.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ Ring Team (ngày 4 tháng 12 năm 2017). “Ring and other languages”. ring-lang.net. ring-lang.
^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. tr. 3. ISBN 978-1-59059-881-8.
^ Lattner, Chris (ngày 3 tháng 6 năm 2014). “Chris Lattner's Homepage”. Chris Lattner. Truy cập ngày 3 tháng 6 năm 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.
^ Bài phỏng vấn Guido van Rossum [1].
^ “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal”. www.linuxjournal.com (bằng tiếng Anh).
^ “Python boss Guido van Rossum steps down after 30 years | TheINQUIRER”. theinquirer.net (bằng tiếng Anh). Bản gốc lưu trữ ngày 19 tháng 2 năm 2019. Truy cập ngày 25 tháng 8 năm 2018.
^ “About the Python Software Foundation”. Truy cập 28 tháng 8 năm 2019.
^ “Stack Overflow Developer Survey 2020”. Stack Overflow. Lưu trữ bản gốc ngày 2 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “The State of Developer Ecosystem in 2020 Infographic”. JetBrains: Developer Tools for Professionals and Teams (bằng tiếng Anh). Lưu trữ bản gốc ngày 1 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “index | TIOBE - The Software Quality Company”. www.tiobe.com. Lưu trữ bản gốc ngày 25 tháng 2 năm 2018. Truy cập ngày 2 tháng 2 năm 2021. Python has won the TIOBE programming language of the year award! This is for the fourth time in the history, which is a record! The title is awarded to the programming language that has gained most popularity in one year.
^ “PYPL PopularitY of Programming Language index”. pypl.github.io (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 3 năm 2017. Truy cập ngày 26 tháng 3 năm 2021.
^ a b Venners, Bill (13 tháng 1 năm 2003). “The Making of Python”. Artima Developer. Artima. Lưu trữ bản gốc ngày 1 tháng 9 năm 2016. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (29 tháng 8 năm 2000). “SETL (was: Lukewarm about range literals)”. Python-Dev (Danh sách thư). Lưu trữ bản gốc ngày 14 tháng 7 năm 2018. Truy cập ngày 13 tháng 3 năm 2011.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (20 tháng 1 năm 2009). “A Brief Timeline of Python”. The History of Python. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 20 tháng 1 năm 2009.
^ Fairchild, Carlie (12 tháng 7 năm 2018). “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life”. Linux Journal. Lưu trữ bản gốc ngày 13 tháng 7 năm 2018. Truy cập ngày 13 tháng 7 năm 2018.
^ “PEP 8100”. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 4 tháng 5 năm 2019.
^ “PEP 13 -- Python Language Governance”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 5 năm 2021. Truy cập ngày 25 tháng 8 năm 2021.
^ Kuchling, A. M.; Zadka, Moshe (16 tháng 10 năm 2000). “What's New in Python 2.0”. Python Software Foundation. Lưu trữ bản gốc ngày 23 tháng 10 năm 2012. Truy cập ngày 11 tháng 2 năm 2012.
^ “Python 3.0 Release”. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 8 tháng 7 năm 2009.
^ van Rossum, Guido (5 tháng 4 năm 2006). “PEP 3000 – Python 3000”. Python Enhancement Proposals. Python Software Foundation. Bản gốc lưu trữ ngày 3 tháng 3 năm 2016. Truy cập ngày 27 tháng 6 năm 2009.
^ “2to3 – Automated Python 2 to 3 code translation”. docs.python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 2 tháng 2 năm 2021.
^ Langa, Łukasz (19 tháng 2 năm 2021). “Python Insider: Python 3.9.2 and 3.8.8 are now available”. Python Insider. Lưu trữ bản gốc ngày 25 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “Red Hat Customer Portal - Access to 24x7 support and knowledge”. access.redhat.com. Lưu trữ bản gốc ngày 6 tháng 3 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-3177”. cve.mitre.org. Lưu trữ bản gốc ngày 27 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-23336”. cve.mitre.org. Lưu trữ bản gốc ngày 24 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ Langa, Łukasz (24 tháng 3 năm 2022). “Python Insider: Python 3.10.4 and 3.9.12 are now available out of schedule”. Python Insider. Lưu trữ bản gốc ngày 21 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (16 tháng 3 năm 2022). “Python Insider: Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (17 tháng 5 năm 2022). “Python Insider: Python 3.9.13 is now available”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 5 năm 2022. Truy cập ngày 21 tháng 5 năm 2022.
^ “Python Insider: Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available”. pythoninsider.blogspot.com. 7 tháng 9 năm 2022. Lưu trữ bản gốc ngày 13 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “CVE - CVE-2020-10735”. cve.mitre.org. Lưu trữ bản gốc ngày 20 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “What's New In Python 3.12”. Python documentation. Truy cập 26 tháng 11 năm 2023.
^ The Cain Gang Ltd. “Python Metaclasses: Who? Why? When?” (PDF). Bản gốc (PDF) lưu trữ ngày 30 tháng 5 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “3.3. Special method names”. The Python Language Reference. Python Software Foundation. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “PyDBC: method preconditions, method postconditions and class invariants for Python”. Lưu trữ bản gốc ngày 23 tháng 11 năm 2019. Truy cập ngày 24 tháng 9 năm 2011.
^ “Contracts for Python”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “PyDatalog”. Lưu trữ bản gốc ngày 13 tháng 6 năm 2020. Truy cập ngày 22 tháng 7 năm 2012.
^ “Extending and Embedding the Python Interpreter: Reference Counts” (bằng tiếng Anh). Docs.python.org. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 5 tháng 6 năm 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.
^ a b Hettinger, Raymond (30 tháng 1 năm 2002). “PEP 289 – Generator Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “6.5 itertools – Functions creating iterators for efficient looping”. Docs.python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 22 tháng 11 năm 2016.
^ “PEP 206 -- Python Advanced Library”. Python.org.
^ Peters, Tim (19 tháng 8 năm 2004). “PEP 20 – The Zen of Python”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 26 tháng 12 năm 2018. Truy cập ngày 24 tháng 11 năm 2008.
^ a b “Python Culture”. ebeab. 21 tháng 1 năm 2014. Bản gốc lưu trữ ngày 30 tháng 1 năm 2014.
^ “General Python FAQ”. Python v2.7.3 documentation. Docs.python.org. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 4 tháng 6 năm 2020.
^ “15 Ways Python Is a Powerful Force on the Web”. Bản gốc lưu trữ ngày 11 tháng 5 năm 2019. Truy cập ngày 3 tháng 7 năm 2018.
^ “8.18. pprint — Data pretty printer — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 22 tháng 1 năm 2021. Truy cập ngày 4 tháng 6 năm 2020.
^ Clark, Robert (26 tháng 4 năm 2019). “How to be Pythonic and why you should care”. Medium. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “Code Style — The Hitchhiker's Guide to Python”. docs.python-guide.org. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ Goodger, David. “Code Like a Pythonista: Idiomatic Python”. Bản gốc lưu trữ ngày 27 tháng 5 năm 2014. Truy cập ngày 24 tháng 3 năm 2009.
^ “How to think like a Pythonista”. Bản gốc lưu trữ ngày 23 tháng 3 năm 2018. Truy cập ngày 24 tháng 3 năm 2009.
^ “Is Python a good language for beginning programmers?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 21 tháng 3 năm 2007.
^ Guttag, John V. (12 tháng 8 năm 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.
^ a b “PEP 8 -- Style Guide for Python Code”. Python.org. Lưu trữ bản gốc ngày 17 tháng 4 năm 2019. Truy cập ngày 26 tháng 3 năm 2019.
^ “Highlights: Python 2.5”. Python.org. Lưu trữ bản gốc ngày 4 tháng 8 năm 2019. Truy cập ngày 20 tháng 3 năm 2018.
^ “division”. python.org. Lưu trữ bản gốc ngày 20 tháng 7 năm 2006. Truy cập ngày 30 tháng 7 năm 2014.
^ “PEP 0465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “Python 3.5.1 Release and Changelog”. python.org. Lưu trữ bản gốc ngày 14 tháng 5 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “What's New in Python 3.8”. Lưu trữ bản gốc ngày 8 tháng 6 năm 2020. Truy cập ngày 14 tháng 10 năm 2019.
^ “Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ “Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ van Rossum, Guido; Hettinger, Raymond (7 tháng 2 năm 2003). “PEP 308 – Conditional Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 13 tháng 3 năm 2016. Truy cập ngày 13 tháng 7 năm 2011.
^ “4. Built-in Types — Python 3.6.3rc1 documentation”. python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 1 tháng 10 năm 2017.
^ “5.3. Tuples and Sequences — Python 3.7.1rc2 documentation”. python.org. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 17 tháng 10 năm 2018.
^ a b “PEP 498 -- Literal String Interpolation”. python.org. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 8 tháng 3 năm 2017.
^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code (bằng tiếng Anh). No Starch Press. tr. 322. ISBN 978-1-59327-966-0. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 7 tháng 7 năm 2021.
^ “The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1”. Bản gốc lưu trữ ngày 26 tháng 10 năm 2012. Truy cập ngày 12 tháng 1 năm 2011.
^ “Type hinting for Python”. LWN.net. 24 tháng 12 năm 2014. Lưu trữ bản gốc ngày 20 tháng 6 năm 2019. Truy cập ngày 5 tháng 5 năm 2015.
^ “mypy - Optional Static Typing for Python”. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 28 tháng 1 năm 2017.
^ a b “15. Floating Point Arithmetic: Issues and Limitations — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 6 tháng 6 năm 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".
^ Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 237 – Unifying Long Integers and Integers”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ a b “Built-in Types”. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 3 tháng 10 năm 2019.
^ “PEP 465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 29 tháng 5 năm 2020. Truy cập ngày 3 tháng 7 năm 2018.
^ a b Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 238 – Changing the Division Operator”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 23 tháng 10 năm 2013.
^ “Why Python's Integer Division Floors”. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 25 tháng 8 năm 2010.
^ “round”, The Python standard library, release 3.2, §2: Built-in functions, lưu trữ bản gốc ngày 25 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ “round”, The Python standard library, release 2.7, §2: Built-in functions, lưu trữ bản gốc ngày 27 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ Beazley, David M. (2009). Python Essential Reference (ấn bản 4). tr. 66.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (ấn bản 2). tr. 206.
^ Batista, Facundo. “PEP 0327 -- Decimal Data Type”. Python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 26 tháng 9 năm 2015.
^ “What's New in Python 2.6 — Python v2.6.9 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 12 năm 2019. Truy cập ngày 26 tháng 9 năm 2015.
^ “10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke”. www.stat.washington.edu. Bản gốc lưu trữ ngày 31 tháng 5 năm 2020. Truy cập ngày 3 tháng 2 năm 2019.
^ Shell, Scott (17 tháng 6 năm 2014). “An introduction to Python for scientific computing” (PDF). Lưu trữ (PDF) bản gốc ngày 4 tháng 2 năm 2019. Truy cập ngày 3 tháng 2 năm 2019.
^ Piotrowski, Przemyslaw (tháng 7 năm 2006). “Build a Rapid Web Development Environment for Python Server Pages and Oracle”. Oracle Technology Network. Oracle. Lưu trữ bản gốc ngày 2 tháng 4 năm 2019. Truy cập ngày 12 tháng 3 năm 2012.
^ Batista, Facundo (17 tháng 10 năm 2003). “PEP 327 – Decimal Data Type”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 24 tháng 11 năm 2008.
^ Eby, Phillip J. (7 tháng 12 năm 2003). “PEP 333 – Python Web Server Gateway Interface v1.0”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “Modulecounts”. Modulecounts. 28 tháng 9 năm 2021. Lưu trữ bản gốc ngày 24 tháng 9 năm 2021. Truy cập ngày 28 tháng 9 năm 2021.
^ Enthought, Canopy. “Canopy”. www.enthought.com. Bản gốc lưu trữ ngày 15 tháng 7 năm 2017. Truy cập ngày 20 tháng 8 năm 2016.
^ “Mailman 3 Why aren't we allowing the use of C11? - Python-Dev - python.org”. mail.python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Issue 35473: Intel compiler (icc) does not fully support C11 Features, including atomics - Python tracker”. bugs.python.org. Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “4. Building C and C++ Extensions — Python 3.9.2 documentation”. docs.python.org. Lưu trữ bản gốc ngày 3 tháng 3 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Changelog — Python 3.9.0 documentation”. docs.python.org. Lưu trữ bản gốc ngày 7 tháng 2 năm 2021. Truy cập ngày 8 tháng 2 năm 2021.
^ “Download Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 8 tháng 12 năm 2020. Truy cập ngày 13 tháng 12 năm 2020.
^ “history [vmspython]”. www.vmspython.org. Lưu trữ bản gốc ngày 2 tháng 12 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “Download Python for Other Platforms”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 11 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “PyPy compatibility”. Pypy.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 3 tháng 12 năm 2012.
^ “speed comparison between CPython and Pypy”. Speed.pypy.org. Lưu trữ bản gốc ngày 10 tháng 5 năm 2021. Truy cập ngày 3 tháng 12 năm 2012.
^ “Application-level Stackless features — PyPy 2.0.2 documentation”. Doc.pypy.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 17 tháng 7 năm 2013.
^ “Python-for-EV3”. LEGO Education (bằng tiếng Anh). Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 17 tháng 4 năm 2019.
^ Yegulalp, Serdar (29 tháng 10 năm 2020). “Pyston returns from the dead to speed Python”. InfoWorld. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 26 tháng 1 năm 2021.
^ “cinder: Instagram's performance oriented fork of CPython” (bằng tiếng Anh). Lưu trữ bản gốc ngày 4 tháng 5 năm 2021. Truy cập ngày 4 tháng 5 năm 2021.
^ “Brython”. brython.info. Lưu trữ bản gốc ngày 3 tháng 8 năm 2018. Truy cập ngày 21 tháng 1 năm 2021.
^ “Transcrypt – Python in the browser”. transcrypt.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 8 năm 2018. Truy cập ngày 22 tháng 12 năm 2020.
^ “Transcrypt: Anatomy of a Python to JavaScript Compiler”. InfoQ. Lưu trữ bản gốc ngày 5 tháng 12 năm 2020. Truy cập ngày 20 tháng 1 năm 2021.
^ “Codon: Differences with Python”. Lưu trữ bản gốc ngày 25 tháng 5 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ Lawson, Loraine (14 tháng 3 năm 2023). “MIT-Created Compiler Speeds up Python Code”. The New Stack (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 4 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ “Nuitka Home | Nuitka Home”. nuitka.net (bằng tiếng Anh). Lưu trữ bản gốc ngày 30 tháng 5 năm 2020. Truy cập ngày 18 tháng 8 năm 2017.
^ Borderies, Olivier (24 tháng 1 năm 2019). “Pythran: Python at C++ speed !”. Medium. Lưu trữ bản gốc ngày 25 tháng 3 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Pythran — Pythran 0.9.5 documentation”. pythran.readthedocs.io. Lưu trữ bản gốc ngày 19 tháng 2 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Archived copy” (PDF). Lưu trữ (PDF) bản gốc ngày 18 tháng 4 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “google/grumpy”. 10 tháng 4 năm 2020. Lưu trữ bản gốc ngày 15 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020 – qua GitHub.
^ “Projects”. opensource.google. Lưu trữ bản gốc ngày 24 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ Francisco, Thomas Claburn in San. “Google's Grumpy code makes Python Go”. www.theregister.com. Lưu trữ bản gốc ngày 7 tháng 3 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “IronPython.net /”. ironpython.net. Lưu trữ bản gốc ngày 17 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ “Jython FAQ”. www.jython.org. Lưu trữ bản gốc ngày 22 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 tháng 6 năm 2000). “PEP 1 – PEP Purpose and Guidelines”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 19 tháng 4 năm 2011.
^ Cannon, Brett. “Guido, Some Guys, and a Mailing List: How Python is Developed”. python.org. Python Software Foundation. Bản gốc lưu trữ ngày 1 tháng 6 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Developer's Guide — Python Developer's Guide”. devguide.python.org. Lưu trữ bản gốc ngày 9 tháng 11 năm 2020. Truy cập ngày 17 tháng 12 năm 2019.
^ Hughes, Owen (24 tháng 5 năm 2021). “Programming languages: Why Python 4.0 might never arrive, according to its creator”. TechRepublic (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 7 năm 2022. Truy cập ngày 16 tháng 5 năm 2022.
^ “PEP 602 -- Annual Release Cycle for Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 6 tháng 11 năm 2019.
^ “Changing the Python release cadence [LWN.net]”. lwn.net. Lưu trữ bản gốc ngày 6 tháng 11 năm 2019. Truy cập ngày 6 tháng 11 năm 2019.
^ Norwitz, Neal (8 tháng 4 năm 2002). “[Python-Dev] Release Schedules (was Stability & change)”. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Buildbot”. Python Developer's Guide. Python Software Foundation. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “1. Extending Python with C or C++ — Python 3.9.1 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 6 năm 2020. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 623 -- Remove wstr from Unicode”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 3 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 634 -- Structural Pattern Matching: Specification”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 5 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ Prechelt, Lutz (14 tháng 3 năm 2000). “An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl” (PDF). Lưu trữ (PDF) bản gốc ngày 3 tháng 1 năm 2020. Truy cập ngày 30 tháng 8 năm 2013.
^ “Quotes about Python”. Python Software Foundation. Lưu trữ bản gốc ngày 3 tháng 6 năm 2020. Truy cập ngày 8 tháng 1 năm 2012.
^ “Organizations Using Python”. Python Software Foundation. Lưu trữ bản gốc ngày 21 tháng 8 năm 2018. Truy cập ngày 15 tháng 1 năm 2009.
^ “Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers”. Facebook for Developers (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 19 tháng 6 năm 2018.
^ “What Powers Instagram: Hundreds of Instances, Dozens of Technologies”. Instagram Engineering. 11 tháng 12 năm 2016. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 27 tháng 5 năm 2019.
^ “How we use Python at Spotify”. Spotify Labs (bằng tiếng Anh). 20 tháng 3 năm 2013. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 25 tháng 7 năm 2018.
^ GitHub - reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, lưu trữ bản gốc ngày 1 tháng 6 năm 2020, truy cập ngày 20 tháng 3 năm 2019
^ “Usage statistics and market share of Python for websites”. 2012. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 18 tháng 12 năm 2012.
^ Oliphant, Travis (2007). “Python for Scientific Computing”. Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 10 tháng 4 năm 2015.
^ Millman, K. Jarrod; Aivazis, Michael (2011). “Python for Scientists and Engineers”. Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 7 tháng 7 năm 2014.
^ Science education with SageMath, Innovative Computing in Science Education, Bản gốc lưu trữ ngày 15 tháng 6 năm 2020, truy cập ngày 22 tháng 4 năm 2019
^ “OpenCV: OpenCV-Python Tutorials”. docs.opencv.org. Lưu trữ bản gốc ngày 23 tháng 9 năm 2020. Truy cập ngày 14 tháng 9 năm 2020.
^ Dean, Jeff; Monga, Rajat; và đồng nghiệp (9 tháng 11 năm 2015). “TensorFlow: Large-scale machine learning on heterogeneous systems” (PDF). TensorFlow.org. Google Research. Lưu trữ (PDF) bản gốc ngày 20 tháng 11 năm 2015. Truy cập ngày 10 tháng 11 năm 2015.
^ Piatetsky, Gregory. “Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis”. KDnuggets. KDnuggets. Lưu trữ bản gốc ngày 15 tháng 11 năm 2019. Truy cập ngày 30 tháng 5 năm 2018.
^ “Who is using scikit-learn? — scikit-learn 0.20.1 documentation”. scikit-learn.org. Lưu trữ bản gốc ngày 6 tháng 5 năm 2020. Truy cập ngày 30 tháng 11 năm 2018.
^ Jouppi, Norm. “Google supercharges machine learning tasks with TPU custom chip”. Google Cloud Platform Blog. Lưu trữ bản gốc ngày 18 tháng 5 năm 2016. Truy cập ngày 19 tháng 5 năm 2016.
^ “Tkinter — Python interface to TCL/Tk”. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 9 tháng 6 năm 2023.
^ “Python Tkinter Tutorial”. 3 tháng 6 năm 2020. Lưu trữ bản gốc ngày 9 tháng 6 năm 2023. Truy cập ngày 9 tháng 6 năm 2023.
^ “Installers for GIMP for Windows - Frequently Asked Questions”. 26 tháng 7 năm 2013. Bản gốc lưu trữ ngày 17 tháng 7 năm 2013. Truy cập ngày 26 tháng 7 năm 2013.
^ “Python Setup and Usage”. Python Software Foundation. Lưu trữ bản gốc ngày 17 tháng 6 năm 2020. Truy cập ngày 10 tháng 1 năm 2020.
^ “4.0 New Features and Fixes”. LibreOffice.org. The Document Foundation. 2013. Lưu trữ bản gốc ngày 9 tháng 2 năm 2014. Truy cập ngày 25 tháng 2 năm 2013.
^ “Frequently asked questions”. Godot Engine documentation. Lưu trữ bản gốc ngày 28 tháng 4 năm 2021. Truy cập ngày 10 tháng 5 năm 2021.
^ Strachan, James (29 tháng 8 năm 2003). “Groovy – the birth of a new dynamic language for the Java platform”. Bản gốc lưu trữ ngày 5 tháng 4 năm 2007. Truy cập ngày 11 tháng 6 năm 2007.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Lưu trữ bản gốc ngày 2 tháng 5 năm 2020. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ “Modular Docs - Why Mojo🔥”. docs.modular.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.
^ Spencer, Michael (4 tháng 5 năm 2023). “What is Mojo Programming Language?”. datasciencelearningcenter.substack.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023.
^ Yegulalp, Serdar (16 tháng 1 năm 2017). “Nim language draws from best of Python, Rust, Go, and Lisp”. InfoWorld. Lưu trữ bản gốc ngày 13 tháng 10 năm 2018. Truy cập ngày 7 tháng 6 năm 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).
^ “An Interview with the Creator of Ruby”. Linuxdevcenter.com. Lưu trữ bản gốc ngày 28 tháng 4 năm 2018. Truy cập ngày 3 tháng 12 năm 2012.
Liên kết ngoài
Tìm hiểu thêm về
Python
tại các dự án liên quan
Tìm kiếm Commons	Tập tin phương tiện từ Commons
Tìm kiếm Wikiquote	Danh ngôn từ Wikiquote
Tìm kiếm Wikibooks	Tủ sách giáo khoa từ Wikibooks
Tìm kiếm Wikiversity	Tài nguyên học tập từ Wikiversity
Tìm kiếm Wikidata	Dữ liệu từ Wikidata
Trang chủ chính thức
Python Wiki
Tài liệu Python
Python Cheese Shop – Kho đựng phần mềm viết bằng Python; trước đây gọi là Python Package Index (PyPI)
xts
Ngôn ngữ lập trình
xts
Phần mềm tự do nguồn mở
Tiêu đề chuẩn Sửa dữ liệu tại Wikidata	
BNF: cb13560465c (data)GND: 4434275-5LCCN: sh96008834NKC: ph170668SUDOC: 051626225
Thể loại: Ngôn ngữ lập trình hướng đối tượngPython (ngôn ngữ lập trình)Phần mềm tự doNgôn ngữ lập trình giáo dụcPhát minh của Hà LanPhần mềm đa nền tảngNgôn ngữ lập trình đa mẫu hìnhNgôn ngữ lập trìnhHọ ngôn ngữ lập trình SmalltalkNgôn ngữ lập trình đồng thờiPhần mềm tự do đa nền tảngNgôn ngữ lập trình được nhập độngNgôn ngữ lập trình bậc caoNgôn ngữ lập trình đối sánh mẫu
Trang này được sửa đổi lần cuối vào ngày 28 tháng 12 năm 2023, 15:26.
Văn bản được phát hành theo Giấy phép Creative Commons Ghi công–Chia sẻ tương tự; có thể áp dụng điều khoản bổ sung. Với việc sử dụng trang web này, bạn chấp nhận Điều khoản Sử dụng và Quy định quyền riêng tư. Wikipedia® là thương hiệu đã đăng ký của Wikimedia Foundation, Inc., một tổ chức phi lợi nhuận.
Quy định quyền riêng tưGiới thiệu WikipediaLời phủ nhậnBộ Quy tắc Ứng xử ChungLập trình viênThống kêTuyên bố về cookiePhiên bản di độngWikimedia FoundationPowered by MediaWiki
Chuyển đổi chiều rộng nội dung giới hạn

Trình đơn chính

WikipediaBách khoa toàn thư mở
Tìm kiếm trên Wikipedia
Tìm kiếm
Tạo tài khoản
Đăng nhập

Công cụ cá nhân
Tính năng Tạo tài khoản · Hướng dẫn người mới · Quy định · Viết bài mới · Chỗ thử · Câu thường hỏi · Sách hướng dẫn · Dịch bài · Thêm chú thích · Thảo luận · Liên hệ quản lý
Tiêu chuẩn bài viết Đủ độ nổi bật, văn phong trung lập và có nguồn đáng tin cậy · Không spam quảng cáo · Không vi phạm bản quyền · Cẩm nang biên soạn
Đóng (mở lại bằng cách xóa cookie dismissASN1 trong trình duyệt)
Nội dung ẩn
Đầu
Lịch sử
Triết lý thiết kế và tính năng
Cú pháp
Hiện/ẩn mục Cú pháp
Thư viện
Môi trường phát triển
Các bản triển khai
Hiện/ẩn mục Các bản triển khai
Phát triển
Sự phổ biến
Sử dụng
Ảnh hưởng ngôn ngữ
Xem thêm
Tham khảo
Liên kết ngoài
Python (ngôn ngữ lập trình)

Bài viết
Thảo luận
Đọc
Sửa đổi
Sửa mã nguồn
Xem lịch sử

Công cụ
Bách khoa toàn thư mở Wikipedia
Python

Mẫu hình	Ngôn ngữ lập trình hướng đối tượng, lập trình câu lệnh, lập trình hàm, lập trình thủ tục, lập trình phản xạ
Thiết kế bởi	Guido van Rossum
Nhà phát triển	Python Software Foundation
Xuất hiện lần đầu	1991; 33 năm trước
Phiên bản ổn định	
3.12.3[1] Sửa đổi tại Wikidata / 9 tháng 4 2024
Kiểm tra kiểu	Vịt, động, mạnh
từ phiên bản 3.5:

dần dần[2]
Giấy phép	Giấy phép Python Software Foundation
Phần mở rộng tên tập tin	.py,.pyc,.pyd,.pyo (trước 3.5),[3] .pyw,.pyz (từ 3.5)[4]
Trang mạng	www.python.org
Các bản triển khai lớn
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Phương ngữ
Cython, RPython, Starlark[5]
Ảnh hưởng từ
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl, Smalltalk
Ảnh hưởng tới
Boo, Cobra, CoffeeScript,[16] D, F#, Falcon, Genie,[17] Go, Apache Groovy, JavaScript,[18][19] Julia,[20] Nim, Ring,[21] Ruby,[22] Swift[23]
Python (phát âm tiếng Anh: /ˈpaɪθɑːn/) là một ngôn ngữ lập trình bậc cao cho các mục đích lập trình đa năng, do Guido van Rossum tạo ra và lần đầu ra mắt vào năm 1991. Python được thiết kế với ưu điểm mạnh là dễ đọc, dễ học và dễ nhớ. Python là ngôn ngữ có hình thức rất sáng sủa, cấu trúc rõ ràng, thuận tiện cho người mới học lập trình và là ngôn ngữ lập trình dễ học; được dùng rộng rãi trong phát triển trí tuệ nhân tạo. Cấu trúc của Python còn cho phép người sử dụng viết mã lệnh với số lần gõ phím tối thiểu.[24] Vào tháng 7 năm 2018, van Rossum đã từ chức lãnh đạo trong cộng đồng ngôn ngữ Python sau 30 năm làm việc.[25][26]

Python hoàn toàn tạo kiểu động và dùng cơ chế cấp phát bộ nhớ tự động; do vậy nó tương tự như Perl, Ruby, Scheme, Smalltalk, và Tcl. Python được phát triển trong một dự án mã mở, do tổ chức phi lợi nhuận Python Software Foundation quản lý.[27]

Ban đầu, Python được phát triển để chạy trên nền Unix. Nhưng rồi theo thời gian, Python dần mở rộng sang mọi hệ điều hành từ MS-DOS đến Mac OS, OS/2, Windows, Linux và các hệ điều hành khác thuộc họ Unix. Mặc dù sự phát triển của Python có sự đóng góp của rất nhiều cá nhân, nhưng Guido van Rossum hiện nay vẫn là tác giả chủ yếu của Python. Ông giữ vai trò chủ chốt trong việc quyết định hướng phát triển của Python.

Python luôn được xếp hạng vào những ngôn ngữ lập trình phổ biến nhất.[28][29][30][31]


Guido van Rossum, nhà sáng lập ngôn ngữ Python.
Lịch sử
Bài chi tiết: Lịch sử Python
Python đã được Guido van Rossum tạo ra vào những năm 1980[32] tại Trung tâm Toán học – Tin học (Centrum Wiskunde & Informatica, CWI) ở Hà Lan như là một ngôn ngữ kế tục ngôn ngữ ABC – một ngôn ngữ được lấy cảm hứng từ SETL,[33] có khả năng xử lí ngoại lệ và giao tiếp với hệ điều hành Amoeba.[34] Nó bắt đầu được triển khai vào tháng 12 năm 1989.[35] Van Rossum đã tự mình gánh vác trách nhiệm cho dự án, với vai trò là nhà phát triển chính, cho đến ngày 12 tháng 7 năm 2018, khi ông thông báo rằng ông sẽ rời bỏ trách nhiệm của ông và cả danh hiệu "Nhà độc tài nhân từ cho cuộc sống" của Python, một danh hiệu mà cộng đồng Python đã trao tặng cho ông vì sự tận tụy lâu dài của ông với vai trò là người ra quyết định chính cho dự án.[36] Vào tháng 1 năm 2019, các nhà phát triển phần lõi Python đã bầu ra một "Hội đồng chèo lái" gồm năm thành viên để dẫn dắt dự án.[37][38]

Python 2.0 được ra mắt vào ngày 16 tháng 10 năm 2000, với nhiều tính năng mới mẻ, bao gồm một bộ dọn rác phát hiện theo chu kỳ và khả năng hỗ trợ Unicode.[39]

Python 3.0 được ra mắt vào ngày mùng 3 tháng 12 năm 2008. Đây là một phiên bản lớn của Python không tương thích ngược hoàn toàn.[40] Nhiều tính năng lớn của nó đã được chuyển mã ngược (backport) về loạt phiên bản Python 2.6.x và 2.7.x.[41] Các bản phát hành của Python 3 có đi kèm với công cụ 2to3, có tác dụng tự động hoá việc dịch mã Python 2 sang Python 3.[42]

Python 3.9.2 và 3.8.8 được xúc tiến[43] vì tất cả các phiên bản trước của Python (bao gồm cả 2.7)[44] gặp một số vấn đề bảo mật, có thể dẫn đến thực thị mã từ xa[45] và "đầu độc" bộ nhớ đệm.[46]

Trong năm 2022, Python 3.10.4 và 3.9.12 được xúc tiến[47] cùng với 3.8.13 và 3.7.13, nguyên nhân là do một vài vấn đề về bảo mật.[48] Khi Python 3.9.13 được phát hành vào tháng Năm năm 2022, loạt phiên bản 3.9 (cùng với loạt 3.8 và 3.7) được thông báo rằng sẽ chỉ nhận được các bản vá bảo mật trong tương lai.[49] Vào ngày 7 tháng Chín năm 2022, bốn bản cập nhật mới được phát hành do có khả năng xảy ra một cuộc tấn công từ chối dịch vụ: 3.10.7, 3.9.14, 3.8.14 và 3.7.14.[50][51]

Tính đến tháng 10 năm 2023, Python 3.12 là bản phát hành ổn định mới nhất. Một số thay đổi đáng chú ý từ bản 3.11 bao gồm các thay đổi về ngôn ngữ và thư viện chuẩn.[52]

Triết lý thiết kế và tính năng
Python là một ngôn ngữ lập trình đa mẫu hình, lập trình hướng đối tượng và lập trình cấu trúc được hỗ trợ hoàn toàn, và nhiều tính năng của nó cũng hỗ trợ lập trình hàm và lập trình hướng khía cạnh (bao gồm siêu lập trình[53] và siêu đối tượng (phương thức thần kỳ)).[54] Các mẫu hình khác cũng được hỗ trợ thông qua các phần mở rộng, bao gồm thiết kế theo hợp đồng[55][56] và lập trình logic.[57]

Python sử dụng kiểu động và một dạng kết hợp giữa đếm tham chiếu và bộ dọn rác kiểm tra theo chu kì để quản lí bộ nhớ.[58] Nó cũng có tính năng phân giải tên động (liên kết muộn), cho phép liên kết các tên biến và phương thức trong quá trình thực thi chương trình.

Thiết kế của Python cung cấp một số tính năng cho lập trình hàm giống như trong ngôn ngữ Lisp. Python có các hàm filter, map và reduce; thông hiểu danh sách (list comprehension), từ điển (dictionary), tập hợp (set), và các biểu thức bộ sinh (generator).[59] Thư viện chuẩn cũng có hai mô đun (itertools và functools) triển khai các công cụ hàm được vay mượn từ Haskell và Standard ML.[60]

Triết lý căn bản của ngôn ngữ Python được trình bày trong tài liệu The Zen of Python (PEP 20), có dạng thơ Haiku, tóm gọn như sau:

Đẹp đẽ tốt hơn xấu xí
Minh bạch tốt hơn ngầm định
Đơn giản tốt hơn phức tạp
Phức tạp tốt hơn rắc rối
Tính dễ đọc rất quan trọng.
Thay vì tích hợp hết tất cả các tính năng vào phần cốt lõi, Python được thiết kế để dễ dàng mở rộng (bằng các mô đun). Tính mô đun nhỏ gọn này đã làm cho Python trở nên phổ biến như là một cách thêm các giao diện lập trình được vào các ứng dụng hiện có. Tầm nhìn của Van Rossum về một ngôn ngữ có phần lõi nhỏ với một thư viện chuẩn rộng lớn và một trình thông dịch dễ dàng mở rộng bắt nguồn từ việc ông nản lòng trước ABC, một ngôn ngữ lập trình tán thành hướng tiếp cận ngược lại.[32] Python thường được mô tả là một ngôn ngữ "tặng kèm pin" nhờ vào thư viện chuẩn bao quát của nó.[61]

Python nỗ lực hướng đến một cú pháp đơn giản hơn, gọn gàng hơn trong khi vẫn cho các nhà phát triển lựa chọn phương pháp viết mã của họ. Đối lập với khẩu hiệu "có nhiều hơn một cách để làm việc này," triết lý thiết kế của Python lại nằm trong châm ngôn "chỉ nên có một— và tốt nhất là chỉ một—cách rõ ràng để làm việc này".[62] Alex Martelli, một Viện sĩ (Fellow) tại Tổ chức Phần mềm Python (Python Software Foundation) và là một tác giả viết sách Python, viết rằng "Mô tả một thứ gì đó là "tài tình" không được coi là một lời khen ngợi trong văn hoá Python."[63]

Các nhà phát triển Python nỗ lực tránh xa việc tối ưu hoá quá sớm và không chấp nhận các bản vá không cải thiện đáng kể tốc độ mà lại làm mất đi tính rõ ràng lên những phần không thiết yếu của bản triển khai tham khảo CPython.[63] Khi cần đến tốc độ, một lập trình viên Python có thể di chuyển các hàm bị giới hạn về thời gian sang các mô đun mở rộng được viết bằng những ngôn ngữ như C, hoặc sử dụng PyPy, một trình biên dịch tức thời. Cython cũng có thể được dùng để phiên dịch một tập lệnh Python sang C và tạo ra các lệnh gọi API ở cấp độ của C trực tiếp vào trình thông dịch Python.

Mục tiêu mà các nhà phát triển Python hướng đến là đem đến niềm vui khi sử dụng ngôn ngữ này. Điều này được thể hiện qua bản thân cái tên – một sự tôn vinh dành cho nhóm hài người Anh Monty Python[64] – và trong một số cách tiếp cận thi thoảng vui tươi trong hướng dẫn và các tài liệu tham khảo, chẳng hạn như một vi dụ có đề cập đến trứng và spam (gợi nhắc đến một tiểu phẩm trong Monty Python) thay cho foo và bar tiêu chuẩn.[65][66]

Một từ ngữ mới phổ biến trong cộng đồng Python là pythonic (đậm chất Python), một từ có thể có nhiều ý nghĩa liên quan đến phong cách lập trình. Nói rằng một phần mã nào đó là pythonic tức là phần mã đó sử dụng tốt các thành ngữ Python, trông tự nhiên hoặc trôi chảy về ngôn ngữ, phù hợp với triết lý tối giản của Python và nhấn mạnh vào tính dễ đọc. Ngược lại, những phần mã khó hiểu hoặc trông như một bản dịch thô từ một ngôn ngữ lập trình khác được gọi là unpythonic (không đậm chất Python).[67][68]

Những người sử dụng và say mê Python, nhất là những người được cho là am hiểu hay có nhiều kinh nghiệm, thường được gọi là các Pythonista.[69][70]

Cú pháp
Bài chi tiết: Cú pháp Python
Python là một ngôn ngữ dễ đọc, dễ hiểu. Định dạng của nó rất gọn gàng về mặt trực quan, và nó thường sử dụng các từ khoá tiếng Anh trong khi các ngôn ngữ khác lại sử dụng các dấu câu. Khác với nhiều ngôn ngữ khác, nó không sử dụng các dấu ngoặc nhọn để giới hạn các khối lệnh, và dấu chấm phẩy cuối câu lệnh rất ít khi được sử dụng dù không bị cấm. Nó có ít ngoại lệ cú pháp và trường hợp đặc biệt hơn C và Pascal.[71]

Thụt lề
Python sử dụng thụt lề bằng khoảng trắng hoặc ký tự tab thay vì dùng ngoặc nhọn hay các từ khoá để giới hạn khối lệnh. Lề thường được thụt vào sau một câu lệnh và thụt ra để đánh dấu kết thúc khối lệnh hiện tại. Cho nên, cấu trúc trực quan của chương trình sẽ thể hiện một cách chính xác cấu trúc ngữ nghĩa của chương trình đó.[72] Tính năng này thỉnh thoảng cũng được gọi là "quy tắc việt vị", một quy tắc cũng xuất hiện ở một số ngôn ngữ; nhưng trong phần lớn ngôn ngữ thì thụt lề không phụ thuộc vào cú pháp. Cỡ thụt lề được khuyến cáo là bốn dấu cách.[73]

Câu lệnh và luồng điều khiển
Một số câu lệnh trong Python gồm có:

Câu lệnh gán, sử dụng một dấu bằng =.
Câu lệnh if: thực thi một khối lệnh nếu thoả mãn điều kiện, sử dụng cùng với else và elif (viết tắt của else-if).
Câu lệnh for: lặp qua một đối tượng lặp được, gán mỗi phần tử và một biến cục bộ để sử dụng trong khối lệnh của vòng lặp.
Câu lệnh while: thực thi một khối lệnh chừng nào điều kiện còn đúng.
Câu lệnh try: cho phép bắt ngoại lệ được nâng lên (raise) trong khối lệnh và dùng vế except để xử lý; câu lệnh cũng đảm bảo rằng phần mã dọn dẹp trong khối finally sẽ được chạy dù có lỗi hay không.
Câu lệnh raise: được dùng để nâng một ngoại lệ hoặc nâng lại một ngoại lệ đã được bắt từ trước.
Câu lệnh class: thực thi một khối lệnh và gắn không gian tên cục bộ của nó vào một lớp, để dùng trong lập trình hướng đối tượng.
Câu lệnh def: định nghĩa một hàm hoặc phương thức.
Câu lệnh with: bao bọc một khối lệnh bằng một bộ quản lí ngữ cảnh (context manager) (ví dụ như khoá luồng lại trước khi chạy mã rồi mở khoá, hoặc mở một tệp rồi đóng tệp lại), cho phép các hành vi kiểu RAII (sự đạt được tài nguyên là sự khởi tạo) và thay thể cho các câu lệnh try/finally thường thấy.[74]
Câu lệnh break: thoát ra khỏi vòng lặp.
Câu lệnh continue: bỏ qua lần lặp này và tiếp tục với mục kế tiếp.
Câu lệnh del: loại bỏ một biến, tức là tham chiếu từ tên đến giá trị sẽ bị xoá và cố gắng sử dụng biến đó sẽ gây lỗi. Một biến đã bị xoá có thể được gán lại.
Câu lệnh pass: đóng vai trò như là một dạng NOP. Câu lệnh này được dùng để tạo các khối lệnh rỗng.
Câu lệnh assert: được dùng trong khi gỡ lỗi để kiểm tra điều kiện nên đúng.
Câu lệnh yield: trả lại giá trị từ một hàm bộ sinh; bản thân yield cũng là một toán tử. Dạng này được dùng để triển khai các đồng thường trình.
Câu lệnh return: trả lại một giá trị từ một hàm hay phương thức.
Câu lệnh import: được dùng để nhập các mô đun chứa các hàm và biến được sử dụng trong chương trình hiện tại.
Câu lệnh gán (=) hoạt động bằng cách liên kết một tên dưới dạng một tham chiếu với một đối tượng được cấp phát động riêng lẻ. Các biến có thể được dùng lại bất cứ lúc nào với bất cứ đối tượng nào. Trong Python, một tên biến chỉ giữ tham chiếu một cách chung chung và không có kiểu dữ liệu cố định đi kèm. Tuy nhiên, tại một thời điểm nhất định, một biến sẽ tham chiếu đến một vài đối tượng có kiểu. Nó được gọi là kiểu động, ngược lại với các ngôn ngữ lập trình kiểu tĩnh với mỗi biến chỉ có thể chứa giá trị của một kiểu nhất định.

Biểu thức
Một số biểu thức trong Python tương tự như những biểu thức trong những ngôn ngữ khác chẳng hạn như C và Java, trong khi số khác thì không:

Phép cộng, trừ và nhân thì đều giống nhau, nhưng hành vi của phép chia thì khác nhau. Có hai loại phép chia trong Python: phép chia phần nguyên (phép chia số nguyên) dùng dấu // và phép chia dấu phẩy động dùng dấu /.[75] Python cũng sử dụng toán tử ** cho phép luỹ thừa.
Từ Python 3.5, toán tử trung tố @ mới đã được giới thiệu. Nó được thiết kể để được sử dụng trong các thư viện như NumPy để nhân ma trận.[76][77]
Từ Python 3.8, cú pháp :=, hay "toán tử moóc" đã được giới thiệu. Nó gán giá trị vào biến trong một phần của một biểu thức lớn hơn.[78]
Trong Python, == so sánh theo giá trị, khác với Java, vốn so sánh các số theo giá trị[79] và các đối tượng theo tham chiếu.[80] (So sánh giá trị trong Java có thể được thực hiện bằng phương thức equals().) Toán tử is của Python có thể được dùng để so sánh danh tính của đối tượng (so sánh theo tham chiếu). Trong Python, các phép so sánh có thể được xâu chuỗi lại với nhau, ví dụ như a <= b <= c.
Python sử dụng các từ khoá and, or, not để so sánh luận lý (boolean) thay vì dùng các loại biểu tượng &&, ||, ! được dùng trong Java và C.
Python có một loại biểu thức được gọi là thông hiểu danh sách (list comprehension) cũng như một loại biểu thức chung được gọi là biểu thức bộ sinh (generator expression).[59]
Các hàm vô danh được triển khai thông qua các biểu thức lambda; tuy nhiên, phần thân của hàm vô danh chỉ có thể là đúng một biểu thức.
Biểu thức điều kiện trong Python được viết dưới dạng x if c else y[81] (có sự khác biệt về trật tự của các toán hạng so với toán tử c ? x : y thường có trong những ngôn ngữ khác).
Có sự phân biệt giữa danh sách và bộ trong Python. Danh sách được viết dưới dạng [1, 2, 3], biển đổi được, và không thể được dùng như khoá cho từ điển (các khoá từ điển phải là bất biến trong Python). Bộ được viết dưới dạng (1, 2, 3), không biến đổi được nên có thể được dùng làm khoá của từ điển, với điều kiện là tất cả các phần tử trong bộ cũng phải là bất biến. Toán tử + có thể được sử dụng để nối liền hai bộ lại với nhau, như không trực tiếp thay đổi nội dung của chúng, mà sẽ tạo ra một bộ mới chứa các phần tử của cả hai bộ ban đầu. Vì vậy, cho một biến t ban đầu bằng (1, 2, 3), chạy lệnh t = t + (4, 5) sẽ thực thì t + (4, 5) đầu tiên, tạo ra (1, 2, 3, 4, 5), rồi mới được gán lại cho t, bằng cách đó đã "chỉnh sửa nội dung" của t một cách hiệu quả, trong khi vẫn tuân theo bản chất bất biến của đối tượng bộ. Trong các ngữ cảnh không mơ hồ thì dấu ngoặc đơn là không cần thiết.[82]
Python có một tính năng là tháo tách chuỗi (sequence unpacking) trong đó các biểu thức, mà mỗi biểu thức được đánh giá thành bất kì thứ gì có thể được gán vào (một biến, một thuộc tính viết được...), được liên kết theo cùng một cách với các bộ ban đầu đó và được đặt vào vế bên trái dấu bằng trong một câu lệnh gán. Câu lệnh này mong đợi một một đối tượng lặp được (iterable) ở vế bên phải dấu bằng tạo ra cùng một số lượng giá trị giống như ở các biểu thức trước đó khi đã và sẽ lặp qua, rồi gán mỗi giá trị được tạo ra bằng các biểu thức tương ứng ở vế bến trái.[83]
Python có một toán tử "định dạng xâu" là %. Chức năng này tương tự như định dạng xâu printf trong C, thí dụ như "spam=%s eggs=%d" % ("blah", 2) được đánh giá thành "spam=blah eggs=2". Trong Python 3 và 2.6+, chức năng này được bổ sung bằng phương thức format() của lớp str, ví dụ như "spam={0} eggs={1}".format("blah", 2). Python 3.6 đã bổ sung thêm "f-string": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}'.[84]
Các xâu trong Python có thể được ghép móc với nhau bằng cách "cộng" chúng lại (dùng cùng toán tử với phép cộng số nguyên và số phẩy động). Thí dụ, "spam" + "eggs" cho ra "spameggs". Kể cả nếu xấu chứa số, chúng vẫn sẽ được ghép móc thành xâu thay vì số nguyên. Thí dụ, "2" + "2" cho ra"22".
Python có nhiều kiểu hằng xâu khác nhau:
Xâu được phân cách bởi dấu nháy đơn hoặc nháy kép. Khác với hệ vỏ Unix, Perl và các ngôn ngữ ảnh hưởng từ Perl, dấu nháy đơn và dấu nháy kép có cùng chức năng. Cả hai loại xâu đều dùng dấu chéo ngược (\) làm ký tự thoát (escape character). Nội suy xâu đã được thêm vào kể từ Python 3.6 với tên gọi "hằng xâu được định dạng".[84]
Xâu ba dấu nháy: bắt đầu và kết thúc bằng ba dấu nháy đơn hoặc kép. Chúng có thể trải dài trên nhiều dòng giống như trong tài liệu đây (here document) trong các hệ vỏ, Perl và Ruby.
Các loại xâu thô, được kí hiệu bằng cách đặt trước hằng xâu một kí tự r. Các chuỗi thoát sẽ không bị thông dịch; cho nên xâuthô khá là hữu ích khi xâu có chứa nhiều dấu chéo ngược, chẳng hạn như biểu thức chính quy và đường dẫn tệp trên Windows.
Python có các biểu thức chỉ số mảng và cắt lát mảng đối với danh sách, được kí hiệu là a[khoá], a[đầu:cuối] hay a[đầu:cuối:bước]. Các chỉ số được đánh từ số không, và chỉ số âm sẽ chỉ lùi từ cuối lên. Việc cắt lát sẽ lấy các phần tử từ đầu cho đến chỉ số cuối (không kể chỉ số cuối). Tham số cắt lát thứ ba, được gọi là bước, cho phép các phần tử có thể được bỏ qua hoặc đảo chiều. Chỉ số lát có thể được bỏ trống, ví dụ a[:]trả lại một bản sao của danh sách đó. Mỗi phần tử trong một lát là một bản sao nông.
Trong Python các biểu thức và câu lệnh được phân biệt một cách vững chắc, ngược lại với các ngôn ngữ như Common Lisp, Scheme, hay Ruby. Điều này đã dẫn tới nhiều biểu thức và câu lệnh có cùng chức năng. Thí dụ:

Thông hiểu danh sách và vòng lặp for
Biểu thức điều kiện và khối lệnh if
Hàm eval() (đánh giá các biểu thức) và exec() (thực thi các câu lệnh); trong Python 2, exec là một câu lệnh.
Câu lệnh không thể nằm trong biểu thức, vậy nên các loại thông hiểu (gồm cả danh sách) và biểu thức lambda, vốn là các biểu thức, không thể chứa các câu lệnh. Một trường hợp cụ thể là một câu lệnh gán chẳng hạn như a = 1 không thể là một phần của biểu thức điều kiện của một câu lệnh điều kiện. Điều này sẽ giúp tránh được các lỗi viết sai toán tử bằng == bằng toán tử gán = trong câu điều kiện thường thấy ở C. Ví dụ, if (c = 1) { ... } là một đoạn mã C hợp lệ (nhưng chắc là không đúng ý) còn if c = 1: ... sẽ báo lỗi cú pháp trong Python.

Phương thức
Phương thức của đối tượng là một hàm đi kèm với lớp của đối tượng đó. Cú pháp hiện_thể.phương_thức(đối số), đối với các hàm và phương thức bình thường, thức chất là dạng cú pháp đặc biệt của Lớp.phương_thức(hiện_thể, đối số). Các phương thức trong Python có một tham số self được dùng để truy cập dữ liệu của hiện thể (instance), ngược lại với biến bản thân (self haythis) trong một số ngôn ngữ lập trình hướng đối tượng khác (C++, Java, Objective-C, hay Ruby). Ngoại trừ điều này, Python cũng cung cấp các phương thức gạch dưới (do tên của chúng bắt đầu và kết thúc bằng hai dấu gạch dưới), cho phép các lớp do người dùng định nghĩa thay đổi cách các lớp này được xử lý bởi các thao tác của Python chẳng hạn như lấy chiều dài, so sánh, tính toán số học, chuyển đổi kiểu...[85]

Kiểu dữ liệu

Cấp bậc kiểu tiêu chuẩn trong Python 3
Python sử dụng định kiểu vịt (duck typing) và có các đối tượng có kiểu nhưng tên biến thì không có kiểu. Giới hạn về kiểu không được kiểm tra trong lúc biên dịch; thay vào đó. các thao tác lên một đối tượng có thể thất bại, chỉ ra rằng đối tượng đó không thuộc vào kiểu dữ liệu phù hợp. Tuy là định kiểu động, Python cũng định kiểu mạnh khi không cho phép các thao tác mà không được định nghĩa rõ ràng (chẳng hạn như cộng một số vào một xâu) thay vì lặng lẽ cố gắng diễn giải thao tác đó.

Python cho phép các lập trình viên định nghĩa các kiểu của riêng họ bằng cách sử dụng lớp, thường được dùng trong lập trình hướng đối tượng. Các hiện thể của một lớp thường được tạo ra bằng cách gọi lớp đó (chẳng hạn như SpamClass() hay EggsClass()), các lớp lại là hiện thể của siêu lớp type (bản thân nó cũng là một hiện thể của chính nó), cho phép siêu lập trình và phản xạ.

Trước phiên bản 3.0, Python có hai loại lớp là kiểu cũ và kiểu mới.[86] Cú pháp của cả hai kiểu đều giống nhau. Sự khác biệt nằm ở chỗ lớp đó có kế thừa từ lớp object một cách trực tiếp hoặc gián tiếp hay không (tất cả các lớp kiểu mới đều kế thừa từ object và là hiện thể của type). Từ phiên bản Python 2.2 trở đi, cả hai loại lớp đều có thể được sử dụng. Lớp kiểu cũ đã bị loại bỏ trong Python 3.0.

Kế hoạch dài hạn là hỗ trợ định kiểu dần dần[87] và từ Python 3.5, cú pháp của ngôn ngữ này cho phép chỉ rõ các kiểu tĩnh nhưng chúng lại không được kiểm tra trong bản triển khai mặc định, CPython. Một trình kiểm tra kiểu tĩnh đang trong quá trình thử nghiệm và tuỳ chọn tên là mypy có hỗ trợ kiểm tra kiểu trong thời gian biên dịch.[88]

Tóm tắt các kiểu dữ liệu có sẵn trong Python 3
Kiểu	Thay đổi được	Mô tả	Ví dụ cú pháp
bool	không	Kiểu dữ liệu luận lý	TrueFalse
bytearray	có	Chuỗi các byte nối tiếp	bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes	không	Chuỗi các byte nối tiếp	b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex	không	Số phức với phần thực và phần ảo	3+2.7j3 + 2.7j
dict	có	Mảng liên kết (hay từ điển) các cặp khoá và giá trị; có thể chứa lẫn lộn nhiều kiểu (khoá và giá trị), khoá phải là loại băm được	{'key1': 1.0, 3: False}{}
ellipsisa	không	Một kiểu giữ chỗ chấm lửng được dùng như một chỉ số trong một mảng NumPy	...Ellipsis
float	không	Số phẩy động độ chính xác đôi. Độ chính xác phụ thuộc vào từng máy nhưng trên thực tế thì nó thường được triển khai là một số IEEE 754 64-bit với độ chính xác là 53 bit.[89]	1.33333
frozenset	không	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	frozenset([4.0, 'string', True])
int	không	Số nguyên với độ lớn không giới hạn[90]	42
list	có	Danh sách, có thể chứa lẫn lộn nhiều kiểu	[4.0, 'string', True][]
NoneTypea	không	Một đối tượng đại diện cho sự không có mặt của dữ liệu, tương đương với null trong các ngôn ngữ khác	None
NotImplementedTypea	không	Một kiểu giữ chỗ có thể được trả lại từ toán tử nạp chồng để biểu thị kiểu toán hạng không được hỗ trợ.	NotImplemented
range	không	Một chuỗi các số thường được dùng để lặp với số lần biết trước trong vòng lặpfor[91]	range(-1, 10)range(10, -5, -2)
set	có	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	{4.0, 'string', True}set()
str	không	Một xâu ký tự (string): chuỗi các điểm mã Unicode	'Wikipedia'"Wikipedia"
"""Trải dài trên
nhiều
dòng"""
tuple	không	Bộ; có thể chứa lẫn lộn nhiều kiểu	(4.0, 'xâu kí tự', True)('phần tử',)()
^a Không thể được truy cập trực tiếp bằng tên

Phép tính số học
Python có các kí hiệu thường dùng cho các toán tử số học (+, -, *, /), toán tử chia sàn // và toán tử chia lấy dư % (số dư có thể âm, chẳng hạn như 4 % -3 == -2). Nó cũng có toán tử ** cho phép luỹ thừa, chẳng hạn như 5**3 == 125 và 9**0.5 == 3.0, và toán tử nhân ma trận @.[92] Các toán tử này hoạt động giống như trong toán học truyền thống, với cùng thứ tự tính toán, toán tử trung tố (+ và - cũng có thể làm toán tử một ngôi để biểu diễn số dương và số âm một cách tương ứng).

Phép chia giữa các số nguyên tạo ra kết quả là số phẩy động. Hành vi của phép chia đã thay đổi đáng kể theo thời gian:[93]

Python hiện tại (kể từ 3.0) thay đổi / thành phép chia số phẩy động, ví dụ: 5/2 == 2.5.
Python 2.2 đã thay đổi phép chia số nguyên để nó làm tròn về phía âm vô cực, ví dụ 7/3 == 2 và -7/3 == -3. Toán tử chia sàn // đã được giới thiệu. Cho nên 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 và -7.5//3 == -3.0. Thêm from __future__ import division sẽ làm cho một mô đun sử dụng quy tắc chia của Python 3.0.
Python 2.1 về trước sử dụng hành vi chia kiểu C. Toán tử / là phép chia nguyên nếu cả hai toán hạng là số nguyên, nếu không thì là phép chia số phẩy động. Phép chia nguyên làm tròn về 0, ví dụ 7/3 == 2 và -7/3 == -2.
Trong thuật ngữ Python, / là phép chia đúng (gọi tắt là phép chia), và // là phép chia sàn. Toán tử / trước phiên bản 3.0 là phép chia cổ điển.[93]

Việc làm tròn về phía âm vô cực, dù khác biết so với những ngôn ngữ khác, đem lại sự chắc chắn. Ví dụ, phương trình (a + b)//b == a//b + 1 là luôn đúng. Còn phương trình b*(a//b) + a%b == a thì hợp lệ với cả giá trị a dương và âm. Tuy nhiên, duy trì tính hợp lệ của phương trình này cũng đồng nghĩa răng trong khi kết quả của a%b là, đúng như mong đợi, nằm trong nửa khoảng mở [0, b), với b là một số nguyên dương, nó cũng cần phải nằm trong khoảng (b, 0] khi b âm.[94]

Python cung cấp một hàm round để làm tròn một số phẩy động thành số nguyên gần nhất. Để gỡ hoà (với những số có chữ số cuối là 5), Python 3 sử dụng làm tròn thành số chẵn: round(1.5) và round(2.5) đều là 2.[95] Các phiên bản trước 3 làm tròn xa số không: round(0.5) là 1.0, round(-0.5) là −1.0.[96]

Python cho phép sử dụng các biểu thức luận lý với nhiều quan hệ băng nhau theo một cách đồng nhất với cách dùng chung trong toán học. Thí dụ, biểu thức a < b < c kiểm tra xem a có nhỏ hơn b và b có nhỏ hơn c hay không.[97] Các ngôn ngữ dựa trên C sẽ hiểu biểu thức trên khác đi: trong C, biểu thức trên sẽ đánh giá a < b trước tiên, cho ra kết quả 0 hoặc 1, rồi kết quả đó mới được so sánh với c.[98]

Python sử dụng số học có độ chính xác tuỳ ý cho tất cả các thao tác với số nguyên. Kiểu/Lớp Decimal trong mô đun decimal cung cấp số dấu phẩy động thập phân với một độ chính xác tuỳ ý được định trước và một vài chế độ làm tròn.[99] Lớp Fraction trong mô đun fractions cung cấp độ chính xác tuỳ ý cho số hữu tỉ.[100]

Nhờ thư viện toán học rộng lớn của Python và thư viện bên thứ ba NumPy với nhiều tính năng hơn nữa, Python thường được dùng như một ngôn ngữ kịch bản để giải quyết các vấn đề chẳng hạn như thao tác và xử lí dữ liệu số.[101][102]

Chú thích
# dòng chú thích
In giá trị
# Từ Python 3
print((7 + 8) / 2.0)
print((2 + 3j) * (4 - 6j))
Nội suy xâu (string interpolation)

print("Hello {}!".format("world"))
print("a = {.2f} và b = {.2f}".format(a,b))
Cấu trúc rẽ nhánh
Dạng 1:
if biểu_thức_điều_kiện:
    # lệnh...
Dạng 2:
if biểu_thức_điều_kiện:
    # lệnh...
else:
    # lệnh...
Dạng 3:
if biểu_thức_điều_kiện_1:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là đúng/true)
elif biểu_thức_điều_kiện_2:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là sai/false, nhưng biểu_thức_điều_kiện_2 là đúng/true)
else:
    # lệnh... (được thực hiện nếu tất cả các biểu thức điều kiện đi kèm if và elif đều sai)
Khớp theo mẫu, được thêm vào từ bản 3.10.0:
match biến_1:
    case điều_kiện_1:
        #được thực hiện nếu biến_1 = điều_kiện_1
    case điều_kiện_2:
        #được thực hiện nếu biến_1 = điều_kiện_2
Cấu trúc lặp
while biểu_thức_đúng:
    # lệnh...
for phần_tử in dãy:
    # lệnh...
L = ["Hà Nội", "Hải Phòng", "TP Hồ Chí Minh"]
for thành_phố in L:
    print(thành_phố)

for i in range(10):
    print(i)
Hàm
def tên_hàm (tham_biến_1, tham_biến_2, tham_biến_n):
    # lệnh...
    return giá_trị_hàm
Hàm với tham số mặc định:

def luỹ_thừa(x, n=2):
   """Lũy thừa với số mũ mặc định là 2"""
   return x**n

print(luỹ_thừa(3))   # 9
print(luỹ_thừa(2,3)) # 8
Lớp
class Lớp:
    #...

class LớpCon(Lớp):
    """LớpCon kế thừa lớp Lớp"""
    x = 3  # biến thành viên của lớp
    #
    def phương_thức(self, tham_biến):
        #...

# khởi tạo
a = LớpCon()
print(a.x)
print(a.phương_thức(m))  # m là giá trị gán cho tham biến
Xử lý ngoại lệ
try:
    câu_lệnh
except Loại_Lỗi:
    thông báo lỗi
Thư viện
Bộ thư viện chuẩn rộng lớn của Python – một trong những điểm mạnh lớn nhất của Python[103] – cung cấp các công cụ phù hợp cho nhiều công việc khác nhau. Với các ứng dụng giao tiếp với Internet, nhiều giao thức và định dạng chuẩn chẳng hạn như MIME and HTTP được hỗ trợ. Nó cũng có chứa các mô đun đành cho việc tạo lập giao diện người dùng đồ hoạ, kết nối với cơ sở dữ liệu quan hệ, sinh số giả ngẫu nhiên, tính toán với số thập phân có độ chính xác tuỳ ý,[104] thao tác với biểu thức chính quy và kiểm thử đơn vị.

Một số phần của thư viện chuẩn nằm trong đặc tả (ví dụ, Giao diện Cổng vào Máy chủ Web (Web Server Gateway Interface hay WSGI) triển khai wsgiref theo PEP 333[105]), nhưng phần lớn mô đun thì không. Chúng được xác định dựa vào mã, tài liệu bên trong và bộ kiểm thử (test suite) của chúng. Tuy nhiên, vì phần lớn thư viện chuẩn là mã Python đa nền tảng, chỉ một vài mô đun cần được chỉnh sửa hoặc viết lại cho các bản triển khai khác nhau.

Tính đến tháng 9 năm 2021, Python Package Index (PyPI), kho chính thức dành cho các phần mềm Python bên thứ ba, có chứa hơn 329.000[106] gói với nhiều chức năng đa dạng và phong phú, bao gồm:
Tự động hoá
Phân tích dữ liệu
Cơ sở dữ liệu
Tài liệu
Giao diện người dùng đồ hoạ
Xử lý hình ảnh
Học máy
Ứng dụng di động
Đa phương tiện
Mạng máy tính
Khoa học tính toán
Quản trị hệ thống
Kiểm thử tự động
Xử lí văn bản
Bộ khung mạng
Thu thập web
Môi trường phát triển
Xem thêm: So sánh các môi trường phát triển tích hợp § Python
Phần lớn trình hiện thực Python (kể cả CPython) có chứa một trình lặp đọc–tính–in (REPL), cho phép chúng hoạt động như là một trình thông dịch dòng lệnh mà người dùng sẽ lần lượt nhập các câu lệnh và nhận kết quả ngay lập tức.

Python đì kèm với một môi trường phát triển tịch hợp (IDE) được gọi là IDLE, phù hợp với người mới bắt đầu.

Các hệ vỏ khác, bao gồm IDLE và IPython, có thêm khả năng tự hoàn thiện, khôi phục trạng thái phiên, và tô sáng cú pháp.

Ngoài các môi trường phát triển tích hợp trên máy để bàn, còn có những IDE chạy trên trình duyệt web: SageMath (dành cho việc phát triển các chương trình Python liên quan đền toán học và khoa học); PythonAnywhere, một IDE kiêm môi trường chủ nhà; và Canopy IDE, một IDE Python thương mại tập trung vào khoa học tính toán.[107]

Các bản triển khai
Xem thêm: Danh sách phần mềm Python § Các bản thực hiện Python
Bản triển khai tham khảo
CPython là bản triển khai tham khảo của Python. Nó được viết bằng C, đáp ứng tiêu chuẩn C89 vời một vào tính năng C99 chọn lọc (từ khi các phiên bản C mới hơn ra mắt, nó được coi là lỗi thời;[108][109] CPython có chứa phần mở rộng C của riêng nó, nhưng các phần mở rộng bên thứ ba không bị giới hạn bởi các phiên bản C cũ hơn, có thể được cài đặt với C11 hoặc C++[110]). Nó biên dịch các chương trình Python thành một dạng mã byte trung gian, sau đó thực thi mã byte trên máy ảo của nó. CPython được phân phối cùng với một thư viện chuẩn rộng lớn được viết bằng C và Python bản địa (native). Nó có sẵn trên nhiều nền tảng, bao gồm Windows (từ Python 3.9, trình cài đặt Python sẽ không chạy một cách có chủ ý trên Windows 7 và 8;[111][112] Windows XP đã từng được hỗ trợ cho đến Python 3.5) và phần lớn hệ điều hành tương tự Unix hiện đại, bao gồm macOS (và máy Mac Apple M1, kể từ Python 3.9.1, với trình cài đặt thử nghiệm) và hỗ trợ không chính thức cho chẳng hạn như VMS.[113] Tính khả chuyển nền tảng là một trong những ưu tiên sớm nhất của nó, trong khung thời gian Python 1 và Python 2, khi ngay cả OS/2 và Solaris cũng được hỗ trợ;[114] song nhiều hệ điều hành cũng không còn được hỗ trợ nữa.

Các bản triển khai khác
PyPy là một trình thông dịch nhanh, tuân thủ cú pháp của Python 2.7 và 3.6.[115] Trình biên dịch tức thời của nó mang đến tốc độ vượt trội so với CPython nhưng một vài thư viện được viết bằng C lại không thể được sử dụng cùng với nó.[116]
Stackless Python là một phân nhánh (fork) đáng chú ý của CPython có cài đặt vi luồng; nó không sử dụng ngăn xếp lời gọi theo cùng một cách với CPython, vậy nên nó hỗ trợ các chương trình đồng thời một cách ồ ạt. PyPy cũng có một phiên bản không có ngăn xếp.[117]
MicroPython và CircuitPython là các biến thể Python 3 được tối ưu hoá cho vi điều khiển, bao gồm Lego Mindstorms EV3.[118]
Pyston là một biến thể của Python sử dụng biên dịch tức thời để tăng tốc độ thực thi các chương trình Python.[119]
Cinder là một phân nhánh hướng hiệu năng của CPython 3.8 có chứa một số tối ưu hoá bao gồm đệm bộ nhớ mã byte trong dòng, đánh giá các chương trình con một cách tham vọng, một trình biên dịch tức thời "mỗi lúc một phương thức" và một trình biên dịch mã byte thử nghiệm.[120]
Trình biên dịch chéo sang ngôn ngữ khác
Có một số trình biên dịch sang những ngôn ngữ đối tượng bậc cao khác từ ngôn ngữ mã nguồn là Python, một tập con giới hạn của Python hoặc một ngôn ngữ tương tự Python:

Brython,[121] Transcrypt[122][123] và Pyjs (phát hành lần cuối năm 2012) biên dịch Python sang JavaScript.
Codon biên dịch một tập con Python định kiểu tĩnh[124] sang mã máy (thông qua LLVM) và hỗ trợ đa luồng cho hệ thống bản địa.[125]
Cython biên dịch (một tập cha của) Python 2.7 sang C. Phần mã kết quả cũng dùng được với Python thông qua các lệnh gọi API mức C trực tiếp vào trình thông dịch Python.
Nuitka biên dịch Python sang C.[126]
Numba sử dụng LLVM để biên dịch một tập con của Python sang mã máy.
Pythran biên dịch một tập con của Python 3 sang C++.[127][128][129]
Pyrex (bản mới nhất năm 2010) và Shed Skin (bản mới nhất năm 2013) biên dịch lần lượt sang C và C++.
Google's Grumpy (bản mới nhất năm 2017) phiên dịch Python 2 to Go.[130][131][132]
IronPython cho phép chạy các chương trình Python 2.7 trên .NET Common Language Runtime.[133]
Jython biên dịch Python 2.7 sang mã byte Java, cho phép sử dụng các thư viện Java từ một chương trình Python.[134]
RPython có thể được biên dịch sang C, và được dùng để xây dựng trình thông dịch PyPy của Python.
Phát triển
Sự phát triển của Python được chỉ đạo phần lớn là thông qua quy trình Đề nghị Cải tiến Python (Python Enhancement Proposal, hay PEP), cơ chế chủ yếu để đề nghị các tính năng lớn mới, thu thập ý kiến của cộng đồng về các vấn đề và ghi chép lại các quyết định về thiết kế của Python.[135] Phong cách viết mã của Python nằm trong PEP 8.[73] Các PEP xuất sắc sẽ được xem lại và bình luận bởi cộng đồng Python và hội đồng chèo lái.[135]

Sự cải tiến ngôn ngữ tương ứng với sự phát triển của bản triển khai tham khảo CPython. Danh sách thư python-dev là diễn đàn chính về sự phát triển của ngôn ngữ này. Các vấn đề cụ thể được thảo luận trong hệ theo dõi lỗi Roundup được tổ chức trên bugs.python.org.[136] Sự phát triển ban đầu chỉ xảy ra trên một kho mã nguồn tự làm chủ chạy Mercurial cho đến khi Python di chuyển mã nguồn sang Github vào tháng Một năm 2017.[137]

Các bản phát hành công khai của CPython được chia thành ba loại, được phân biệt theo phần nào của số phiên bản được tăng lên:

Phiên bản không tương thích ngược: các mã nhiều khả năng sẽ không hoạt động được và cần phải được chuyển mã thủ công. Phần đầu tiên của số phiên bản được tăng lên. Các bản này ít khi được phát hành: phiên bản 3.0 đã được phát hành 8 năm trước bản 2.0. Theo ông Guido van Rossum, phiên bản 4.0 có lẽ sẽ không bao giờ được phát hành.[138]
Bản phát hành lớn hay bản phát hành "tính năng": tương thích phần lớn với các phiên bản trước đó nhưng có thêm những tính năng mới. Phần thứ hai của số phiên bản được tăng lên. Bắt đầu từ Python 3.8, các bản phát hành được thông báo là sẽ xảy ra hằng năm.[139][140] Mỗi phiên bản lớn sẽ được hỗ trợ bằng sửa lỗi trong vòng vài năm sau khi nó được phát hành.[141]
Phiên bản sửa lỗi: không có tính năng mới, xảy ra mỗi ba tháng và được phát hành khi số lượng lỗi được sửa ngược dòng đủ lớn kể từ bản phát hành cuối. Các lỗ hổng cũng sẽ được vá trong những phiên bản này. Phần thứ ba và phần cuối cùng của số phiên bản được tăng lên.
Nhiều phiên bản alpha, beta và phiên bản ứng cử cũng được phát hành để xem trước và kiểm thử trước bản phát hành cuối cùng. Mặc dù có một lịch trình sơ bộ cho mỗi bản phát hành, chúng thường được lùi lại nếu mã vẫn chưa sẵn sàng. Đội ngũ phát triển Python giám sát tình trạng của mã bằng các chạy tập kiểm thử đơn vị lớn trong quá trình phát triển.[142]

Hội thảo học thuật lớn nhất của Python là PyCon. Ngoài ra, cũng có các chương trình hướng dẫn Python đặc biệt khác, chẳng hạn như Pyladies.

Python 3.10 không khuyên dùng wstr (sẽ bị loại bỏ từ Python 3.12; nghĩa là các phần mở rộng Python[143] cần được chỉnh sửa khi đó),[144] đông thời thêm tính năng khớp theo mẫu (pattern matching) vào ngôn ngữ.[145]

Sự phổ biến
Kể từ năm 2003, Python luôn được xếp vào một trong số mười ngôn ngữ lập trình phổ biến nhất trong Chỉ số Cộng đồng Lập trình TIOBE, nơi mà tính đến tháng 10 năm 2021, Python là ngôn ngữ phổ biến nhất (đứng trước Java và C).[89] Nó từng được chọn là Ngôn ngữ Lập trình của Năm (vì "có đánh giá tăng cao nhất trong năm") vào các năm 2007, 2010, 2018, và 2020 (chỉ Python là được bốn năm[91]).

Một nghiên cứu thức nghiệm chỉ ra rằng các ngôn ngữ kịch bản, chẳng hạn như Python, cho năng suất cao hơn so với các ngôn ngữ thông thường, chẳng hạn như C và Java, đối với các vấn đề lập trình liên quan đến thao tác xâu và tìm kiếm trong từ điển, đồng thời quả quyết rằng sự tiêu tốn bộ nhớ thường "tốt hơn Java và không quá tệ hơn so với C hay C++".[146]

Các tổ chức lớn sử dụng Python gồm có Wikipedia, Google,[147] Yahoo!,[148] CERN, NASA, Facebook,[149] Amazon, Instagram,[150] Spotify[151] và các tổ chức nhỏ hơn như ILM and ITA. Trang mạng tin tức xã hội Reddit cũng được viết phần lớn bằng Python.[152]

Sử dụng
Bài chi tiết: Danh sách phần mềm Python

Được vận hành bởi Python
Python có thể đóng vài trò như là một ngôn ngữ kịch bản cho ứng dụng web, chẳng hạn như thông qua mod wsgi đối với máy chủ web Apache.[153] Với Giao diện Cổng vào Máy chủ Web, một API chuẩn đã và đang dần phát triển để tạo điều kiện cho các ứng dụng này. Các bộ khung web như Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle và Zope hỗ trợ các nhà phát triển trong khâu thiết kế và bảo trì các ứng dụng phức tạp. Pyjs và IronPython có thể được dùng để phát triển phía khách của các ứng dụng dựa trên Ajax. SQLAlchemy có thể được dùng để ánh xạ dữ liệu sang một cơ sở dữ liệu quan hệ. Twisted là một bộ khung dành cho việc giao tiếp giữa các máy tính và được sử dụng bởi Dropbox chẳng hạn.

Các thư viện như NumPy, SciPy và Matplotlib cho phép sử dụng một cách có hiệu quả Python trong tính toán khoa học,[154][155] với các thư viện chuyên ngành chẳng hạn như Biopython và Astropy cung cấp các chức năng miền cụ thể. SageMath là một hệ thống đại số máy tính với một giao diện vở lập trình được trong Python: thư viện của nó trải dài trên nhiều lĩnh vực của toán học, bao gồm đại số, toán tổ hợp, giải tích số, lý thuyết số và vi tích phân.[156] OpenCV có gán kết Python với một tập hợp các tính năng phong phú về thị giác máy tính và xử lý ảnh.[157]

Python thường được sử dụng trong các dự án trí tuệ nhân tạo và học máy với sự giúp đỡ của các thư viện như TensorFlow, Keras, Pytorch và Scikit-learn.[158][159][160][161] Vì là một ngôn ngữ kịch bản với kiến trúc mô đun, cú pháp đơn giản và các công cụ xử lý văn bản phong phú, Python cũng thường được sử dụng trong xử lý ngôn ngữ tự nhiên.

Python có thể được sử dụng để phát triển các giao diện người dùng đồ hoạ (GUI) bằng cách sử dụng các thư viện như Tkinter[162][163], hay để tạo ra trò chơi thông qua các thư viện chẳng hạn như Pygame, một thư viện làm trò chơi 2D.

Python đã được nhúng thành công trong nhiều sản phẩm phần mềm như là một ngôn ngữ kịch bản, bao gồm trong phần mềm phương pháp phần tử hữu hạn chẳng hạn như Abaqus, một trình dựng mô hình tham số 3D giống như FreeCAD, trong các gói hoạt hình 3D chẳng hạn như 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, Modo, MotionBuilder, Softimage, trong trình tổng hợp hiệu ứng trực quan Nuke, trong các chương trình sửa ảnh 2D như GIMP,[164] Inkscape, Scribus và Paint Shop Pro, và trong các chương trình kí hiệu âm nhạc như trình soạn nhạc và Capella. GNU Debugger sử dụng Python như là một trình in đẹp để thể hiện các cấu trúc phức tạp chẳng hạn như các kiểu chứa (container) trong C++. Esri quảng bá Python là lựa chọn tốt nhất để viết tập lệnh trong ArcGIS. Nó cũng được sử dụng trong một số trò chơi video, và được chọn làm một trong ba ngôn ngữ lập trình có sẵn đầu tiên trong Google App Engine, với hai ngôn ngữ còn lại là Java và Go.

Nhiều hệ điều hành có chứa Python như là một thành phần tiêu chuẩn. Nó đi kèm với hầu hết các bản phân phối Linux,[165] AmigaOS 4 (sử dụng Python 2.7), FreeBSD (dưới dạng gói), NetBSD, OpenBSD (dưới dạng gói) và macOS và có thể được dùng từ dòng lệnh (tức terminal – đầu cuối). Nhiều bản phân phối Linux sử dụng các trình cài đặt được viết bằng Python: Ubuntu sử dụng trình cài đặt Ubiquity, trong khi Red Hat Linux và Fedora sử dụng trình cài đặt Anaconda. Gentoo Linux sử dụng Python trong hệ thống quản lý gói của nó là Portage.

Python còn được sử dụng rộng rãi trong ngành công nghiệp an toàn thông tin, bao gồm phát triển khai thác.

LibreOffice có nhúng Python và dự định sẽ thay thế Java bằng Python. Python Scripting Provider là một tính năng lõi của nó[166] kể từ phiên bản 4.0 phát hành mùng 7 tháng Hai năm 2013.

Ảnh hưởng ngôn ngữ
Thiết kế và triết lý của Python đã ảnh hưởng đến nhiều ngôn ngữ lập trình khác:

CoffeeScript – một ngôn ngữ lập trình biên dịch chéo sang JavaScript – có cú pháp lấy cảm hứng từ Python.
ECMAScript/JavaScript mượn biến lặp (iterator) và bộ sinh từ Python.
GDScript, một ngôn ngữ kịch bản rất giống Python, được tích hợp vào bộ máy trò chơi Godot.[167]
Go được thiết kế nhằm "tăng tốc độ làm việc trong một ngôn ngữ kiểu động giống như Python" và cả hai có cùng cú pháp cắt lát mảng.
Groovy được tạo ra với mong muốn đem triết lí thiết kế của Python vào Java.[168]
Julia được thiết kế để "có thể sử dụng được vào các mục đích chung giống như Python vậy".[169]
Mojo, một tập cha của Python, cố gắng tương thích với cú pháp và hệ sinh thái của Python[170], và có thể chạy nhanh hơn Python lên đến 35.000 lần.[171]
Nim cũng có thụt lề và cú pháp tương đồng.[172]
Matsumoto Yukihiro, tác giả của ngôn ngữ Ruby từng cho biết: "Tôi muốn một ngôn ngữ kịch bản mạnh mẽ hơn Perl và hướng đối tượng nhiều hơn Python. Đó là lí do tôi quyết định thiết kế ngôn ngữ cho riêng mình."[173]
Xem thêm
icon	Cổng thông tin Lập trình máy tính
	Cổng thông tin Phần mềm tự do và nguồn mở
Zen of Python
pip (trình quản lý gói)
Tham khảo
^ “Python 3.12.3 and 3.13.0a6 released” (bằng tiếng Anh). 9 tháng 4 2024. Truy cập 9 tháng 4 2024. Kiểm tra giá trị ngày tháng trong: |access-date= và |date= (trợ giúp)
^ “PEP 483 -- The Theory of Type Hints”. Python.org.
^ Phần mở rộng tệp .pyo đã bị loại bỏ trong Python 3.5. Xem PEP 0488
^ Holth, Moore (ngày 30 tháng 3 năm 2014). “PEP 0441 -- Improving Python ZIP Application Support”. Truy cập ngày 12 tháng 11 năm 2015.
^ “Starlark Language”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 25 tháng 5 năm 2019.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Truy cập ngày 22 tháng 3 năm 2007.
^ Kuchling, Andrew M. (ngày 22 tháng 12 năm 2006). “Interview with Guido van Rossum (July 1998)”. amk.ca. Bản gốc lưu trữ ngày 1 tháng 5 năm 2007. Truy cập ngày 12 tháng 3 năm 2012.
^ van Rossum, Guido (1993). “An Introduction to Python for UNIX/C Programmers”. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.
^ a b “Classes”. The Python Tutorial. Python Software Foundation. Truy cập ngày 20 tháng 2 năm 2012. It is a mixture of the class mechanisms found in C++ and Modula-3
^ Lundh, Fredrik. “Call By Object”. effbot.org. Bản gốc lưu trữ ngày 23 tháng 11 năm 2019. Truy cập ngày 21 tháng 11 năm 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.
^ Simionato, Michele. “The Python 2.3 Method Resolution Order”. Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers
^ Kuchling, A. M. “Functional Programming HOWTO”. Python v2.7.2 documentation. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (ngày 18 tháng 5 năm 2001). “PEP 255 – Simple Generators”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (ngày 2 tháng 9 năm 2004). “PEP 318 – Decorators for Functions and Methods”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 24 tháng 2 năm 2012.
^ “More Control Flow Tools”. Python 3 documentation. Python Software Foundation. Truy cập ngày 24 tháng 7 năm 2015.
^ “CoffeeScript borrows chained comparisons from Python”.
^ “Genie Language - A brief guide”. Truy cập ngày 28 tháng 12 năm 2015.
^ “Perl and Python influences in JavaScript”. www.2ality.com. ngày 24 tháng 2 năm 2013. Truy cập ngày 15 tháng 5 năm 2015.
^ Rauschmayer, Axel. “Chapter 3: The Nature of JavaScript; Influences”. O'Reilly, Speaking JavaScript. Bản gốc lưu trữ ngày 26 tháng 12 năm 2018. Truy cập ngày 15 tháng 5 năm 2015.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ Ring Team (ngày 4 tháng 12 năm 2017). “Ring and other languages”. ring-lang.net. ring-lang.
^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. tr. 3. ISBN 978-1-59059-881-8.
^ Lattner, Chris (ngày 3 tháng 6 năm 2014). “Chris Lattner's Homepage”. Chris Lattner. Truy cập ngày 3 tháng 6 năm 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.
^ Bài phỏng vấn Guido van Rossum [1].
^ “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal”. www.linuxjournal.com (bằng tiếng Anh).
^ “Python boss Guido van Rossum steps down after 30 years | TheINQUIRER”. theinquirer.net (bằng tiếng Anh). Bản gốc lưu trữ ngày 19 tháng 2 năm 2019. Truy cập ngày 25 tháng 8 năm 2018.
^ “About the Python Software Foundation”. Truy cập 28 tháng 8 năm 2019.
^ “Stack Overflow Developer Survey 2020”. Stack Overflow. Lưu trữ bản gốc ngày 2 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “The State of Developer Ecosystem in 2020 Infographic”. JetBrains: Developer Tools for Professionals and Teams (bằng tiếng Anh). Lưu trữ bản gốc ngày 1 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “index | TIOBE - The Software Quality Company”. www.tiobe.com. Lưu trữ bản gốc ngày 25 tháng 2 năm 2018. Truy cập ngày 2 tháng 2 năm 2021. Python has won the TIOBE programming language of the year award! This is for the fourth time in the history, which is a record! The title is awarded to the programming language that has gained most popularity in one year.
^ “PYPL PopularitY of Programming Language index”. pypl.github.io (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 3 năm 2017. Truy cập ngày 26 tháng 3 năm 2021.
^ a b Venners, Bill (13 tháng 1 năm 2003). “The Making of Python”. Artima Developer. Artima. Lưu trữ bản gốc ngày 1 tháng 9 năm 2016. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (29 tháng 8 năm 2000). “SETL (was: Lukewarm about range literals)”. Python-Dev (Danh sách thư). Lưu trữ bản gốc ngày 14 tháng 7 năm 2018. Truy cập ngày 13 tháng 3 năm 2011.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (20 tháng 1 năm 2009). “A Brief Timeline of Python”. The History of Python. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 20 tháng 1 năm 2009.
^ Fairchild, Carlie (12 tháng 7 năm 2018). “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life”. Linux Journal. Lưu trữ bản gốc ngày 13 tháng 7 năm 2018. Truy cập ngày 13 tháng 7 năm 2018.
^ “PEP 8100”. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 4 tháng 5 năm 2019.
^ “PEP 13 -- Python Language Governance”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 5 năm 2021. Truy cập ngày 25 tháng 8 năm 2021.
^ Kuchling, A. M.; Zadka, Moshe (16 tháng 10 năm 2000). “What's New in Python 2.0”. Python Software Foundation. Lưu trữ bản gốc ngày 23 tháng 10 năm 2012. Truy cập ngày 11 tháng 2 năm 2012.
^ “Python 3.0 Release”. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 8 tháng 7 năm 2009.
^ van Rossum, Guido (5 tháng 4 năm 2006). “PEP 3000 – Python 3000”. Python Enhancement Proposals. Python Software Foundation. Bản gốc lưu trữ ngày 3 tháng 3 năm 2016. Truy cập ngày 27 tháng 6 năm 2009.
^ “2to3 – Automated Python 2 to 3 code translation”. docs.python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 2 tháng 2 năm 2021.
^ Langa, Łukasz (19 tháng 2 năm 2021). “Python Insider: Python 3.9.2 and 3.8.8 are now available”. Python Insider. Lưu trữ bản gốc ngày 25 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “Red Hat Customer Portal - Access to 24x7 support and knowledge”. access.redhat.com. Lưu trữ bản gốc ngày 6 tháng 3 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-3177”. cve.mitre.org. Lưu trữ bản gốc ngày 27 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-23336”. cve.mitre.org. Lưu trữ bản gốc ngày 24 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ Langa, Łukasz (24 tháng 3 năm 2022). “Python Insider: Python 3.10.4 and 3.9.12 are now available out of schedule”. Python Insider. Lưu trữ bản gốc ngày 21 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (16 tháng 3 năm 2022). “Python Insider: Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (17 tháng 5 năm 2022). “Python Insider: Python 3.9.13 is now available”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 5 năm 2022. Truy cập ngày 21 tháng 5 năm 2022.
^ “Python Insider: Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available”. pythoninsider.blogspot.com. 7 tháng 9 năm 2022. Lưu trữ bản gốc ngày 13 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “CVE - CVE-2020-10735”. cve.mitre.org. Lưu trữ bản gốc ngày 20 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “What's New In Python 3.12”. Python documentation. Truy cập 26 tháng 11 năm 2023.
^ The Cain Gang Ltd. “Python Metaclasses: Who? Why? When?” (PDF). Bản gốc (PDF) lưu trữ ngày 30 tháng 5 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “3.3. Special method names”. The Python Language Reference. Python Software Foundation. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “PyDBC: method preconditions, method postconditions and class invariants for Python”. Lưu trữ bản gốc ngày 23 tháng 11 năm 2019. Truy cập ngày 24 tháng 9 năm 2011.
^ “Contracts for Python”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “PyDatalog”. Lưu trữ bản gốc ngày 13 tháng 6 năm 2020. Truy cập ngày 22 tháng 7 năm 2012.
^ “Extending and Embedding the Python Interpreter: Reference Counts” (bằng tiếng Anh). Docs.python.org. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 5 tháng 6 năm 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.
^ a b Hettinger, Raymond (30 tháng 1 năm 2002). “PEP 289 – Generator Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “6.5 itertools – Functions creating iterators for efficient looping”. Docs.python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 22 tháng 11 năm 2016.
^ “PEP 206 -- Python Advanced Library”. Python.org.
^ Peters, Tim (19 tháng 8 năm 2004). “PEP 20 – The Zen of Python”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 26 tháng 12 năm 2018. Truy cập ngày 24 tháng 11 năm 2008.
^ a b “Python Culture”. ebeab. 21 tháng 1 năm 2014. Bản gốc lưu trữ ngày 30 tháng 1 năm 2014.
^ “General Python FAQ”. Python v2.7.3 documentation. Docs.python.org. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 4 tháng 6 năm 2020.
^ “15 Ways Python Is a Powerful Force on the Web”. Bản gốc lưu trữ ngày 11 tháng 5 năm 2019. Truy cập ngày 3 tháng 7 năm 2018.
^ “8.18. pprint — Data pretty printer — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 22 tháng 1 năm 2021. Truy cập ngày 4 tháng 6 năm 2020.
^ Clark, Robert (26 tháng 4 năm 2019). “How to be Pythonic and why you should care”. Medium. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “Code Style — The Hitchhiker's Guide to Python”. docs.python-guide.org. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ Goodger, David. “Code Like a Pythonista: Idiomatic Python”. Bản gốc lưu trữ ngày 27 tháng 5 năm 2014. Truy cập ngày 24 tháng 3 năm 2009.
^ “How to think like a Pythonista”. Bản gốc lưu trữ ngày 23 tháng 3 năm 2018. Truy cập ngày 24 tháng 3 năm 2009.
^ “Is Python a good language for beginning programmers?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 21 tháng 3 năm 2007.
^ Guttag, John V. (12 tháng 8 năm 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.
^ a b “PEP 8 -- Style Guide for Python Code”. Python.org. Lưu trữ bản gốc ngày 17 tháng 4 năm 2019. Truy cập ngày 26 tháng 3 năm 2019.
^ “Highlights: Python 2.5”. Python.org. Lưu trữ bản gốc ngày 4 tháng 8 năm 2019. Truy cập ngày 20 tháng 3 năm 2018.
^ “division”. python.org. Lưu trữ bản gốc ngày 20 tháng 7 năm 2006. Truy cập ngày 30 tháng 7 năm 2014.
^ “PEP 0465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “Python 3.5.1 Release and Changelog”. python.org. Lưu trữ bản gốc ngày 14 tháng 5 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “What's New in Python 3.8”. Lưu trữ bản gốc ngày 8 tháng 6 năm 2020. Truy cập ngày 14 tháng 10 năm 2019.
^ “Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ “Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ van Rossum, Guido; Hettinger, Raymond (7 tháng 2 năm 2003). “PEP 308 – Conditional Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 13 tháng 3 năm 2016. Truy cập ngày 13 tháng 7 năm 2011.
^ “4. Built-in Types — Python 3.6.3rc1 documentation”. python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 1 tháng 10 năm 2017.
^ “5.3. Tuples and Sequences — Python 3.7.1rc2 documentation”. python.org. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 17 tháng 10 năm 2018.
^ a b “PEP 498 -- Literal String Interpolation”. python.org. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 8 tháng 3 năm 2017.
^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code (bằng tiếng Anh). No Starch Press. tr. 322. ISBN 978-1-59327-966-0. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 7 tháng 7 năm 2021.
^ “The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1”. Bản gốc lưu trữ ngày 26 tháng 10 năm 2012. Truy cập ngày 12 tháng 1 năm 2011.
^ “Type hinting for Python”. LWN.net. 24 tháng 12 năm 2014. Lưu trữ bản gốc ngày 20 tháng 6 năm 2019. Truy cập ngày 5 tháng 5 năm 2015.
^ “mypy - Optional Static Typing for Python”. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 28 tháng 1 năm 2017.
^ a b “15. Floating Point Arithmetic: Issues and Limitations — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 6 tháng 6 năm 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".
^ Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 237 – Unifying Long Integers and Integers”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ a b “Built-in Types”. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 3 tháng 10 năm 2019.
^ “PEP 465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 29 tháng 5 năm 2020. Truy cập ngày 3 tháng 7 năm 2018.
^ a b Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 238 – Changing the Division Operator”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 23 tháng 10 năm 2013.
^ “Why Python's Integer Division Floors”. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 25 tháng 8 năm 2010.
^ “round”, The Python standard library, release 3.2, §2: Built-in functions, lưu trữ bản gốc ngày 25 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ “round”, The Python standard library, release 2.7, §2: Built-in functions, lưu trữ bản gốc ngày 27 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ Beazley, David M. (2009). Python Essential Reference (ấn bản 4). tr. 66.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (ấn bản 2). tr. 206.
^ Batista, Facundo. “PEP 0327 -- Decimal Data Type”. Python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 26 tháng 9 năm 2015.
^ “What's New in Python 2.6 — Python v2.6.9 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 12 năm 2019. Truy cập ngày 26 tháng 9 năm 2015.
^ “10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke”. www.stat.washington.edu. Bản gốc lưu trữ ngày 31 tháng 5 năm 2020. Truy cập ngày 3 tháng 2 năm 2019.
^ Shell, Scott (17 tháng 6 năm 2014). “An introduction to Python for scientific computing” (PDF). Lưu trữ (PDF) bản gốc ngày 4 tháng 2 năm 2019. Truy cập ngày 3 tháng 2 năm 2019.
^ Piotrowski, Przemyslaw (tháng 7 năm 2006). “Build a Rapid Web Development Environment for Python Server Pages and Oracle”. Oracle Technology Network. Oracle. Lưu trữ bản gốc ngày 2 tháng 4 năm 2019. Truy cập ngày 12 tháng 3 năm 2012.
^ Batista, Facundo (17 tháng 10 năm 2003). “PEP 327 – Decimal Data Type”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 24 tháng 11 năm 2008.
^ Eby, Phillip J. (7 tháng 12 năm 2003). “PEP 333 – Python Web Server Gateway Interface v1.0”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “Modulecounts”. Modulecounts. 28 tháng 9 năm 2021. Lưu trữ bản gốc ngày 24 tháng 9 năm 2021. Truy cập ngày 28 tháng 9 năm 2021.
^ Enthought, Canopy. “Canopy”. www.enthought.com. Bản gốc lưu trữ ngày 15 tháng 7 năm 2017. Truy cập ngày 20 tháng 8 năm 2016.
^ “Mailman 3 Why aren't we allowing the use of C11? - Python-Dev - python.org”. mail.python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Issue 35473: Intel compiler (icc) does not fully support C11 Features, including atomics - Python tracker”. bugs.python.org. Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “4. Building C and C++ Extensions — Python 3.9.2 documentation”. docs.python.org. Lưu trữ bản gốc ngày 3 tháng 3 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Changelog — Python 3.9.0 documentation”. docs.python.org. Lưu trữ bản gốc ngày 7 tháng 2 năm 2021. Truy cập ngày 8 tháng 2 năm 2021.
^ “Download Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 8 tháng 12 năm 2020. Truy cập ngày 13 tháng 12 năm 2020.
^ “history [vmspython]”. www.vmspython.org. Lưu trữ bản gốc ngày 2 tháng 12 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “Download Python for Other Platforms”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 11 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “PyPy compatibility”. Pypy.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 3 tháng 12 năm 2012.
^ “speed comparison between CPython and Pypy”. Speed.pypy.org. Lưu trữ bản gốc ngày 10 tháng 5 năm 2021. Truy cập ngày 3 tháng 12 năm 2012.
^ “Application-level Stackless features — PyPy 2.0.2 documentation”. Doc.pypy.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 17 tháng 7 năm 2013.
^ “Python-for-EV3”. LEGO Education (bằng tiếng Anh). Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 17 tháng 4 năm 2019.
^ Yegulalp, Serdar (29 tháng 10 năm 2020). “Pyston returns from the dead to speed Python”. InfoWorld. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 26 tháng 1 năm 2021.
^ “cinder: Instagram's performance oriented fork of CPython” (bằng tiếng Anh). Lưu trữ bản gốc ngày 4 tháng 5 năm 2021. Truy cập ngày 4 tháng 5 năm 2021.
^ “Brython”. brython.info. Lưu trữ bản gốc ngày 3 tháng 8 năm 2018. Truy cập ngày 21 tháng 1 năm 2021.
^ “Transcrypt – Python in the browser”. transcrypt.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 8 năm 2018. Truy cập ngày 22 tháng 12 năm 2020.
^ “Transcrypt: Anatomy of a Python to JavaScript Compiler”. InfoQ. Lưu trữ bản gốc ngày 5 tháng 12 năm 2020. Truy cập ngày 20 tháng 1 năm 2021.
^ “Codon: Differences with Python”. Lưu trữ bản gốc ngày 25 tháng 5 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ Lawson, Loraine (14 tháng 3 năm 2023). “MIT-Created Compiler Speeds up Python Code”. The New Stack (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 4 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ “Nuitka Home | Nuitka Home”. nuitka.net (bằng tiếng Anh). Lưu trữ bản gốc ngày 30 tháng 5 năm 2020. Truy cập ngày 18 tháng 8 năm 2017.
^ Borderies, Olivier (24 tháng 1 năm 2019). “Pythran: Python at C++ speed !”. Medium. Lưu trữ bản gốc ngày 25 tháng 3 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Pythran — Pythran 0.9.5 documentation”. pythran.readthedocs.io. Lưu trữ bản gốc ngày 19 tháng 2 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Archived copy” (PDF). Lưu trữ (PDF) bản gốc ngày 18 tháng 4 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “google/grumpy”. 10 tháng 4 năm 2020. Lưu trữ bản gốc ngày 15 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020 – qua GitHub.
^ “Projects”. opensource.google. Lưu trữ bản gốc ngày 24 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ Francisco, Thomas Claburn in San. “Google's Grumpy code makes Python Go”. www.theregister.com. Lưu trữ bản gốc ngày 7 tháng 3 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “IronPython.net /”. ironpython.net. Lưu trữ bản gốc ngày 17 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ “Jython FAQ”. www.jython.org. Lưu trữ bản gốc ngày 22 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 tháng 6 năm 2000). “PEP 1 – PEP Purpose and Guidelines”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 19 tháng 4 năm 2011.
^ Cannon, Brett. “Guido, Some Guys, and a Mailing List: How Python is Developed”. python.org. Python Software Foundation. Bản gốc lưu trữ ngày 1 tháng 6 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Developer's Guide — Python Developer's Guide”. devguide.python.org. Lưu trữ bản gốc ngày 9 tháng 11 năm 2020. Truy cập ngày 17 tháng 12 năm 2019.
^ Hughes, Owen (24 tháng 5 năm 2021). “Programming languages: Why Python 4.0 might never arrive, according to its creator”. TechRepublic (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 7 năm 2022. Truy cập ngày 16 tháng 5 năm 2022.
^ “PEP 602 -- Annual Release Cycle for Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 6 tháng 11 năm 2019.
^ “Changing the Python release cadence [LWN.net]”. lwn.net. Lưu trữ bản gốc ngày 6 tháng 11 năm 2019. Truy cập ngày 6 tháng 11 năm 2019.
^ Norwitz, Neal (8 tháng 4 năm 2002). “[Python-Dev] Release Schedules (was Stability & change)”. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Buildbot”. Python Developer's Guide. Python Software Foundation. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “1. Extending Python with C or C++ — Python 3.9.1 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 6 năm 2020. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 623 -- Remove wstr from Unicode”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 3 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 634 -- Structural Pattern Matching: Specification”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 5 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ Prechelt, Lutz (14 tháng 3 năm 2000). “An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl” (PDF). Lưu trữ (PDF) bản gốc ngày 3 tháng 1 năm 2020. Truy cập ngày 30 tháng 8 năm 2013.
^ “Quotes about Python”. Python Software Foundation. Lưu trữ bản gốc ngày 3 tháng 6 năm 2020. Truy cập ngày 8 tháng 1 năm 2012.
^ “Organizations Using Python”. Python Software Foundation. Lưu trữ bản gốc ngày 21 tháng 8 năm 2018. Truy cập ngày 15 tháng 1 năm 2009.
^ “Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers”. Facebook for Developers (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 19 tháng 6 năm 2018.
^ “What Powers Instagram: Hundreds of Instances, Dozens of Technologies”. Instagram Engineering. 11 tháng 12 năm 2016. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 27 tháng 5 năm 2019.
^ “How we use Python at Spotify”. Spotify Labs (bằng tiếng Anh). 20 tháng 3 năm 2013. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 25 tháng 7 năm 2018.
^ GitHub - reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, lưu trữ bản gốc ngày 1 tháng 6 năm 2020, truy cập ngày 20 tháng 3 năm 2019
^ “Usage statistics and market share of Python for websites”. 2012. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 18 tháng 12 năm 2012.
^ Oliphant, Travis (2007). “Python for Scientific Computing”. Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 10 tháng 4 năm 2015.
^ Millman, K. Jarrod; Aivazis, Michael (2011). “Python for Scientists and Engineers”. Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 7 tháng 7 năm 2014.
^ Science education with SageMath, Innovative Computing in Science Education, Bản gốc lưu trữ ngày 15 tháng 6 năm 2020, truy cập ngày 22 tháng 4 năm 2019
^ “OpenCV: OpenCV-Python Tutorials”. docs.opencv.org. Lưu trữ bản gốc ngày 23 tháng 9 năm 2020. Truy cập ngày 14 tháng 9 năm 2020.
^ Dean, Jeff; Monga, Rajat; và đồng nghiệp (9 tháng 11 năm 2015). “TensorFlow: Large-scale machine learning on heterogeneous systems” (PDF). TensorFlow.org. Google Research. Lưu trữ (PDF) bản gốc ngày 20 tháng 11 năm 2015. Truy cập ngày 10 tháng 11 năm 2015.
^ Piatetsky, Gregory. “Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis”. KDnuggets. KDnuggets. Lưu trữ bản gốc ngày 15 tháng 11 năm 2019. Truy cập ngày 30 tháng 5 năm 2018.
^ “Who is using scikit-learn? — scikit-learn 0.20.1 documentation”. scikit-learn.org. Lưu trữ bản gốc ngày 6 tháng 5 năm 2020. Truy cập ngày 30 tháng 11 năm 2018.
^ Jouppi, Norm. “Google supercharges machine learning tasks with TPU custom chip”. Google Cloud Platform Blog. Lưu trữ bản gốc ngày 18 tháng 5 năm 2016. Truy cập ngày 19 tháng 5 năm 2016.
^ “Tkinter — Python interface to TCL/Tk”. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 9 tháng 6 năm 2023.
^ “Python Tkinter Tutorial”. 3 tháng 6 năm 2020. Lưu trữ bản gốc ngày 9 tháng 6 năm 2023. Truy cập ngày 9 tháng 6 năm 2023.
^ “Installers for GIMP for Windows - Frequently Asked Questions”. 26 tháng 7 năm 2013. Bản gốc lưu trữ ngày 17 tháng 7 năm 2013. Truy cập ngày 26 tháng 7 năm 2013.
^ “Python Setup and Usage”. Python Software Foundation. Lưu trữ bản gốc ngày 17 tháng 6 năm 2020. Truy cập ngày 10 tháng 1 năm 2020.
^ “4.0 New Features and Fixes”. LibreOffice.org. The Document Foundation. 2013. Lưu trữ bản gốc ngày 9 tháng 2 năm 2014. Truy cập ngày 25 tháng 2 năm 2013.
^ “Frequently asked questions”. Godot Engine documentation. Lưu trữ bản gốc ngày 28 tháng 4 năm 2021. Truy cập ngày 10 tháng 5 năm 2021.
^ Strachan, James (29 tháng 8 năm 2003). “Groovy – the birth of a new dynamic language for the Java platform”. Bản gốc lưu trữ ngày 5 tháng 4 năm 2007. Truy cập ngày 11 tháng 6 năm 2007.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Lưu trữ bản gốc ngày 2 tháng 5 năm 2020. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ “Modular Docs - Why Mojo🔥”. docs.modular.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.
^ Spencer, Michael (4 tháng 5 năm 2023). “What is Mojo Programming Language?”. datasciencelearningcenter.substack.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023.
^ Yegulalp, Serdar (16 tháng 1 năm 2017). “Nim language draws from best of Python, Rust, Go, and Lisp”. InfoWorld. Lưu trữ bản gốc ngày 13 tháng 10 năm 2018. Truy cập ngày 7 tháng 6 năm 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).
^ “An Interview with the Creator of Ruby”. Linuxdevcenter.com. Lưu trữ bản gốc ngày 28 tháng 4 năm 2018. Truy cập ngày 3 tháng 12 năm 2012.
Liên kết ngoài
Tìm hiểu thêm về
Python
tại các dự án liên quan
Tìm kiếm Commons	Tập tin phương tiện từ Commons
Tìm kiếm Wikiquote	Danh ngôn từ Wikiquote
Tìm kiếm Wikibooks	Tủ sách giáo khoa từ Wikibooks
Tìm kiếm Wikiversity	Tài nguyên học tập từ Wikiversity
Tìm kiếm Wikidata	Dữ liệu từ Wikidata
Trang chủ chính thức
Python Wiki
Tài liệu Python
Python Cheese Shop – Kho đựng phần mềm viết bằng Python; trước đây gọi là Python Package Index (PyPI)
xts
Ngôn ngữ lập trình
xts
Phần mềm tự do nguồn mở
Tiêu đề chuẩn Sửa dữ liệu tại Wikidata	
BNF: cb13560465c (data)GND: 4434275-5LCCN: sh96008834NKC: ph170668SUDOC: 051626225
Thể loại: Ngôn ngữ lập trình hướng đối tượngPython (ngôn ngữ lập trình)Phần mềm tự doNgôn ngữ lập trình giáo dụcPhát minh của Hà LanPhần mềm đa nền tảngNgôn ngữ lập trình đa mẫu hìnhNgôn ngữ lập trìnhHọ ngôn ngữ lập trình SmalltalkNgôn ngữ lập trình đồng thờiPhần mềm tự do đa nền tảngNgôn ngữ lập trình được nhập độngNgôn ngữ lập trình bậc caoNgôn ngữ lập trình đối sánh mẫu
Trang này được sửa đổi lần cuối vào ngày 28 tháng 12 năm 2023, 15:26.
Văn bản được phát hành theo Giấy phép Creative Commons Ghi công–Chia sẻ tương tự; có thể áp dụng điều khoản bổ sung. Với việc sử dụng trang web này, bạn chấp nhận Điều khoản Sử dụng và Quy định quyền riêng tư. Wikipedia® là thương hiệu đã đăng ký của Wikimedia Foundation, Inc., một tổ chức phi lợi nhuận.
Quy định quyền riêng tưGiới thiệu WikipediaLời phủ nhậnBộ Quy tắc Ứng xử ChungLập trình viênThống kêTuyên bố về cookiePhiên bản di độngWikimedia FoundationPowered by MediaWiki
Chuyển đổi chiều rộng nội dung giới hạn

Trình đơn chính

WikipediaBách khoa toàn thư mở
Tìm kiếm trên Wikipedia
Tìm kiếm
Tạo tài khoản
Đăng nhập

Công cụ cá nhân
Tính năng Tạo tài khoản · Hướng dẫn người mới · Quy định · Viết bài mới · Chỗ thử · Câu thường hỏi · Sách hướng dẫn · Dịch bài · Thêm chú thích · Thảo luận · Liên hệ quản lý
Tiêu chuẩn bài viết Đủ độ nổi bật, văn phong trung lập và có nguồn đáng tin cậy · Không spam quảng cáo · Không vi phạm bản quyền · Cẩm nang biên soạn
Đóng (mở lại bằng cách xóa cookie dismissASN1 trong trình duyệt)
Nội dung ẩn
Đầu
Lịch sử
Triết lý thiết kế và tính năng
Cú pháp
Hiện/ẩn mục Cú pháp
Thư viện
Môi trường phát triển
Các bản triển khai
Hiện/ẩn mục Các bản triển khai
Phát triển
Sự phổ biến
Sử dụng
Ảnh hưởng ngôn ngữ
Xem thêm
Tham khảo
Liên kết ngoài
Python (ngôn ngữ lập trình)

Bài viết
Thảo luận
Đọc
Sửa đổi
Sửa mã nguồn
Xem lịch sử

Công cụ
Bách khoa toàn thư mở Wikipedia
Python

Mẫu hình	Ngôn ngữ lập trình hướng đối tượng, lập trình câu lệnh, lập trình hàm, lập trình thủ tục, lập trình phản xạ
Thiết kế bởi	Guido van Rossum
Nhà phát triển	Python Software Foundation
Xuất hiện lần đầu	1991; 33 năm trước
Phiên bản ổn định	
3.12.3[1] Sửa đổi tại Wikidata / 9 tháng 4 2024
Kiểm tra kiểu	Vịt, động, mạnh
từ phiên bản 3.5:

dần dần[2]
Giấy phép	Giấy phép Python Software Foundation
Phần mở rộng tên tập tin	.py,.pyc,.pyd,.pyo (trước 3.5),[3] .pyw,.pyz (từ 3.5)[4]
Trang mạng	www.python.org
Các bản triển khai lớn
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Phương ngữ
Cython, RPython, Starlark[5]
Ảnh hưởng từ
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl, Smalltalk
Ảnh hưởng tới
Boo, Cobra, CoffeeScript,[16] D, F#, Falcon, Genie,[17] Go, Apache Groovy, JavaScript,[18][19] Julia,[20] Nim, Ring,[21] Ruby,[22] Swift[23]
Python (phát âm tiếng Anh: /ˈpaɪθɑːn/) là một ngôn ngữ lập trình bậc cao cho các mục đích lập trình đa năng, do Guido van Rossum tạo ra và lần đầu ra mắt vào năm 1991. Python được thiết kế với ưu điểm mạnh là dễ đọc, dễ học và dễ nhớ. Python là ngôn ngữ có hình thức rất sáng sủa, cấu trúc rõ ràng, thuận tiện cho người mới học lập trình và là ngôn ngữ lập trình dễ học; được dùng rộng rãi trong phát triển trí tuệ nhân tạo. Cấu trúc của Python còn cho phép người sử dụng viết mã lệnh với số lần gõ phím tối thiểu.[24] Vào tháng 7 năm 2018, van Rossum đã từ chức lãnh đạo trong cộng đồng ngôn ngữ Python sau 30 năm làm việc.[25][26]

Python hoàn toàn tạo kiểu động và dùng cơ chế cấp phát bộ nhớ tự động; do vậy nó tương tự như Perl, Ruby, Scheme, Smalltalk, và Tcl. Python được phát triển trong một dự án mã mở, do tổ chức phi lợi nhuận Python Software Foundation quản lý.[27]

Ban đầu, Python được phát triển để chạy trên nền Unix. Nhưng rồi theo thời gian, Python dần mở rộng sang mọi hệ điều hành từ MS-DOS đến Mac OS, OS/2, Windows, Linux và các hệ điều hành khác thuộc họ Unix. Mặc dù sự phát triển của Python có sự đóng góp của rất nhiều cá nhân, nhưng Guido van Rossum hiện nay vẫn là tác giả chủ yếu của Python. Ông giữ vai trò chủ chốt trong việc quyết định hướng phát triển của Python.

Python luôn được xếp hạng vào những ngôn ngữ lập trình phổ biến nhất.[28][29][30][31]


Guido van Rossum, nhà sáng lập ngôn ngữ Python.
Lịch sử
Bài chi tiết: Lịch sử Python
Python đã được Guido van Rossum tạo ra vào những năm 1980[32] tại Trung tâm Toán học – Tin học (Centrum Wiskunde & Informatica, CWI) ở Hà Lan như là một ngôn ngữ kế tục ngôn ngữ ABC – một ngôn ngữ được lấy cảm hứng từ SETL,[33] có khả năng xử lí ngoại lệ và giao tiếp với hệ điều hành Amoeba.[34] Nó bắt đầu được triển khai vào tháng 12 năm 1989.[35] Van Rossum đã tự mình gánh vác trách nhiệm cho dự án, với vai trò là nhà phát triển chính, cho đến ngày 12 tháng 7 năm 2018, khi ông thông báo rằng ông sẽ rời bỏ trách nhiệm của ông và cả danh hiệu "Nhà độc tài nhân từ cho cuộc sống" của Python, một danh hiệu mà cộng đồng Python đã trao tặng cho ông vì sự tận tụy lâu dài của ông với vai trò là người ra quyết định chính cho dự án.[36] Vào tháng 1 năm 2019, các nhà phát triển phần lõi Python đã bầu ra một "Hội đồng chèo lái" gồm năm thành viên để dẫn dắt dự án.[37][38]

Python 2.0 được ra mắt vào ngày 16 tháng 10 năm 2000, với nhiều tính năng mới mẻ, bao gồm một bộ dọn rác phát hiện theo chu kỳ và khả năng hỗ trợ Unicode.[39]

Python 3.0 được ra mắt vào ngày mùng 3 tháng 12 năm 2008. Đây là một phiên bản lớn của Python không tương thích ngược hoàn toàn.[40] Nhiều tính năng lớn của nó đã được chuyển mã ngược (backport) về loạt phiên bản Python 2.6.x và 2.7.x.[41] Các bản phát hành của Python 3 có đi kèm với công cụ 2to3, có tác dụng tự động hoá việc dịch mã Python 2 sang Python 3.[42]

Python 3.9.2 và 3.8.8 được xúc tiến[43] vì tất cả các phiên bản trước của Python (bao gồm cả 2.7)[44] gặp một số vấn đề bảo mật, có thể dẫn đến thực thị mã từ xa[45] và "đầu độc" bộ nhớ đệm.[46]

Trong năm 2022, Python 3.10.4 và 3.9.12 được xúc tiến[47] cùng với 3.8.13 và 3.7.13, nguyên nhân là do một vài vấn đề về bảo mật.[48] Khi Python 3.9.13 được phát hành vào tháng Năm năm 2022, loạt phiên bản 3.9 (cùng với loạt 3.8 và 3.7) được thông báo rằng sẽ chỉ nhận được các bản vá bảo mật trong tương lai.[49] Vào ngày 7 tháng Chín năm 2022, bốn bản cập nhật mới được phát hành do có khả năng xảy ra một cuộc tấn công từ chối dịch vụ: 3.10.7, 3.9.14, 3.8.14 và 3.7.14.[50][51]

Tính đến tháng 10 năm 2023, Python 3.12 là bản phát hành ổn định mới nhất. Một số thay đổi đáng chú ý từ bản 3.11 bao gồm các thay đổi về ngôn ngữ và thư viện chuẩn.[52]

Triết lý thiết kế và tính năng
Python là một ngôn ngữ lập trình đa mẫu hình, lập trình hướng đối tượng và lập trình cấu trúc được hỗ trợ hoàn toàn, và nhiều tính năng của nó cũng hỗ trợ lập trình hàm và lập trình hướng khía cạnh (bao gồm siêu lập trình[53] và siêu đối tượng (phương thức thần kỳ)).[54] Các mẫu hình khác cũng được hỗ trợ thông qua các phần mở rộng, bao gồm thiết kế theo hợp đồng[55][56] và lập trình logic.[57]

Python sử dụng kiểu động và một dạng kết hợp giữa đếm tham chiếu và bộ dọn rác kiểm tra theo chu kì để quản lí bộ nhớ.[58] Nó cũng có tính năng phân giải tên động (liên kết muộn), cho phép liên kết các tên biến và phương thức trong quá trình thực thi chương trình.

Thiết kế của Python cung cấp một số tính năng cho lập trình hàm giống như trong ngôn ngữ Lisp. Python có các hàm filter, map và reduce; thông hiểu danh sách (list comprehension), từ điển (dictionary), tập hợp (set), và các biểu thức bộ sinh (generator).[59] Thư viện chuẩn cũng có hai mô đun (itertools và functools) triển khai các công cụ hàm được vay mượn từ Haskell và Standard ML.[60]

Triết lý căn bản của ngôn ngữ Python được trình bày trong tài liệu The Zen of Python (PEP 20), có dạng thơ Haiku, tóm gọn như sau:

Đẹp đẽ tốt hơn xấu xí
Minh bạch tốt hơn ngầm định
Đơn giản tốt hơn phức tạp
Phức tạp tốt hơn rắc rối
Tính dễ đọc rất quan trọng.
Thay vì tích hợp hết tất cả các tính năng vào phần cốt lõi, Python được thiết kế để dễ dàng mở rộng (bằng các mô đun). Tính mô đun nhỏ gọn này đã làm cho Python trở nên phổ biến như là một cách thêm các giao diện lập trình được vào các ứng dụng hiện có. Tầm nhìn của Van Rossum về một ngôn ngữ có phần lõi nhỏ với một thư viện chuẩn rộng lớn và một trình thông dịch dễ dàng mở rộng bắt nguồn từ việc ông nản lòng trước ABC, một ngôn ngữ lập trình tán thành hướng tiếp cận ngược lại.[32] Python thường được mô tả là một ngôn ngữ "tặng kèm pin" nhờ vào thư viện chuẩn bao quát của nó.[61]

Python nỗ lực hướng đến một cú pháp đơn giản hơn, gọn gàng hơn trong khi vẫn cho các nhà phát triển lựa chọn phương pháp viết mã của họ. Đối lập với khẩu hiệu "có nhiều hơn một cách để làm việc này," triết lý thiết kế của Python lại nằm trong châm ngôn "chỉ nên có một— và tốt nhất là chỉ một—cách rõ ràng để làm việc này".[62] Alex Martelli, một Viện sĩ (Fellow) tại Tổ chức Phần mềm Python (Python Software Foundation) và là một tác giả viết sách Python, viết rằng "Mô tả một thứ gì đó là "tài tình" không được coi là một lời khen ngợi trong văn hoá Python."[63]

Các nhà phát triển Python nỗ lực tránh xa việc tối ưu hoá quá sớm và không chấp nhận các bản vá không cải thiện đáng kể tốc độ mà lại làm mất đi tính rõ ràng lên những phần không thiết yếu của bản triển khai tham khảo CPython.[63] Khi cần đến tốc độ, một lập trình viên Python có thể di chuyển các hàm bị giới hạn về thời gian sang các mô đun mở rộng được viết bằng những ngôn ngữ như C, hoặc sử dụng PyPy, một trình biên dịch tức thời. Cython cũng có thể được dùng để phiên dịch một tập lệnh Python sang C và tạo ra các lệnh gọi API ở cấp độ của C trực tiếp vào trình thông dịch Python.

Mục tiêu mà các nhà phát triển Python hướng đến là đem đến niềm vui khi sử dụng ngôn ngữ này. Điều này được thể hiện qua bản thân cái tên – một sự tôn vinh dành cho nhóm hài người Anh Monty Python[64] – và trong một số cách tiếp cận thi thoảng vui tươi trong hướng dẫn và các tài liệu tham khảo, chẳng hạn như một vi dụ có đề cập đến trứng và spam (gợi nhắc đến một tiểu phẩm trong Monty Python) thay cho foo và bar tiêu chuẩn.[65][66]

Một từ ngữ mới phổ biến trong cộng đồng Python là pythonic (đậm chất Python), một từ có thể có nhiều ý nghĩa liên quan đến phong cách lập trình. Nói rằng một phần mã nào đó là pythonic tức là phần mã đó sử dụng tốt các thành ngữ Python, trông tự nhiên hoặc trôi chảy về ngôn ngữ, phù hợp với triết lý tối giản của Python và nhấn mạnh vào tính dễ đọc. Ngược lại, những phần mã khó hiểu hoặc trông như một bản dịch thô từ một ngôn ngữ lập trình khác được gọi là unpythonic (không đậm chất Python).[67][68]

Những người sử dụng và say mê Python, nhất là những người được cho là am hiểu hay có nhiều kinh nghiệm, thường được gọi là các Pythonista.[69][70]

Cú pháp
Bài chi tiết: Cú pháp Python
Python là một ngôn ngữ dễ đọc, dễ hiểu. Định dạng của nó rất gọn gàng về mặt trực quan, và nó thường sử dụng các từ khoá tiếng Anh trong khi các ngôn ngữ khác lại sử dụng các dấu câu. Khác với nhiều ngôn ngữ khác, nó không sử dụng các dấu ngoặc nhọn để giới hạn các khối lệnh, và dấu chấm phẩy cuối câu lệnh rất ít khi được sử dụng dù không bị cấm. Nó có ít ngoại lệ cú pháp và trường hợp đặc biệt hơn C và Pascal.[71]

Thụt lề
Python sử dụng thụt lề bằng khoảng trắng hoặc ký tự tab thay vì dùng ngoặc nhọn hay các từ khoá để giới hạn khối lệnh. Lề thường được thụt vào sau một câu lệnh và thụt ra để đánh dấu kết thúc khối lệnh hiện tại. Cho nên, cấu trúc trực quan của chương trình sẽ thể hiện một cách chính xác cấu trúc ngữ nghĩa của chương trình đó.[72] Tính năng này thỉnh thoảng cũng được gọi là "quy tắc việt vị", một quy tắc cũng xuất hiện ở một số ngôn ngữ; nhưng trong phần lớn ngôn ngữ thì thụt lề không phụ thuộc vào cú pháp. Cỡ thụt lề được khuyến cáo là bốn dấu cách.[73]

Câu lệnh và luồng điều khiển
Một số câu lệnh trong Python gồm có:

Câu lệnh gán, sử dụng một dấu bằng =.
Câu lệnh if: thực thi một khối lệnh nếu thoả mãn điều kiện, sử dụng cùng với else và elif (viết tắt của else-if).
Câu lệnh for: lặp qua một đối tượng lặp được, gán mỗi phần tử và một biến cục bộ để sử dụng trong khối lệnh của vòng lặp.
Câu lệnh while: thực thi một khối lệnh chừng nào điều kiện còn đúng.
Câu lệnh try: cho phép bắt ngoại lệ được nâng lên (raise) trong khối lệnh và dùng vế except để xử lý; câu lệnh cũng đảm bảo rằng phần mã dọn dẹp trong khối finally sẽ được chạy dù có lỗi hay không.
Câu lệnh raise: được dùng để nâng một ngoại lệ hoặc nâng lại một ngoại lệ đã được bắt từ trước.
Câu lệnh class: thực thi một khối lệnh và gắn không gian tên cục bộ của nó vào một lớp, để dùng trong lập trình hướng đối tượng.
Câu lệnh def: định nghĩa một hàm hoặc phương thức.
Câu lệnh with: bao bọc một khối lệnh bằng một bộ quản lí ngữ cảnh (context manager) (ví dụ như khoá luồng lại trước khi chạy mã rồi mở khoá, hoặc mở một tệp rồi đóng tệp lại), cho phép các hành vi kiểu RAII (sự đạt được tài nguyên là sự khởi tạo) và thay thể cho các câu lệnh try/finally thường thấy.[74]
Câu lệnh break: thoát ra khỏi vòng lặp.
Câu lệnh continue: bỏ qua lần lặp này và tiếp tục với mục kế tiếp.
Câu lệnh del: loại bỏ một biến, tức là tham chiếu từ tên đến giá trị sẽ bị xoá và cố gắng sử dụng biến đó sẽ gây lỗi. Một biến đã bị xoá có thể được gán lại.
Câu lệnh pass: đóng vai trò như là một dạng NOP. Câu lệnh này được dùng để tạo các khối lệnh rỗng.
Câu lệnh assert: được dùng trong khi gỡ lỗi để kiểm tra điều kiện nên đúng.
Câu lệnh yield: trả lại giá trị từ một hàm bộ sinh; bản thân yield cũng là một toán tử. Dạng này được dùng để triển khai các đồng thường trình.
Câu lệnh return: trả lại một giá trị từ một hàm hay phương thức.
Câu lệnh import: được dùng để nhập các mô đun chứa các hàm và biến được sử dụng trong chương trình hiện tại.
Câu lệnh gán (=) hoạt động bằng cách liên kết một tên dưới dạng một tham chiếu với một đối tượng được cấp phát động riêng lẻ. Các biến có thể được dùng lại bất cứ lúc nào với bất cứ đối tượng nào. Trong Python, một tên biến chỉ giữ tham chiếu một cách chung chung và không có kiểu dữ liệu cố định đi kèm. Tuy nhiên, tại một thời điểm nhất định, một biến sẽ tham chiếu đến một vài đối tượng có kiểu. Nó được gọi là kiểu động, ngược lại với các ngôn ngữ lập trình kiểu tĩnh với mỗi biến chỉ có thể chứa giá trị của một kiểu nhất định.

Biểu thức
Một số biểu thức trong Python tương tự như những biểu thức trong những ngôn ngữ khác chẳng hạn như C và Java, trong khi số khác thì không:

Phép cộng, trừ và nhân thì đều giống nhau, nhưng hành vi của phép chia thì khác nhau. Có hai loại phép chia trong Python: phép chia phần nguyên (phép chia số nguyên) dùng dấu // và phép chia dấu phẩy động dùng dấu /.[75] Python cũng sử dụng toán tử ** cho phép luỹ thừa.
Từ Python 3.5, toán tử trung tố @ mới đã được giới thiệu. Nó được thiết kể để được sử dụng trong các thư viện như NumPy để nhân ma trận.[76][77]
Từ Python 3.8, cú pháp :=, hay "toán tử moóc" đã được giới thiệu. Nó gán giá trị vào biến trong một phần của một biểu thức lớn hơn.[78]
Trong Python, == so sánh theo giá trị, khác với Java, vốn so sánh các số theo giá trị[79] và các đối tượng theo tham chiếu.[80] (So sánh giá trị trong Java có thể được thực hiện bằng phương thức equals().) Toán tử is của Python có thể được dùng để so sánh danh tính của đối tượng (so sánh theo tham chiếu). Trong Python, các phép so sánh có thể được xâu chuỗi lại với nhau, ví dụ như a <= b <= c.
Python sử dụng các từ khoá and, or, not để so sánh luận lý (boolean) thay vì dùng các loại biểu tượng &&, ||, ! được dùng trong Java và C.
Python có một loại biểu thức được gọi là thông hiểu danh sách (list comprehension) cũng như một loại biểu thức chung được gọi là biểu thức bộ sinh (generator expression).[59]
Các hàm vô danh được triển khai thông qua các biểu thức lambda; tuy nhiên, phần thân của hàm vô danh chỉ có thể là đúng một biểu thức.
Biểu thức điều kiện trong Python được viết dưới dạng x if c else y[81] (có sự khác biệt về trật tự của các toán hạng so với toán tử c ? x : y thường có trong những ngôn ngữ khác).
Có sự phân biệt giữa danh sách và bộ trong Python. Danh sách được viết dưới dạng [1, 2, 3], biển đổi được, và không thể được dùng như khoá cho từ điển (các khoá từ điển phải là bất biến trong Python). Bộ được viết dưới dạng (1, 2, 3), không biến đổi được nên có thể được dùng làm khoá của từ điển, với điều kiện là tất cả các phần tử trong bộ cũng phải là bất biến. Toán tử + có thể được sử dụng để nối liền hai bộ lại với nhau, như không trực tiếp thay đổi nội dung của chúng, mà sẽ tạo ra một bộ mới chứa các phần tử của cả hai bộ ban đầu. Vì vậy, cho một biến t ban đầu bằng (1, 2, 3), chạy lệnh t = t + (4, 5) sẽ thực thì t + (4, 5) đầu tiên, tạo ra (1, 2, 3, 4, 5), rồi mới được gán lại cho t, bằng cách đó đã "chỉnh sửa nội dung" của t một cách hiệu quả, trong khi vẫn tuân theo bản chất bất biến của đối tượng bộ. Trong các ngữ cảnh không mơ hồ thì dấu ngoặc đơn là không cần thiết.[82]
Python có một tính năng là tháo tách chuỗi (sequence unpacking) trong đó các biểu thức, mà mỗi biểu thức được đánh giá thành bất kì thứ gì có thể được gán vào (một biến, một thuộc tính viết được...), được liên kết theo cùng một cách với các bộ ban đầu đó và được đặt vào vế bên trái dấu bằng trong một câu lệnh gán. Câu lệnh này mong đợi một một đối tượng lặp được (iterable) ở vế bên phải dấu bằng tạo ra cùng một số lượng giá trị giống như ở các biểu thức trước đó khi đã và sẽ lặp qua, rồi gán mỗi giá trị được tạo ra bằng các biểu thức tương ứng ở vế bến trái.[83]
Python có một toán tử "định dạng xâu" là %. Chức năng này tương tự như định dạng xâu printf trong C, thí dụ như "spam=%s eggs=%d" % ("blah", 2) được đánh giá thành "spam=blah eggs=2". Trong Python 3 và 2.6+, chức năng này được bổ sung bằng phương thức format() của lớp str, ví dụ như "spam={0} eggs={1}".format("blah", 2). Python 3.6 đã bổ sung thêm "f-string": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}'.[84]
Các xâu trong Python có thể được ghép móc với nhau bằng cách "cộng" chúng lại (dùng cùng toán tử với phép cộng số nguyên và số phẩy động). Thí dụ, "spam" + "eggs" cho ra "spameggs". Kể cả nếu xấu chứa số, chúng vẫn sẽ được ghép móc thành xâu thay vì số nguyên. Thí dụ, "2" + "2" cho ra"22".
Python có nhiều kiểu hằng xâu khác nhau:
Xâu được phân cách bởi dấu nháy đơn hoặc nháy kép. Khác với hệ vỏ Unix, Perl và các ngôn ngữ ảnh hưởng từ Perl, dấu nháy đơn và dấu nháy kép có cùng chức năng. Cả hai loại xâu đều dùng dấu chéo ngược (\) làm ký tự thoát (escape character). Nội suy xâu đã được thêm vào kể từ Python 3.6 với tên gọi "hằng xâu được định dạng".[84]
Xâu ba dấu nháy: bắt đầu và kết thúc bằng ba dấu nháy đơn hoặc kép. Chúng có thể trải dài trên nhiều dòng giống như trong tài liệu đây (here document) trong các hệ vỏ, Perl và Ruby.
Các loại xâu thô, được kí hiệu bằng cách đặt trước hằng xâu một kí tự r. Các chuỗi thoát sẽ không bị thông dịch; cho nên xâuthô khá là hữu ích khi xâu có chứa nhiều dấu chéo ngược, chẳng hạn như biểu thức chính quy và đường dẫn tệp trên Windows.
Python có các biểu thức chỉ số mảng và cắt lát mảng đối với danh sách, được kí hiệu là a[khoá], a[đầu:cuối] hay a[đầu:cuối:bước]. Các chỉ số được đánh từ số không, và chỉ số âm sẽ chỉ lùi từ cuối lên. Việc cắt lát sẽ lấy các phần tử từ đầu cho đến chỉ số cuối (không kể chỉ số cuối). Tham số cắt lát thứ ba, được gọi là bước, cho phép các phần tử có thể được bỏ qua hoặc đảo chiều. Chỉ số lát có thể được bỏ trống, ví dụ a[:]trả lại một bản sao của danh sách đó. Mỗi phần tử trong một lát là một bản sao nông.
Trong Python các biểu thức và câu lệnh được phân biệt một cách vững chắc, ngược lại với các ngôn ngữ như Common Lisp, Scheme, hay Ruby. Điều này đã dẫn tới nhiều biểu thức và câu lệnh có cùng chức năng. Thí dụ:

Thông hiểu danh sách và vòng lặp for
Biểu thức điều kiện và khối lệnh if
Hàm eval() (đánh giá các biểu thức) và exec() (thực thi các câu lệnh); trong Python 2, exec là một câu lệnh.
Câu lệnh không thể nằm trong biểu thức, vậy nên các loại thông hiểu (gồm cả danh sách) và biểu thức lambda, vốn là các biểu thức, không thể chứa các câu lệnh. Một trường hợp cụ thể là một câu lệnh gán chẳng hạn như a = 1 không thể là một phần của biểu thức điều kiện của một câu lệnh điều kiện. Điều này sẽ giúp tránh được các lỗi viết sai toán tử bằng == bằng toán tử gán = trong câu điều kiện thường thấy ở C. Ví dụ, if (c = 1) { ... } là một đoạn mã C hợp lệ (nhưng chắc là không đúng ý) còn if c = 1: ... sẽ báo lỗi cú pháp trong Python.

Phương thức
Phương thức của đối tượng là một hàm đi kèm với lớp của đối tượng đó. Cú pháp hiện_thể.phương_thức(đối số), đối với các hàm và phương thức bình thường, thức chất là dạng cú pháp đặc biệt của Lớp.phương_thức(hiện_thể, đối số). Các phương thức trong Python có một tham số self được dùng để truy cập dữ liệu của hiện thể (instance), ngược lại với biến bản thân (self haythis) trong một số ngôn ngữ lập trình hướng đối tượng khác (C++, Java, Objective-C, hay Ruby). Ngoại trừ điều này, Python cũng cung cấp các phương thức gạch dưới (do tên của chúng bắt đầu và kết thúc bằng hai dấu gạch dưới), cho phép các lớp do người dùng định nghĩa thay đổi cách các lớp này được xử lý bởi các thao tác của Python chẳng hạn như lấy chiều dài, so sánh, tính toán số học, chuyển đổi kiểu...[85]

Kiểu dữ liệu

Cấp bậc kiểu tiêu chuẩn trong Python 3
Python sử dụng định kiểu vịt (duck typing) và có các đối tượng có kiểu nhưng tên biến thì không có kiểu. Giới hạn về kiểu không được kiểm tra trong lúc biên dịch; thay vào đó. các thao tác lên một đối tượng có thể thất bại, chỉ ra rằng đối tượng đó không thuộc vào kiểu dữ liệu phù hợp. Tuy là định kiểu động, Python cũng định kiểu mạnh khi không cho phép các thao tác mà không được định nghĩa rõ ràng (chẳng hạn như cộng một số vào một xâu) thay vì lặng lẽ cố gắng diễn giải thao tác đó.

Python cho phép các lập trình viên định nghĩa các kiểu của riêng họ bằng cách sử dụng lớp, thường được dùng trong lập trình hướng đối tượng. Các hiện thể của một lớp thường được tạo ra bằng cách gọi lớp đó (chẳng hạn như SpamClass() hay EggsClass()), các lớp lại là hiện thể của siêu lớp type (bản thân nó cũng là một hiện thể của chính nó), cho phép siêu lập trình và phản xạ.

Trước phiên bản 3.0, Python có hai loại lớp là kiểu cũ và kiểu mới.[86] Cú pháp của cả hai kiểu đều giống nhau. Sự khác biệt nằm ở chỗ lớp đó có kế thừa từ lớp object một cách trực tiếp hoặc gián tiếp hay không (tất cả các lớp kiểu mới đều kế thừa từ object và là hiện thể của type). Từ phiên bản Python 2.2 trở đi, cả hai loại lớp đều có thể được sử dụng. Lớp kiểu cũ đã bị loại bỏ trong Python 3.0.

Kế hoạch dài hạn là hỗ trợ định kiểu dần dần[87] và từ Python 3.5, cú pháp của ngôn ngữ này cho phép chỉ rõ các kiểu tĩnh nhưng chúng lại không được kiểm tra trong bản triển khai mặc định, CPython. Một trình kiểm tra kiểu tĩnh đang trong quá trình thử nghiệm và tuỳ chọn tên là mypy có hỗ trợ kiểm tra kiểu trong thời gian biên dịch.[88]

Tóm tắt các kiểu dữ liệu có sẵn trong Python 3
Kiểu	Thay đổi được	Mô tả	Ví dụ cú pháp
bool	không	Kiểu dữ liệu luận lý	TrueFalse
bytearray	có	Chuỗi các byte nối tiếp	bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes	không	Chuỗi các byte nối tiếp	b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex	không	Số phức với phần thực và phần ảo	3+2.7j3 + 2.7j
dict	có	Mảng liên kết (hay từ điển) các cặp khoá và giá trị; có thể chứa lẫn lộn nhiều kiểu (khoá và giá trị), khoá phải là loại băm được	{'key1': 1.0, 3: False}{}
ellipsisa	không	Một kiểu giữ chỗ chấm lửng được dùng như một chỉ số trong một mảng NumPy	...Ellipsis
float	không	Số phẩy động độ chính xác đôi. Độ chính xác phụ thuộc vào từng máy nhưng trên thực tế thì nó thường được triển khai là một số IEEE 754 64-bit với độ chính xác là 53 bit.[89]	1.33333
frozenset	không	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	frozenset([4.0, 'string', True])
int	không	Số nguyên với độ lớn không giới hạn[90]	42
list	có	Danh sách, có thể chứa lẫn lộn nhiều kiểu	[4.0, 'string', True][]
NoneTypea	không	Một đối tượng đại diện cho sự không có mặt của dữ liệu, tương đương với null trong các ngôn ngữ khác	None
NotImplementedTypea	không	Một kiểu giữ chỗ có thể được trả lại từ toán tử nạp chồng để biểu thị kiểu toán hạng không được hỗ trợ.	NotImplemented
range	không	Một chuỗi các số thường được dùng để lặp với số lần biết trước trong vòng lặpfor[91]	range(-1, 10)range(10, -5, -2)
set	có	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	{4.0, 'string', True}set()
str	không	Một xâu ký tự (string): chuỗi các điểm mã Unicode	'Wikipedia'"Wikipedia"
"""Trải dài trên
nhiều
dòng"""
tuple	không	Bộ; có thể chứa lẫn lộn nhiều kiểu	(4.0, 'xâu kí tự', True)('phần tử',)()
^a Không thể được truy cập trực tiếp bằng tên

Phép tính số học
Python có các kí hiệu thường dùng cho các toán tử số học (+, -, *, /), toán tử chia sàn // và toán tử chia lấy dư % (số dư có thể âm, chẳng hạn như 4 % -3 == -2). Nó cũng có toán tử ** cho phép luỹ thừa, chẳng hạn như 5**3 == 125 và 9**0.5 == 3.0, và toán tử nhân ma trận @.[92] Các toán tử này hoạt động giống như trong toán học truyền thống, với cùng thứ tự tính toán, toán tử trung tố (+ và - cũng có thể làm toán tử một ngôi để biểu diễn số dương và số âm một cách tương ứng).

Phép chia giữa các số nguyên tạo ra kết quả là số phẩy động. Hành vi của phép chia đã thay đổi đáng kể theo thời gian:[93]

Python hiện tại (kể từ 3.0) thay đổi / thành phép chia số phẩy động, ví dụ: 5/2 == 2.5.
Python 2.2 đã thay đổi phép chia số nguyên để nó làm tròn về phía âm vô cực, ví dụ 7/3 == 2 và -7/3 == -3. Toán tử chia sàn // đã được giới thiệu. Cho nên 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 và -7.5//3 == -3.0. Thêm from __future__ import division sẽ làm cho một mô đun sử dụng quy tắc chia của Python 3.0.
Python 2.1 về trước sử dụng hành vi chia kiểu C. Toán tử / là phép chia nguyên nếu cả hai toán hạng là số nguyên, nếu không thì là phép chia số phẩy động. Phép chia nguyên làm tròn về 0, ví dụ 7/3 == 2 và -7/3 == -2.
Trong thuật ngữ Python, / là phép chia đúng (gọi tắt là phép chia), và // là phép chia sàn. Toán tử / trước phiên bản 3.0 là phép chia cổ điển.[93]

Việc làm tròn về phía âm vô cực, dù khác biết so với những ngôn ngữ khác, đem lại sự chắc chắn. Ví dụ, phương trình (a + b)//b == a//b + 1 là luôn đúng. Còn phương trình b*(a//b) + a%b == a thì hợp lệ với cả giá trị a dương và âm. Tuy nhiên, duy trì tính hợp lệ của phương trình này cũng đồng nghĩa răng trong khi kết quả của a%b là, đúng như mong đợi, nằm trong nửa khoảng mở [0, b), với b là một số nguyên dương, nó cũng cần phải nằm trong khoảng (b, 0] khi b âm.[94]

Python cung cấp một hàm round để làm tròn một số phẩy động thành số nguyên gần nhất. Để gỡ hoà (với những số có chữ số cuối là 5), Python 3 sử dụng làm tròn thành số chẵn: round(1.5) và round(2.5) đều là 2.[95] Các phiên bản trước 3 làm tròn xa số không: round(0.5) là 1.0, round(-0.5) là −1.0.[96]

Python cho phép sử dụng các biểu thức luận lý với nhiều quan hệ băng nhau theo một cách đồng nhất với cách dùng chung trong toán học. Thí dụ, biểu thức a < b < c kiểm tra xem a có nhỏ hơn b và b có nhỏ hơn c hay không.[97] Các ngôn ngữ dựa trên C sẽ hiểu biểu thức trên khác đi: trong C, biểu thức trên sẽ đánh giá a < b trước tiên, cho ra kết quả 0 hoặc 1, rồi kết quả đó mới được so sánh với c.[98]

Python sử dụng số học có độ chính xác tuỳ ý cho tất cả các thao tác với số nguyên. Kiểu/Lớp Decimal trong mô đun decimal cung cấp số dấu phẩy động thập phân với một độ chính xác tuỳ ý được định trước và một vài chế độ làm tròn.[99] Lớp Fraction trong mô đun fractions cung cấp độ chính xác tuỳ ý cho số hữu tỉ.[100]

Nhờ thư viện toán học rộng lớn của Python và thư viện bên thứ ba NumPy với nhiều tính năng hơn nữa, Python thường được dùng như một ngôn ngữ kịch bản để giải quyết các vấn đề chẳng hạn như thao tác và xử lí dữ liệu số.[101][102]

Chú thích
# dòng chú thích
In giá trị
# Từ Python 3
print((7 + 8) / 2.0)
print((2 + 3j) * (4 - 6j))
Nội suy xâu (string interpolation)

print("Hello {}!".format("world"))
print("a = {.2f} và b = {.2f}".format(a,b))
Cấu trúc rẽ nhánh
Dạng 1:
if biểu_thức_điều_kiện:
    # lệnh...
Dạng 2:
if biểu_thức_điều_kiện:
    # lệnh...
else:
    # lệnh...
Dạng 3:
if biểu_thức_điều_kiện_1:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là đúng/true)
elif biểu_thức_điều_kiện_2:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là sai/false, nhưng biểu_thức_điều_kiện_2 là đúng/true)
else:
    # lệnh... (được thực hiện nếu tất cả các biểu thức điều kiện đi kèm if và elif đều sai)
Khớp theo mẫu, được thêm vào từ bản 3.10.0:
match biến_1:
    case điều_kiện_1:
        #được thực hiện nếu biến_1 = điều_kiện_1
    case điều_kiện_2:
        #được thực hiện nếu biến_1 = điều_kiện_2
Cấu trúc lặp
while biểu_thức_đúng:
    # lệnh...
for phần_tử in dãy:
    # lệnh...
L = ["Hà Nội", "Hải Phòng", "TP Hồ Chí Minh"]
for thành_phố in L:
    print(thành_phố)

for i in range(10):
    print(i)
Hàm
def tên_hàm (tham_biến_1, tham_biến_2, tham_biến_n):
    # lệnh...
    return giá_trị_hàm
Hàm với tham số mặc định:

def luỹ_thừa(x, n=2):
   """Lũy thừa với số mũ mặc định là 2"""
   return x**n

print(luỹ_thừa(3))   # 9
print(luỹ_thừa(2,3)) # 8
Lớp
class Lớp:
    #...

class LớpCon(Lớp):
    """LớpCon kế thừa lớp Lớp"""
    x = 3  # biến thành viên của lớp
    #
    def phương_thức(self, tham_biến):
        #...

# khởi tạo
a = LớpCon()
print(a.x)
print(a.phương_thức(m))  # m là giá trị gán cho tham biến
Xử lý ngoại lệ
try:
    câu_lệnh
except Loại_Lỗi:
    thông báo lỗi
Thư viện
Bộ thư viện chuẩn rộng lớn của Python – một trong những điểm mạnh lớn nhất của Python[103] – cung cấp các công cụ phù hợp cho nhiều công việc khác nhau. Với các ứng dụng giao tiếp với Internet, nhiều giao thức và định dạng chuẩn chẳng hạn như MIME and HTTP được hỗ trợ. Nó cũng có chứa các mô đun đành cho việc tạo lập giao diện người dùng đồ hoạ, kết nối với cơ sở dữ liệu quan hệ, sinh số giả ngẫu nhiên, tính toán với số thập phân có độ chính xác tuỳ ý,[104] thao tác với biểu thức chính quy và kiểm thử đơn vị.

Một số phần của thư viện chuẩn nằm trong đặc tả (ví dụ, Giao diện Cổng vào Máy chủ Web (Web Server Gateway Interface hay WSGI) triển khai wsgiref theo PEP 333[105]), nhưng phần lớn mô đun thì không. Chúng được xác định dựa vào mã, tài liệu bên trong và bộ kiểm thử (test suite) của chúng. Tuy nhiên, vì phần lớn thư viện chuẩn là mã Python đa nền tảng, chỉ một vài mô đun cần được chỉnh sửa hoặc viết lại cho các bản triển khai khác nhau.

Tính đến tháng 9 năm 2021, Python Package Index (PyPI), kho chính thức dành cho các phần mềm Python bên thứ ba, có chứa hơn 329.000[106] gói với nhiều chức năng đa dạng và phong phú, bao gồm:
Tự động hoá
Phân tích dữ liệu
Cơ sở dữ liệu
Tài liệu
Giao diện người dùng đồ hoạ
Xử lý hình ảnh
Học máy
Ứng dụng di động
Đa phương tiện
Mạng máy tính
Khoa học tính toán
Quản trị hệ thống
Kiểm thử tự động
Xử lí văn bản
Bộ khung mạng
Thu thập web
Môi trường phát triển
Xem thêm: So sánh các môi trường phát triển tích hợp § Python
Phần lớn trình hiện thực Python (kể cả CPython) có chứa một trình lặp đọc–tính–in (REPL), cho phép chúng hoạt động như là một trình thông dịch dòng lệnh mà người dùng sẽ lần lượt nhập các câu lệnh và nhận kết quả ngay lập tức.

Python đì kèm với một môi trường phát triển tịch hợp (IDE) được gọi là IDLE, phù hợp với người mới bắt đầu.

Các hệ vỏ khác, bao gồm IDLE và IPython, có thêm khả năng tự hoàn thiện, khôi phục trạng thái phiên, và tô sáng cú pháp.

Ngoài các môi trường phát triển tích hợp trên máy để bàn, còn có những IDE chạy trên trình duyệt web: SageMath (dành cho việc phát triển các chương trình Python liên quan đền toán học và khoa học); PythonAnywhere, một IDE kiêm môi trường chủ nhà; và Canopy IDE, một IDE Python thương mại tập trung vào khoa học tính toán.[107]

Các bản triển khai
Xem thêm: Danh sách phần mềm Python § Các bản thực hiện Python
Bản triển khai tham khảo
CPython là bản triển khai tham khảo của Python. Nó được viết bằng C, đáp ứng tiêu chuẩn C89 vời một vào tính năng C99 chọn lọc (từ khi các phiên bản C mới hơn ra mắt, nó được coi là lỗi thời;[108][109] CPython có chứa phần mở rộng C của riêng nó, nhưng các phần mở rộng bên thứ ba không bị giới hạn bởi các phiên bản C cũ hơn, có thể được cài đặt với C11 hoặc C++[110]). Nó biên dịch các chương trình Python thành một dạng mã byte trung gian, sau đó thực thi mã byte trên máy ảo của nó. CPython được phân phối cùng với một thư viện chuẩn rộng lớn được viết bằng C và Python bản địa (native). Nó có sẵn trên nhiều nền tảng, bao gồm Windows (từ Python 3.9, trình cài đặt Python sẽ không chạy một cách có chủ ý trên Windows 7 và 8;[111][112] Windows XP đã từng được hỗ trợ cho đến Python 3.5) và phần lớn hệ điều hành tương tự Unix hiện đại, bao gồm macOS (và máy Mac Apple M1, kể từ Python 3.9.1, với trình cài đặt thử nghiệm) và hỗ trợ không chính thức cho chẳng hạn như VMS.[113] Tính khả chuyển nền tảng là một trong những ưu tiên sớm nhất của nó, trong khung thời gian Python 1 và Python 2, khi ngay cả OS/2 và Solaris cũng được hỗ trợ;[114] song nhiều hệ điều hành cũng không còn được hỗ trợ nữa.

Các bản triển khai khác
PyPy là một trình thông dịch nhanh, tuân thủ cú pháp của Python 2.7 và 3.6.[115] Trình biên dịch tức thời của nó mang đến tốc độ vượt trội so với CPython nhưng một vài thư viện được viết bằng C lại không thể được sử dụng cùng với nó.[116]
Stackless Python là một phân nhánh (fork) đáng chú ý của CPython có cài đặt vi luồng; nó không sử dụng ngăn xếp lời gọi theo cùng một cách với CPython, vậy nên nó hỗ trợ các chương trình đồng thời một cách ồ ạt. PyPy cũng có một phiên bản không có ngăn xếp.[117]
MicroPython và CircuitPython là các biến thể Python 3 được tối ưu hoá cho vi điều khiển, bao gồm Lego Mindstorms EV3.[118]
Pyston là một biến thể của Python sử dụng biên dịch tức thời để tăng tốc độ thực thi các chương trình Python.[119]
Cinder là một phân nhánh hướng hiệu năng của CPython 3.8 có chứa một số tối ưu hoá bao gồm đệm bộ nhớ mã byte trong dòng, đánh giá các chương trình con một cách tham vọng, một trình biên dịch tức thời "mỗi lúc một phương thức" và một trình biên dịch mã byte thử nghiệm.[120]
Trình biên dịch chéo sang ngôn ngữ khác
Có một số trình biên dịch sang những ngôn ngữ đối tượng bậc cao khác từ ngôn ngữ mã nguồn là Python, một tập con giới hạn của Python hoặc một ngôn ngữ tương tự Python:

Brython,[121] Transcrypt[122][123] và Pyjs (phát hành lần cuối năm 2012) biên dịch Python sang JavaScript.
Codon biên dịch một tập con Python định kiểu tĩnh[124] sang mã máy (thông qua LLVM) và hỗ trợ đa luồng cho hệ thống bản địa.[125]
Cython biên dịch (một tập cha của) Python 2.7 sang C. Phần mã kết quả cũng dùng được với Python thông qua các lệnh gọi API mức C trực tiếp vào trình thông dịch Python.
Nuitka biên dịch Python sang C.[126]
Numba sử dụng LLVM để biên dịch một tập con của Python sang mã máy.
Pythran biên dịch một tập con của Python 3 sang C++.[127][128][129]
Pyrex (bản mới nhất năm 2010) và Shed Skin (bản mới nhất năm 2013) biên dịch lần lượt sang C và C++.
Google's Grumpy (bản mới nhất năm 2017) phiên dịch Python 2 to Go.[130][131][132]
IronPython cho phép chạy các chương trình Python 2.7 trên .NET Common Language Runtime.[133]
Jython biên dịch Python 2.7 sang mã byte Java, cho phép sử dụng các thư viện Java từ một chương trình Python.[134]
RPython có thể được biên dịch sang C, và được dùng để xây dựng trình thông dịch PyPy của Python.
Phát triển
Sự phát triển của Python được chỉ đạo phần lớn là thông qua quy trình Đề nghị Cải tiến Python (Python Enhancement Proposal, hay PEP), cơ chế chủ yếu để đề nghị các tính năng lớn mới, thu thập ý kiến của cộng đồng về các vấn đề và ghi chép lại các quyết định về thiết kế của Python.[135] Phong cách viết mã của Python nằm trong PEP 8.[73] Các PEP xuất sắc sẽ được xem lại và bình luận bởi cộng đồng Python và hội đồng chèo lái.[135]

Sự cải tiến ngôn ngữ tương ứng với sự phát triển của bản triển khai tham khảo CPython. Danh sách thư python-dev là diễn đàn chính về sự phát triển của ngôn ngữ này. Các vấn đề cụ thể được thảo luận trong hệ theo dõi lỗi Roundup được tổ chức trên bugs.python.org.[136] Sự phát triển ban đầu chỉ xảy ra trên một kho mã nguồn tự làm chủ chạy Mercurial cho đến khi Python di chuyển mã nguồn sang Github vào tháng Một năm 2017.[137]

Các bản phát hành công khai của CPython được chia thành ba loại, được phân biệt theo phần nào của số phiên bản được tăng lên:

Phiên bản không tương thích ngược: các mã nhiều khả năng sẽ không hoạt động được và cần phải được chuyển mã thủ công. Phần đầu tiên của số phiên bản được tăng lên. Các bản này ít khi được phát hành: phiên bản 3.0 đã được phát hành 8 năm trước bản 2.0. Theo ông Guido van Rossum, phiên bản 4.0 có lẽ sẽ không bao giờ được phát hành.[138]
Bản phát hành lớn hay bản phát hành "tính năng": tương thích phần lớn với các phiên bản trước đó nhưng có thêm những tính năng mới. Phần thứ hai của số phiên bản được tăng lên. Bắt đầu từ Python 3.8, các bản phát hành được thông báo là sẽ xảy ra hằng năm.[139][140] Mỗi phiên bản lớn sẽ được hỗ trợ bằng sửa lỗi trong vòng vài năm sau khi nó được phát hành.[141]
Phiên bản sửa lỗi: không có tính năng mới, xảy ra mỗi ba tháng và được phát hành khi số lượng lỗi được sửa ngược dòng đủ lớn kể từ bản phát hành cuối. Các lỗ hổng cũng sẽ được vá trong những phiên bản này. Phần thứ ba và phần cuối cùng của số phiên bản được tăng lên.
Nhiều phiên bản alpha, beta và phiên bản ứng cử cũng được phát hành để xem trước và kiểm thử trước bản phát hành cuối cùng. Mặc dù có một lịch trình sơ bộ cho mỗi bản phát hành, chúng thường được lùi lại nếu mã vẫn chưa sẵn sàng. Đội ngũ phát triển Python giám sát tình trạng của mã bằng các chạy tập kiểm thử đơn vị lớn trong quá trình phát triển.[142]

Hội thảo học thuật lớn nhất của Python là PyCon. Ngoài ra, cũng có các chương trình hướng dẫn Python đặc biệt khác, chẳng hạn như Pyladies.

Python 3.10 không khuyên dùng wstr (sẽ bị loại bỏ từ Python 3.12; nghĩa là các phần mở rộng Python[143] cần được chỉnh sửa khi đó),[144] đông thời thêm tính năng khớp theo mẫu (pattern matching) vào ngôn ngữ.[145]

Sự phổ biến
Kể từ năm 2003, Python luôn được xếp vào một trong số mười ngôn ngữ lập trình phổ biến nhất trong Chỉ số Cộng đồng Lập trình TIOBE, nơi mà tính đến tháng 10 năm 2021, Python là ngôn ngữ phổ biến nhất (đứng trước Java và C).[89] Nó từng được chọn là Ngôn ngữ Lập trình của Năm (vì "có đánh giá tăng cao nhất trong năm") vào các năm 2007, 2010, 2018, và 2020 (chỉ Python là được bốn năm[91]).

Một nghiên cứu thức nghiệm chỉ ra rằng các ngôn ngữ kịch bản, chẳng hạn như Python, cho năng suất cao hơn so với các ngôn ngữ thông thường, chẳng hạn như C và Java, đối với các vấn đề lập trình liên quan đến thao tác xâu và tìm kiếm trong từ điển, đồng thời quả quyết rằng sự tiêu tốn bộ nhớ thường "tốt hơn Java và không quá tệ hơn so với C hay C++".[146]

Các tổ chức lớn sử dụng Python gồm có Wikipedia, Google,[147] Yahoo!,[148] CERN, NASA, Facebook,[149] Amazon, Instagram,[150] Spotify[151] và các tổ chức nhỏ hơn như ILM and ITA. Trang mạng tin tức xã hội Reddit cũng được viết phần lớn bằng Python.[152]

Sử dụng
Bài chi tiết: Danh sách phần mềm Python

Được vận hành bởi Python
Python có thể đóng vài trò như là một ngôn ngữ kịch bản cho ứng dụng web, chẳng hạn như thông qua mod wsgi đối với máy chủ web Apache.[153] Với Giao diện Cổng vào Máy chủ Web, một API chuẩn đã và đang dần phát triển để tạo điều kiện cho các ứng dụng này. Các bộ khung web như Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle và Zope hỗ trợ các nhà phát triển trong khâu thiết kế và bảo trì các ứng dụng phức tạp. Pyjs và IronPython có thể được dùng để phát triển phía khách của các ứng dụng dựa trên Ajax. SQLAlchemy có thể được dùng để ánh xạ dữ liệu sang một cơ sở dữ liệu quan hệ. Twisted là một bộ khung dành cho việc giao tiếp giữa các máy tính và được sử dụng bởi Dropbox chẳng hạn.

Các thư viện như NumPy, SciPy và Matplotlib cho phép sử dụng một cách có hiệu quả Python trong tính toán khoa học,[154][155] với các thư viện chuyên ngành chẳng hạn như Biopython và Astropy cung cấp các chức năng miền cụ thể. SageMath là một hệ thống đại số máy tính với một giao diện vở lập trình được trong Python: thư viện của nó trải dài trên nhiều lĩnh vực của toán học, bao gồm đại số, toán tổ hợp, giải tích số, lý thuyết số và vi tích phân.[156] OpenCV có gán kết Python với một tập hợp các tính năng phong phú về thị giác máy tính và xử lý ảnh.[157]

Python thường được sử dụng trong các dự án trí tuệ nhân tạo và học máy với sự giúp đỡ của các thư viện như TensorFlow, Keras, Pytorch và Scikit-learn.[158][159][160][161] Vì là một ngôn ngữ kịch bản với kiến trúc mô đun, cú pháp đơn giản và các công cụ xử lý văn bản phong phú, Python cũng thường được sử dụng trong xử lý ngôn ngữ tự nhiên.

Python có thể được sử dụng để phát triển các giao diện người dùng đồ hoạ (GUI) bằng cách sử dụng các thư viện như Tkinter[162][163], hay để tạo ra trò chơi thông qua các thư viện chẳng hạn như Pygame, một thư viện làm trò chơi 2D.

Python đã được nhúng thành công trong nhiều sản phẩm phần mềm như là một ngôn ngữ kịch bản, bao gồm trong phần mềm phương pháp phần tử hữu hạn chẳng hạn như Abaqus, một trình dựng mô hình tham số 3D giống như FreeCAD, trong các gói hoạt hình 3D chẳng hạn như 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, Modo, MotionBuilder, Softimage, trong trình tổng hợp hiệu ứng trực quan Nuke, trong các chương trình sửa ảnh 2D như GIMP,[164] Inkscape, Scribus và Paint Shop Pro, và trong các chương trình kí hiệu âm nhạc như trình soạn nhạc và Capella. GNU Debugger sử dụng Python như là một trình in đẹp để thể hiện các cấu trúc phức tạp chẳng hạn như các kiểu chứa (container) trong C++. Esri quảng bá Python là lựa chọn tốt nhất để viết tập lệnh trong ArcGIS. Nó cũng được sử dụng trong một số trò chơi video, và được chọn làm một trong ba ngôn ngữ lập trình có sẵn đầu tiên trong Google App Engine, với hai ngôn ngữ còn lại là Java và Go.

Nhiều hệ điều hành có chứa Python như là một thành phần tiêu chuẩn. Nó đi kèm với hầu hết các bản phân phối Linux,[165] AmigaOS 4 (sử dụng Python 2.7), FreeBSD (dưới dạng gói), NetBSD, OpenBSD (dưới dạng gói) và macOS và có thể được dùng từ dòng lệnh (tức terminal – đầu cuối). Nhiều bản phân phối Linux sử dụng các trình cài đặt được viết bằng Python: Ubuntu sử dụng trình cài đặt Ubiquity, trong khi Red Hat Linux và Fedora sử dụng trình cài đặt Anaconda. Gentoo Linux sử dụng Python trong hệ thống quản lý gói của nó là Portage.

Python còn được sử dụng rộng rãi trong ngành công nghiệp an toàn thông tin, bao gồm phát triển khai thác.

LibreOffice có nhúng Python và dự định sẽ thay thế Java bằng Python. Python Scripting Provider là một tính năng lõi của nó[166] kể từ phiên bản 4.0 phát hành mùng 7 tháng Hai năm 2013.

Ảnh hưởng ngôn ngữ
Thiết kế và triết lý của Python đã ảnh hưởng đến nhiều ngôn ngữ lập trình khác:

CoffeeScript – một ngôn ngữ lập trình biên dịch chéo sang JavaScript – có cú pháp lấy cảm hứng từ Python.
ECMAScript/JavaScript mượn biến lặp (iterator) và bộ sinh từ Python.
GDScript, một ngôn ngữ kịch bản rất giống Python, được tích hợp vào bộ máy trò chơi Godot.[167]
Go được thiết kế nhằm "tăng tốc độ làm việc trong một ngôn ngữ kiểu động giống như Python" và cả hai có cùng cú pháp cắt lát mảng.
Groovy được tạo ra với mong muốn đem triết lí thiết kế của Python vào Java.[168]
Julia được thiết kế để "có thể sử dụng được vào các mục đích chung giống như Python vậy".[169]
Mojo, một tập cha của Python, cố gắng tương thích với cú pháp và hệ sinh thái của Python[170], và có thể chạy nhanh hơn Python lên đến 35.000 lần.[171]
Nim cũng có thụt lề và cú pháp tương đồng.[172]
Matsumoto Yukihiro, tác giả của ngôn ngữ Ruby từng cho biết: "Tôi muốn một ngôn ngữ kịch bản mạnh mẽ hơn Perl và hướng đối tượng nhiều hơn Python. Đó là lí do tôi quyết định thiết kế ngôn ngữ cho riêng mình."[173]
Xem thêm
icon	Cổng thông tin Lập trình máy tính
	Cổng thông tin Phần mềm tự do và nguồn mở
Zen of Python
pip (trình quản lý gói)
Tham khảo
^ “Python 3.12.3 and 3.13.0a6 released” (bằng tiếng Anh). 9 tháng 4 2024. Truy cập 9 tháng 4 2024. Kiểm tra giá trị ngày tháng trong: |access-date= và |date= (trợ giúp)
^ “PEP 483 -- The Theory of Type Hints”. Python.org.
^ Phần mở rộng tệp .pyo đã bị loại bỏ trong Python 3.5. Xem PEP 0488
^ Holth, Moore (ngày 30 tháng 3 năm 2014). “PEP 0441 -- Improving Python ZIP Application Support”. Truy cập ngày 12 tháng 11 năm 2015.
^ “Starlark Language”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 25 tháng 5 năm 2019.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Truy cập ngày 22 tháng 3 năm 2007.
^ Kuchling, Andrew M. (ngày 22 tháng 12 năm 2006). “Interview with Guido van Rossum (July 1998)”. amk.ca. Bản gốc lưu trữ ngày 1 tháng 5 năm 2007. Truy cập ngày 12 tháng 3 năm 2012.
^ van Rossum, Guido (1993). “An Introduction to Python for UNIX/C Programmers”. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.
^ a b “Classes”. The Python Tutorial. Python Software Foundation. Truy cập ngày 20 tháng 2 năm 2012. It is a mixture of the class mechanisms found in C++ and Modula-3
^ Lundh, Fredrik. “Call By Object”. effbot.org. Bản gốc lưu trữ ngày 23 tháng 11 năm 2019. Truy cập ngày 21 tháng 11 năm 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.
^ Simionato, Michele. “The Python 2.3 Method Resolution Order”. Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers
^ Kuchling, A. M. “Functional Programming HOWTO”. Python v2.7.2 documentation. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (ngày 18 tháng 5 năm 2001). “PEP 255 – Simple Generators”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (ngày 2 tháng 9 năm 2004). “PEP 318 – Decorators for Functions and Methods”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 24 tháng 2 năm 2012.
^ “More Control Flow Tools”. Python 3 documentation. Python Software Foundation. Truy cập ngày 24 tháng 7 năm 2015.
^ “CoffeeScript borrows chained comparisons from Python”.
^ “Genie Language - A brief guide”. Truy cập ngày 28 tháng 12 năm 2015.
^ “Perl and Python influences in JavaScript”. www.2ality.com. ngày 24 tháng 2 năm 2013. Truy cập ngày 15 tháng 5 năm 2015.
^ Rauschmayer, Axel. “Chapter 3: The Nature of JavaScript; Influences”. O'Reilly, Speaking JavaScript. Bản gốc lưu trữ ngày 26 tháng 12 năm 2018. Truy cập ngày 15 tháng 5 năm 2015.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ Ring Team (ngày 4 tháng 12 năm 2017). “Ring and other languages”. ring-lang.net. ring-lang.
^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. tr. 3. ISBN 978-1-59059-881-8.
^ Lattner, Chris (ngày 3 tháng 6 năm 2014). “Chris Lattner's Homepage”. Chris Lattner. Truy cập ngày 3 tháng 6 năm 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.
^ Bài phỏng vấn Guido van Rossum [1].
^ “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal”. www.linuxjournal.com (bằng tiếng Anh).
^ “Python boss Guido van Rossum steps down after 30 years | TheINQUIRER”. theinquirer.net (bằng tiếng Anh). Bản gốc lưu trữ ngày 19 tháng 2 năm 2019. Truy cập ngày 25 tháng 8 năm 2018.
^ “About the Python Software Foundation”. Truy cập 28 tháng 8 năm 2019.
^ “Stack Overflow Developer Survey 2020”. Stack Overflow. Lưu trữ bản gốc ngày 2 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “The State of Developer Ecosystem in 2020 Infographic”. JetBrains: Developer Tools for Professionals and Teams (bằng tiếng Anh). Lưu trữ bản gốc ngày 1 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “index | TIOBE - The Software Quality Company”. www.tiobe.com. Lưu trữ bản gốc ngày 25 tháng 2 năm 2018. Truy cập ngày 2 tháng 2 năm 2021. Python has won the TIOBE programming language of the year award! This is for the fourth time in the history, which is a record! The title is awarded to the programming language that has gained most popularity in one year.
^ “PYPL PopularitY of Programming Language index”. pypl.github.io (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 3 năm 2017. Truy cập ngày 26 tháng 3 năm 2021.
^ a b Venners, Bill (13 tháng 1 năm 2003). “The Making of Python”. Artima Developer. Artima. Lưu trữ bản gốc ngày 1 tháng 9 năm 2016. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (29 tháng 8 năm 2000). “SETL (was: Lukewarm about range literals)”. Python-Dev (Danh sách thư). Lưu trữ bản gốc ngày 14 tháng 7 năm 2018. Truy cập ngày 13 tháng 3 năm 2011.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (20 tháng 1 năm 2009). “A Brief Timeline of Python”. The History of Python. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 20 tháng 1 năm 2009.
^ Fairchild, Carlie (12 tháng 7 năm 2018). “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life”. Linux Journal. Lưu trữ bản gốc ngày 13 tháng 7 năm 2018. Truy cập ngày 13 tháng 7 năm 2018.
^ “PEP 8100”. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 4 tháng 5 năm 2019.
^ “PEP 13 -- Python Language Governance”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 5 năm 2021. Truy cập ngày 25 tháng 8 năm 2021.
^ Kuchling, A. M.; Zadka, Moshe (16 tháng 10 năm 2000). “What's New in Python 2.0”. Python Software Foundation. Lưu trữ bản gốc ngày 23 tháng 10 năm 2012. Truy cập ngày 11 tháng 2 năm 2012.
^ “Python 3.0 Release”. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 8 tháng 7 năm 2009.
^ van Rossum, Guido (5 tháng 4 năm 2006). “PEP 3000 – Python 3000”. Python Enhancement Proposals. Python Software Foundation. Bản gốc lưu trữ ngày 3 tháng 3 năm 2016. Truy cập ngày 27 tháng 6 năm 2009.
^ “2to3 – Automated Python 2 to 3 code translation”. docs.python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 2 tháng 2 năm 2021.
^ Langa, Łukasz (19 tháng 2 năm 2021). “Python Insider: Python 3.9.2 and 3.8.8 are now available”. Python Insider. Lưu trữ bản gốc ngày 25 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “Red Hat Customer Portal - Access to 24x7 support and knowledge”. access.redhat.com. Lưu trữ bản gốc ngày 6 tháng 3 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-3177”. cve.mitre.org. Lưu trữ bản gốc ngày 27 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-23336”. cve.mitre.org. Lưu trữ bản gốc ngày 24 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ Langa, Łukasz (24 tháng 3 năm 2022). “Python Insider: Python 3.10.4 and 3.9.12 are now available out of schedule”. Python Insider. Lưu trữ bản gốc ngày 21 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (16 tháng 3 năm 2022). “Python Insider: Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (17 tháng 5 năm 2022). “Python Insider: Python 3.9.13 is now available”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 5 năm 2022. Truy cập ngày 21 tháng 5 năm 2022.
^ “Python Insider: Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available”. pythoninsider.blogspot.com. 7 tháng 9 năm 2022. Lưu trữ bản gốc ngày 13 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “CVE - CVE-2020-10735”. cve.mitre.org. Lưu trữ bản gốc ngày 20 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “What's New In Python 3.12”. Python documentation. Truy cập 26 tháng 11 năm 2023.
^ The Cain Gang Ltd. “Python Metaclasses: Who? Why? When?” (PDF). Bản gốc (PDF) lưu trữ ngày 30 tháng 5 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “3.3. Special method names”. The Python Language Reference. Python Software Foundation. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “PyDBC: method preconditions, method postconditions and class invariants for Python”. Lưu trữ bản gốc ngày 23 tháng 11 năm 2019. Truy cập ngày 24 tháng 9 năm 2011.
^ “Contracts for Python”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “PyDatalog”. Lưu trữ bản gốc ngày 13 tháng 6 năm 2020. Truy cập ngày 22 tháng 7 năm 2012.
^ “Extending and Embedding the Python Interpreter: Reference Counts” (bằng tiếng Anh). Docs.python.org. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 5 tháng 6 năm 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.
^ a b Hettinger, Raymond (30 tháng 1 năm 2002). “PEP 289 – Generator Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “6.5 itertools – Functions creating iterators for efficient looping”. Docs.python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 22 tháng 11 năm 2016.
^ “PEP 206 -- Python Advanced Library”. Python.org.
^ Peters, Tim (19 tháng 8 năm 2004). “PEP 20 – The Zen of Python”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 26 tháng 12 năm 2018. Truy cập ngày 24 tháng 11 năm 2008.
^ a b “Python Culture”. ebeab. 21 tháng 1 năm 2014. Bản gốc lưu trữ ngày 30 tháng 1 năm 2014.
^ “General Python FAQ”. Python v2.7.3 documentation. Docs.python.org. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 4 tháng 6 năm 2020.
^ “15 Ways Python Is a Powerful Force on the Web”. Bản gốc lưu trữ ngày 11 tháng 5 năm 2019. Truy cập ngày 3 tháng 7 năm 2018.
^ “8.18. pprint — Data pretty printer — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 22 tháng 1 năm 2021. Truy cập ngày 4 tháng 6 năm 2020.
^ Clark, Robert (26 tháng 4 năm 2019). “How to be Pythonic and why you should care”. Medium. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “Code Style — The Hitchhiker's Guide to Python”. docs.python-guide.org. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ Goodger, David. “Code Like a Pythonista: Idiomatic Python”. Bản gốc lưu trữ ngày 27 tháng 5 năm 2014. Truy cập ngày 24 tháng 3 năm 2009.
^ “How to think like a Pythonista”. Bản gốc lưu trữ ngày 23 tháng 3 năm 2018. Truy cập ngày 24 tháng 3 năm 2009.
^ “Is Python a good language for beginning programmers?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 21 tháng 3 năm 2007.
^ Guttag, John V. (12 tháng 8 năm 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.
^ a b “PEP 8 -- Style Guide for Python Code”. Python.org. Lưu trữ bản gốc ngày 17 tháng 4 năm 2019. Truy cập ngày 26 tháng 3 năm 2019.
^ “Highlights: Python 2.5”. Python.org. Lưu trữ bản gốc ngày 4 tháng 8 năm 2019. Truy cập ngày 20 tháng 3 năm 2018.
^ “division”. python.org. Lưu trữ bản gốc ngày 20 tháng 7 năm 2006. Truy cập ngày 30 tháng 7 năm 2014.
^ “PEP 0465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “Python 3.5.1 Release and Changelog”. python.org. Lưu trữ bản gốc ngày 14 tháng 5 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “What's New in Python 3.8”. Lưu trữ bản gốc ngày 8 tháng 6 năm 2020. Truy cập ngày 14 tháng 10 năm 2019.
^ “Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ “Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ van Rossum, Guido; Hettinger, Raymond (7 tháng 2 năm 2003). “PEP 308 – Conditional Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 13 tháng 3 năm 2016. Truy cập ngày 13 tháng 7 năm 2011.
^ “4. Built-in Types — Python 3.6.3rc1 documentation”. python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 1 tháng 10 năm 2017.
^ “5.3. Tuples and Sequences — Python 3.7.1rc2 documentation”. python.org. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 17 tháng 10 năm 2018.
^ a b “PEP 498 -- Literal String Interpolation”. python.org. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 8 tháng 3 năm 2017.
^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code (bằng tiếng Anh). No Starch Press. tr. 322. ISBN 978-1-59327-966-0. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 7 tháng 7 năm 2021.
^ “The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1”. Bản gốc lưu trữ ngày 26 tháng 10 năm 2012. Truy cập ngày 12 tháng 1 năm 2011.
^ “Type hinting for Python”. LWN.net. 24 tháng 12 năm 2014. Lưu trữ bản gốc ngày 20 tháng 6 năm 2019. Truy cập ngày 5 tháng 5 năm 2015.
^ “mypy - Optional Static Typing for Python”. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 28 tháng 1 năm 2017.
^ a b “15. Floating Point Arithmetic: Issues and Limitations — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 6 tháng 6 năm 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".
^ Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 237 – Unifying Long Integers and Integers”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ a b “Built-in Types”. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 3 tháng 10 năm 2019.
^ “PEP 465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 29 tháng 5 năm 2020. Truy cập ngày 3 tháng 7 năm 2018.
^ a b Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 238 – Changing the Division Operator”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 23 tháng 10 năm 2013.
^ “Why Python's Integer Division Floors”. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 25 tháng 8 năm 2010.
^ “round”, The Python standard library, release 3.2, §2: Built-in functions, lưu trữ bản gốc ngày 25 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ “round”, The Python standard library, release 2.7, §2: Built-in functions, lưu trữ bản gốc ngày 27 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ Beazley, David M. (2009). Python Essential Reference (ấn bản 4). tr. 66.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (ấn bản 2). tr. 206.
^ Batista, Facundo. “PEP 0327 -- Decimal Data Type”. Python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 26 tháng 9 năm 2015.
^ “What's New in Python 2.6 — Python v2.6.9 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 12 năm 2019. Truy cập ngày 26 tháng 9 năm 2015.
^ “10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke”. www.stat.washington.edu. Bản gốc lưu trữ ngày 31 tháng 5 năm 2020. Truy cập ngày 3 tháng 2 năm 2019.
^ Shell, Scott (17 tháng 6 năm 2014). “An introduction to Python for scientific computing” (PDF). Lưu trữ (PDF) bản gốc ngày 4 tháng 2 năm 2019. Truy cập ngày 3 tháng 2 năm 2019.
^ Piotrowski, Przemyslaw (tháng 7 năm 2006). “Build a Rapid Web Development Environment for Python Server Pages and Oracle”. Oracle Technology Network. Oracle. Lưu trữ bản gốc ngày 2 tháng 4 năm 2019. Truy cập ngày 12 tháng 3 năm 2012.
^ Batista, Facundo (17 tháng 10 năm 2003). “PEP 327 – Decimal Data Type”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 24 tháng 11 năm 2008.
^ Eby, Phillip J. (7 tháng 12 năm 2003). “PEP 333 – Python Web Server Gateway Interface v1.0”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “Modulecounts”. Modulecounts. 28 tháng 9 năm 2021. Lưu trữ bản gốc ngày 24 tháng 9 năm 2021. Truy cập ngày 28 tháng 9 năm 2021.
^ Enthought, Canopy. “Canopy”. www.enthought.com. Bản gốc lưu trữ ngày 15 tháng 7 năm 2017. Truy cập ngày 20 tháng 8 năm 2016.
^ “Mailman 3 Why aren't we allowing the use of C11? - Python-Dev - python.org”. mail.python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Issue 35473: Intel compiler (icc) does not fully support C11 Features, including atomics - Python tracker”. bugs.python.org. Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “4. Building C and C++ Extensions — Python 3.9.2 documentation”. docs.python.org. Lưu trữ bản gốc ngày 3 tháng 3 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Changelog — Python 3.9.0 documentation”. docs.python.org. Lưu trữ bản gốc ngày 7 tháng 2 năm 2021. Truy cập ngày 8 tháng 2 năm 2021.
^ “Download Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 8 tháng 12 năm 2020. Truy cập ngày 13 tháng 12 năm 2020.
^ “history [vmspython]”. www.vmspython.org. Lưu trữ bản gốc ngày 2 tháng 12 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “Download Python for Other Platforms”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 11 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “PyPy compatibility”. Pypy.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 3 tháng 12 năm 2012.
^ “speed comparison between CPython and Pypy”. Speed.pypy.org. Lưu trữ bản gốc ngày 10 tháng 5 năm 2021. Truy cập ngày 3 tháng 12 năm 2012.
^ “Application-level Stackless features — PyPy 2.0.2 documentation”. Doc.pypy.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 17 tháng 7 năm 2013.
^ “Python-for-EV3”. LEGO Education (bằng tiếng Anh). Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 17 tháng 4 năm 2019.
^ Yegulalp, Serdar (29 tháng 10 năm 2020). “Pyston returns from the dead to speed Python”. InfoWorld. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 26 tháng 1 năm 2021.
^ “cinder: Instagram's performance oriented fork of CPython” (bằng tiếng Anh). Lưu trữ bản gốc ngày 4 tháng 5 năm 2021. Truy cập ngày 4 tháng 5 năm 2021.
^ “Brython”. brython.info. Lưu trữ bản gốc ngày 3 tháng 8 năm 2018. Truy cập ngày 21 tháng 1 năm 2021.
^ “Transcrypt – Python in the browser”. transcrypt.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 8 năm 2018. Truy cập ngày 22 tháng 12 năm 2020.
^ “Transcrypt: Anatomy of a Python to JavaScript Compiler”. InfoQ. Lưu trữ bản gốc ngày 5 tháng 12 năm 2020. Truy cập ngày 20 tháng 1 năm 2021.
^ “Codon: Differences with Python”. Lưu trữ bản gốc ngày 25 tháng 5 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ Lawson, Loraine (14 tháng 3 năm 2023). “MIT-Created Compiler Speeds up Python Code”. The New Stack (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 4 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ “Nuitka Home | Nuitka Home”. nuitka.net (bằng tiếng Anh). Lưu trữ bản gốc ngày 30 tháng 5 năm 2020. Truy cập ngày 18 tháng 8 năm 2017.
^ Borderies, Olivier (24 tháng 1 năm 2019). “Pythran: Python at C++ speed !”. Medium. Lưu trữ bản gốc ngày 25 tháng 3 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Pythran — Pythran 0.9.5 documentation”. pythran.readthedocs.io. Lưu trữ bản gốc ngày 19 tháng 2 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Archived copy” (PDF). Lưu trữ (PDF) bản gốc ngày 18 tháng 4 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “google/grumpy”. 10 tháng 4 năm 2020. Lưu trữ bản gốc ngày 15 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020 – qua GitHub.
^ “Projects”. opensource.google. Lưu trữ bản gốc ngày 24 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ Francisco, Thomas Claburn in San. “Google's Grumpy code makes Python Go”. www.theregister.com. Lưu trữ bản gốc ngày 7 tháng 3 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “IronPython.net /”. ironpython.net. Lưu trữ bản gốc ngày 17 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ “Jython FAQ”. www.jython.org. Lưu trữ bản gốc ngày 22 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 tháng 6 năm 2000). “PEP 1 – PEP Purpose and Guidelines”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 19 tháng 4 năm 2011.
^ Cannon, Brett. “Guido, Some Guys, and a Mailing List: How Python is Developed”. python.org. Python Software Foundation. Bản gốc lưu trữ ngày 1 tháng 6 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Developer's Guide — Python Developer's Guide”. devguide.python.org. Lưu trữ bản gốc ngày 9 tháng 11 năm 2020. Truy cập ngày 17 tháng 12 năm 2019.
^ Hughes, Owen (24 tháng 5 năm 2021). “Programming languages: Why Python 4.0 might never arrive, according to its creator”. TechRepublic (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 7 năm 2022. Truy cập ngày 16 tháng 5 năm 2022.
^ “PEP 602 -- Annual Release Cycle for Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 6 tháng 11 năm 2019.
^ “Changing the Python release cadence [LWN.net]”. lwn.net. Lưu trữ bản gốc ngày 6 tháng 11 năm 2019. Truy cập ngày 6 tháng 11 năm 2019.
^ Norwitz, Neal (8 tháng 4 năm 2002). “[Python-Dev] Release Schedules (was Stability & change)”. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Buildbot”. Python Developer's Guide. Python Software Foundation. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “1. Extending Python with C or C++ — Python 3.9.1 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 6 năm 2020. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 623 -- Remove wstr from Unicode”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 3 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 634 -- Structural Pattern Matching: Specification”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 5 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ Prechelt, Lutz (14 tháng 3 năm 2000). “An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl” (PDF). Lưu trữ (PDF) bản gốc ngày 3 tháng 1 năm 2020. Truy cập ngày 30 tháng 8 năm 2013.
^ “Quotes about Python”. Python Software Foundation. Lưu trữ bản gốc ngày 3 tháng 6 năm 2020. Truy cập ngày 8 tháng 1 năm 2012.
^ “Organizations Using Python”. Python Software Foundation. Lưu trữ bản gốc ngày 21 tháng 8 năm 2018. Truy cập ngày 15 tháng 1 năm 2009.
^ “Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers”. Facebook for Developers (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 19 tháng 6 năm 2018.
^ “What Powers Instagram: Hundreds of Instances, Dozens of Technologies”. Instagram Engineering. 11 tháng 12 năm 2016. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 27 tháng 5 năm 2019.
^ “How we use Python at Spotify”. Spotify Labs (bằng tiếng Anh). 20 tháng 3 năm 2013. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 25 tháng 7 năm 2018.
^ GitHub - reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, lưu trữ bản gốc ngày 1 tháng 6 năm 2020, truy cập ngày 20 tháng 3 năm 2019
^ “Usage statistics and market share of Python for websites”. 2012. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 18 tháng 12 năm 2012.
^ Oliphant, Travis (2007). “Python for Scientific Computing”. Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 10 tháng 4 năm 2015.
^ Millman, K. Jarrod; Aivazis, Michael (2011). “Python for Scientists and Engineers”. Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 7 tháng 7 năm 2014.
^ Science education with SageMath, Innovative Computing in Science Education, Bản gốc lưu trữ ngày 15 tháng 6 năm 2020, truy cập ngày 22 tháng 4 năm 2019
^ “OpenCV: OpenCV-Python Tutorials”. docs.opencv.org. Lưu trữ bản gốc ngày 23 tháng 9 năm 2020. Truy cập ngày 14 tháng 9 năm 2020.
^ Dean, Jeff; Monga, Rajat; và đồng nghiệp (9 tháng 11 năm 2015). “TensorFlow: Large-scale machine learning on heterogeneous systems” (PDF). TensorFlow.org. Google Research. Lưu trữ (PDF) bản gốc ngày 20 tháng 11 năm 2015. Truy cập ngày 10 tháng 11 năm 2015.
^ Piatetsky, Gregory. “Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis”. KDnuggets. KDnuggets. Lưu trữ bản gốc ngày 15 tháng 11 năm 2019. Truy cập ngày 30 tháng 5 năm 2018.
^ “Who is using scikit-learn? — scikit-learn 0.20.1 documentation”. scikit-learn.org. Lưu trữ bản gốc ngày 6 tháng 5 năm 2020. Truy cập ngày 30 tháng 11 năm 2018.
^ Jouppi, Norm. “Google supercharges machine learning tasks with TPU custom chip”. Google Cloud Platform Blog. Lưu trữ bản gốc ngày 18 tháng 5 năm 2016. Truy cập ngày 19 tháng 5 năm 2016.
^ “Tkinter — Python interface to TCL/Tk”. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 9 tháng 6 năm 2023.
^ “Python Tkinter Tutorial”. 3 tháng 6 năm 2020. Lưu trữ bản gốc ngày 9 tháng 6 năm 2023. Truy cập ngày 9 tháng 6 năm 2023.
^ “Installers for GIMP for Windows - Frequently Asked Questions”. 26 tháng 7 năm 2013. Bản gốc lưu trữ ngày 17 tháng 7 năm 2013. Truy cập ngày 26 tháng 7 năm 2013.
^ “Python Setup and Usage”. Python Software Foundation. Lưu trữ bản gốc ngày 17 tháng 6 năm 2020. Truy cập ngày 10 tháng 1 năm 2020.
^ “4.0 New Features and Fixes”. LibreOffice.org. The Document Foundation. 2013. Lưu trữ bản gốc ngày 9 tháng 2 năm 2014. Truy cập ngày 25 tháng 2 năm 2013.
^ “Frequently asked questions”. Godot Engine documentation. Lưu trữ bản gốc ngày 28 tháng 4 năm 2021. Truy cập ngày 10 tháng 5 năm 2021.
^ Strachan, James (29 tháng 8 năm 2003). “Groovy – the birth of a new dynamic language for the Java platform”. Bản gốc lưu trữ ngày 5 tháng 4 năm 2007. Truy cập ngày 11 tháng 6 năm 2007.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Lưu trữ bản gốc ngày 2 tháng 5 năm 2020. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ “Modular Docs - Why Mojo🔥”. docs.modular.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.
^ Spencer, Michael (4 tháng 5 năm 2023). “What is Mojo Programming Language?”. datasciencelearningcenter.substack.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023.
^ Yegulalp, Serdar (16 tháng 1 năm 2017). “Nim language draws from best of Python, Rust, Go, and Lisp”. InfoWorld. Lưu trữ bản gốc ngày 13 tháng 10 năm 2018. Truy cập ngày 7 tháng 6 năm 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).
^ “An Interview with the Creator of Ruby”. Linuxdevcenter.com. Lưu trữ bản gốc ngày 28 tháng 4 năm 2018. Truy cập ngày 3 tháng 12 năm 2012.
Liên kết ngoài
Tìm hiểu thêm về
Python
tại các dự án liên quan
Tìm kiếm Commons	Tập tin phương tiện từ Commons
Tìm kiếm Wikiquote	Danh ngôn từ Wikiquote
Tìm kiếm Wikibooks	Tủ sách giáo khoa từ Wikibooks
Tìm kiếm Wikiversity	Tài nguyên học tập từ Wikiversity
Tìm kiếm Wikidata	Dữ liệu từ Wikidata
Trang chủ chính thức
Python Wiki
Tài liệu Python
Python Cheese Shop – Kho đựng phần mềm viết bằng Python; trước đây gọi là Python Package Index (PyPI)
xts
Ngôn ngữ lập trình
xts
Phần mềm tự do nguồn mở
Tiêu đề chuẩn Sửa dữ liệu tại Wikidata	
BNF: cb13560465c (data)GND: 4434275-5LCCN: sh96008834NKC: ph170668SUDOC: 051626225
Thể loại: Ngôn ngữ lập trình hướng đối tượngPython (ngôn ngữ lập trình)Phần mềm tự doNgôn ngữ lập trình giáo dụcPhát minh của Hà LanPhần mềm đa nền tảngNgôn ngữ lập trình đa mẫu hìnhNgôn ngữ lập trìnhHọ ngôn ngữ lập trình SmalltalkNgôn ngữ lập trình đồng thờiPhần mềm tự do đa nền tảngNgôn ngữ lập trình được nhập độngNgôn ngữ lập trình bậc caoNgôn ngữ lập trình đối sánh mẫu
Trang này được sửa đổi lần cuối vào ngày 28 tháng 12 năm 2023, 15:26.
Văn bản được phát hành theo Giấy phép Creative Commons Ghi công–Chia sẻ tương tự; có thể áp dụng điều khoản bổ sung. Với việc sử dụng trang web này, bạn chấp nhận Điều khoản Sử dụng và Quy định quyền riêng tư. Wikipedia® là thương hiệu đã đăng ký của Wikimedia Foundation, Inc., một tổ chức phi lợi nhuận.
Quy định quyền riêng tưGiới thiệu WikipediaLời phủ nhậnBộ Quy tắc Ứng xử ChungLập trình viênThống kêTuyên bố về cookiePhiên bản di độngWikimedia FoundationPowered by MediaWiki
Chuyển đổi chiều rộng nội dung giới hạn

Trình đơn chính

WikipediaBách khoa toàn thư mở
Tìm kiếm trên Wikipedia
Tìm kiếm
Tạo tài khoản
Đăng nhập

Công cụ cá nhân
Tính năng Tạo tài khoản · Hướng dẫn người mới · Quy định · Viết bài mới · Chỗ thử · Câu thường hỏi · Sách hướng dẫn · Dịch bài · Thêm chú thích · Thảo luận · Liên hệ quản lý
Tiêu chuẩn bài viết Đủ độ nổi bật, văn phong trung lập và có nguồn đáng tin cậy · Không spam quảng cáo · Không vi phạm bản quyền · Cẩm nang biên soạn
Đóng (mở lại bằng cách xóa cookie dismissASN1 trong trình duyệt)
Nội dung ẩn
Đầu
Lịch sử
Triết lý thiết kế và tính năng
Cú pháp
Hiện/ẩn mục Cú pháp
Thư viện
Môi trường phát triển
Các bản triển khai
Hiện/ẩn mục Các bản triển khai
Phát triển
Sự phổ biến
Sử dụng
Ảnh hưởng ngôn ngữ
Xem thêm
Tham khảo
Liên kết ngoài
Python (ngôn ngữ lập trình)

Bài viết
Thảo luận
Đọc
Sửa đổi
Sửa mã nguồn
Xem lịch sử

Công cụ
Bách khoa toàn thư mở Wikipedia
Python

Mẫu hình	Ngôn ngữ lập trình hướng đối tượng, lập trình câu lệnh, lập trình hàm, lập trình thủ tục, lập trình phản xạ
Thiết kế bởi	Guido van Rossum
Nhà phát triển	Python Software Foundation
Xuất hiện lần đầu	1991; 33 năm trước
Phiên bản ổn định	
3.12.3[1] Sửa đổi tại Wikidata / 9 tháng 4 2024
Kiểm tra kiểu	Vịt, động, mạnh
từ phiên bản 3.5:

dần dần[2]
Giấy phép	Giấy phép Python Software Foundation
Phần mở rộng tên tập tin	.py,.pyc,.pyd,.pyo (trước 3.5),[3] .pyw,.pyz (từ 3.5)[4]
Trang mạng	www.python.org
Các bản triển khai lớn
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Phương ngữ
Cython, RPython, Starlark[5]
Ảnh hưởng từ
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl, Smalltalk
Ảnh hưởng tới
Boo, Cobra, CoffeeScript,[16] D, F#, Falcon, Genie,[17] Go, Apache Groovy, JavaScript,[18][19] Julia,[20] Nim, Ring,[21] Ruby,[22] Swift[23]
Python (phát âm tiếng Anh: /ˈpaɪθɑːn/) là một ngôn ngữ lập trình bậc cao cho các mục đích lập trình đa năng, do Guido van Rossum tạo ra và lần đầu ra mắt vào năm 1991. Python được thiết kế với ưu điểm mạnh là dễ đọc, dễ học và dễ nhớ. Python là ngôn ngữ có hình thức rất sáng sủa, cấu trúc rõ ràng, thuận tiện cho người mới học lập trình và là ngôn ngữ lập trình dễ học; được dùng rộng rãi trong phát triển trí tuệ nhân tạo. Cấu trúc của Python còn cho phép người sử dụng viết mã lệnh với số lần gõ phím tối thiểu.[24] Vào tháng 7 năm 2018, van Rossum đã từ chức lãnh đạo trong cộng đồng ngôn ngữ Python sau 30 năm làm việc.[25][26]

Python hoàn toàn tạo kiểu động và dùng cơ chế cấp phát bộ nhớ tự động; do vậy nó tương tự như Perl, Ruby, Scheme, Smalltalk, và Tcl. Python được phát triển trong một dự án mã mở, do tổ chức phi lợi nhuận Python Software Foundation quản lý.[27]

Ban đầu, Python được phát triển để chạy trên nền Unix. Nhưng rồi theo thời gian, Python dần mở rộng sang mọi hệ điều hành từ MS-DOS đến Mac OS, OS/2, Windows, Linux và các hệ điều hành khác thuộc họ Unix. Mặc dù sự phát triển của Python có sự đóng góp của rất nhiều cá nhân, nhưng Guido van Rossum hiện nay vẫn là tác giả chủ yếu của Python. Ông giữ vai trò chủ chốt trong việc quyết định hướng phát triển của Python.

Python luôn được xếp hạng vào những ngôn ngữ lập trình phổ biến nhất.[28][29][30][31]


Guido van Rossum, nhà sáng lập ngôn ngữ Python.
Lịch sử
Bài chi tiết: Lịch sử Python
Python đã được Guido van Rossum tạo ra vào những năm 1980[32] tại Trung tâm Toán học – Tin học (Centrum Wiskunde & Informatica, CWI) ở Hà Lan như là một ngôn ngữ kế tục ngôn ngữ ABC – một ngôn ngữ được lấy cảm hứng từ SETL,[33] có khả năng xử lí ngoại lệ và giao tiếp với hệ điều hành Amoeba.[34] Nó bắt đầu được triển khai vào tháng 12 năm 1989.[35] Van Rossum đã tự mình gánh vác trách nhiệm cho dự án, với vai trò là nhà phát triển chính, cho đến ngày 12 tháng 7 năm 2018, khi ông thông báo rằng ông sẽ rời bỏ trách nhiệm của ông và cả danh hiệu "Nhà độc tài nhân từ cho cuộc sống" của Python, một danh hiệu mà cộng đồng Python đã trao tặng cho ông vì sự tận tụy lâu dài của ông với vai trò là người ra quyết định chính cho dự án.[36] Vào tháng 1 năm 2019, các nhà phát triển phần lõi Python đã bầu ra một "Hội đồng chèo lái" gồm năm thành viên để dẫn dắt dự án.[37][38]

Python 2.0 được ra mắt vào ngày 16 tháng 10 năm 2000, với nhiều tính năng mới mẻ, bao gồm một bộ dọn rác phát hiện theo chu kỳ và khả năng hỗ trợ Unicode.[39]

Python 3.0 được ra mắt vào ngày mùng 3 tháng 12 năm 2008. Đây là một phiên bản lớn của Python không tương thích ngược hoàn toàn.[40] Nhiều tính năng lớn của nó đã được chuyển mã ngược (backport) về loạt phiên bản Python 2.6.x và 2.7.x.[41] Các bản phát hành của Python 3 có đi kèm với công cụ 2to3, có tác dụng tự động hoá việc dịch mã Python 2 sang Python 3.[42]

Python 3.9.2 và 3.8.8 được xúc tiến[43] vì tất cả các phiên bản trước của Python (bao gồm cả 2.7)[44] gặp một số vấn đề bảo mật, có thể dẫn đến thực thị mã từ xa[45] và "đầu độc" bộ nhớ đệm.[46]

Trong năm 2022, Python 3.10.4 và 3.9.12 được xúc tiến[47] cùng với 3.8.13 và 3.7.13, nguyên nhân là do một vài vấn đề về bảo mật.[48] Khi Python 3.9.13 được phát hành vào tháng Năm năm 2022, loạt phiên bản 3.9 (cùng với loạt 3.8 và 3.7) được thông báo rằng sẽ chỉ nhận được các bản vá bảo mật trong tương lai.[49] Vào ngày 7 tháng Chín năm 2022, bốn bản cập nhật mới được phát hành do có khả năng xảy ra một cuộc tấn công từ chối dịch vụ: 3.10.7, 3.9.14, 3.8.14 và 3.7.14.[50][51]

Tính đến tháng 10 năm 2023, Python 3.12 là bản phát hành ổn định mới nhất. Một số thay đổi đáng chú ý từ bản 3.11 bao gồm các thay đổi về ngôn ngữ và thư viện chuẩn.[52]

Triết lý thiết kế và tính năng
Python là một ngôn ngữ lập trình đa mẫu hình, lập trình hướng đối tượng và lập trình cấu trúc được hỗ trợ hoàn toàn, và nhiều tính năng của nó cũng hỗ trợ lập trình hàm và lập trình hướng khía cạnh (bao gồm siêu lập trình[53] và siêu đối tượng (phương thức thần kỳ)).[54] Các mẫu hình khác cũng được hỗ trợ thông qua các phần mở rộng, bao gồm thiết kế theo hợp đồng[55][56] và lập trình logic.[57]

Python sử dụng kiểu động và một dạng kết hợp giữa đếm tham chiếu và bộ dọn rác kiểm tra theo chu kì để quản lí bộ nhớ.[58] Nó cũng có tính năng phân giải tên động (liên kết muộn), cho phép liên kết các tên biến và phương thức trong quá trình thực thi chương trình.

Thiết kế của Python cung cấp một số tính năng cho lập trình hàm giống như trong ngôn ngữ Lisp. Python có các hàm filter, map và reduce; thông hiểu danh sách (list comprehension), từ điển (dictionary), tập hợp (set), và các biểu thức bộ sinh (generator).[59] Thư viện chuẩn cũng có hai mô đun (itertools và functools) triển khai các công cụ hàm được vay mượn từ Haskell và Standard ML.[60]

Triết lý căn bản của ngôn ngữ Python được trình bày trong tài liệu The Zen of Python (PEP 20), có dạng thơ Haiku, tóm gọn như sau:

Đẹp đẽ tốt hơn xấu xí
Minh bạch tốt hơn ngầm định
Đơn giản tốt hơn phức tạp
Phức tạp tốt hơn rắc rối
Tính dễ đọc rất quan trọng.
Thay vì tích hợp hết tất cả các tính năng vào phần cốt lõi, Python được thiết kế để dễ dàng mở rộng (bằng các mô đun). Tính mô đun nhỏ gọn này đã làm cho Python trở nên phổ biến như là một cách thêm các giao diện lập trình được vào các ứng dụng hiện có. Tầm nhìn của Van Rossum về một ngôn ngữ có phần lõi nhỏ với một thư viện chuẩn rộng lớn và một trình thông dịch dễ dàng mở rộng bắt nguồn từ việc ông nản lòng trước ABC, một ngôn ngữ lập trình tán thành hướng tiếp cận ngược lại.[32] Python thường được mô tả là một ngôn ngữ "tặng kèm pin" nhờ vào thư viện chuẩn bao quát của nó.[61]

Python nỗ lực hướng đến một cú pháp đơn giản hơn, gọn gàng hơn trong khi vẫn cho các nhà phát triển lựa chọn phương pháp viết mã của họ. Đối lập với khẩu hiệu "có nhiều hơn một cách để làm việc này," triết lý thiết kế của Python lại nằm trong châm ngôn "chỉ nên có một— và tốt nhất là chỉ một—cách rõ ràng để làm việc này".[62] Alex Martelli, một Viện sĩ (Fellow) tại Tổ chức Phần mềm Python (Python Software Foundation) và là một tác giả viết sách Python, viết rằng "Mô tả một thứ gì đó là "tài tình" không được coi là một lời khen ngợi trong văn hoá Python."[63]

Các nhà phát triển Python nỗ lực tránh xa việc tối ưu hoá quá sớm và không chấp nhận các bản vá không cải thiện đáng kể tốc độ mà lại làm mất đi tính rõ ràng lên những phần không thiết yếu của bản triển khai tham khảo CPython.[63] Khi cần đến tốc độ, một lập trình viên Python có thể di chuyển các hàm bị giới hạn về thời gian sang các mô đun mở rộng được viết bằng những ngôn ngữ như C, hoặc sử dụng PyPy, một trình biên dịch tức thời. Cython cũng có thể được dùng để phiên dịch một tập lệnh Python sang C và tạo ra các lệnh gọi API ở cấp độ của C trực tiếp vào trình thông dịch Python.

Mục tiêu mà các nhà phát triển Python hướng đến là đem đến niềm vui khi sử dụng ngôn ngữ này. Điều này được thể hiện qua bản thân cái tên – một sự tôn vinh dành cho nhóm hài người Anh Monty Python[64] – và trong một số cách tiếp cận thi thoảng vui tươi trong hướng dẫn và các tài liệu tham khảo, chẳng hạn như một vi dụ có đề cập đến trứng và spam (gợi nhắc đến một tiểu phẩm trong Monty Python) thay cho foo và bar tiêu chuẩn.[65][66]

Một từ ngữ mới phổ biến trong cộng đồng Python là pythonic (đậm chất Python), một từ có thể có nhiều ý nghĩa liên quan đến phong cách lập trình. Nói rằng một phần mã nào đó là pythonic tức là phần mã đó sử dụng tốt các thành ngữ Python, trông tự nhiên hoặc trôi chảy về ngôn ngữ, phù hợp với triết lý tối giản của Python và nhấn mạnh vào tính dễ đọc. Ngược lại, những phần mã khó hiểu hoặc trông như một bản dịch thô từ một ngôn ngữ lập trình khác được gọi là unpythonic (không đậm chất Python).[67][68]

Những người sử dụng và say mê Python, nhất là những người được cho là am hiểu hay có nhiều kinh nghiệm, thường được gọi là các Pythonista.[69][70]

Cú pháp
Bài chi tiết: Cú pháp Python
Python là một ngôn ngữ dễ đọc, dễ hiểu. Định dạng của nó rất gọn gàng về mặt trực quan, và nó thường sử dụng các từ khoá tiếng Anh trong khi các ngôn ngữ khác lại sử dụng các dấu câu. Khác với nhiều ngôn ngữ khác, nó không sử dụng các dấu ngoặc nhọn để giới hạn các khối lệnh, và dấu chấm phẩy cuối câu lệnh rất ít khi được sử dụng dù không bị cấm. Nó có ít ngoại lệ cú pháp và trường hợp đặc biệt hơn C và Pascal.[71]

Thụt lề
Python sử dụng thụt lề bằng khoảng trắng hoặc ký tự tab thay vì dùng ngoặc nhọn hay các từ khoá để giới hạn khối lệnh. Lề thường được thụt vào sau một câu lệnh và thụt ra để đánh dấu kết thúc khối lệnh hiện tại. Cho nên, cấu trúc trực quan của chương trình sẽ thể hiện một cách chính xác cấu trúc ngữ nghĩa của chương trình đó.[72] Tính năng này thỉnh thoảng cũng được gọi là "quy tắc việt vị", một quy tắc cũng xuất hiện ở một số ngôn ngữ; nhưng trong phần lớn ngôn ngữ thì thụt lề không phụ thuộc vào cú pháp. Cỡ thụt lề được khuyến cáo là bốn dấu cách.[73]

Câu lệnh và luồng điều khiển
Một số câu lệnh trong Python gồm có:

Câu lệnh gán, sử dụng một dấu bằng =.
Câu lệnh if: thực thi một khối lệnh nếu thoả mãn điều kiện, sử dụng cùng với else và elif (viết tắt của else-if).
Câu lệnh for: lặp qua một đối tượng lặp được, gán mỗi phần tử và một biến cục bộ để sử dụng trong khối lệnh của vòng lặp.
Câu lệnh while: thực thi một khối lệnh chừng nào điều kiện còn đúng.
Câu lệnh try: cho phép bắt ngoại lệ được nâng lên (raise) trong khối lệnh và dùng vế except để xử lý; câu lệnh cũng đảm bảo rằng phần mã dọn dẹp trong khối finally sẽ được chạy dù có lỗi hay không.
Câu lệnh raise: được dùng để nâng một ngoại lệ hoặc nâng lại một ngoại lệ đã được bắt từ trước.
Câu lệnh class: thực thi một khối lệnh và gắn không gian tên cục bộ của nó vào một lớp, để dùng trong lập trình hướng đối tượng.
Câu lệnh def: định nghĩa một hàm hoặc phương thức.
Câu lệnh with: bao bọc một khối lệnh bằng một bộ quản lí ngữ cảnh (context manager) (ví dụ như khoá luồng lại trước khi chạy mã rồi mở khoá, hoặc mở một tệp rồi đóng tệp lại), cho phép các hành vi kiểu RAII (sự đạt được tài nguyên là sự khởi tạo) và thay thể cho các câu lệnh try/finally thường thấy.[74]
Câu lệnh break: thoát ra khỏi vòng lặp.
Câu lệnh continue: bỏ qua lần lặp này và tiếp tục với mục kế tiếp.
Câu lệnh del: loại bỏ một biến, tức là tham chiếu từ tên đến giá trị sẽ bị xoá và cố gắng sử dụng biến đó sẽ gây lỗi. Một biến đã bị xoá có thể được gán lại.
Câu lệnh pass: đóng vai trò như là một dạng NOP. Câu lệnh này được dùng để tạo các khối lệnh rỗng.
Câu lệnh assert: được dùng trong khi gỡ lỗi để kiểm tra điều kiện nên đúng.
Câu lệnh yield: trả lại giá trị từ một hàm bộ sinh; bản thân yield cũng là một toán tử. Dạng này được dùng để triển khai các đồng thường trình.
Câu lệnh return: trả lại một giá trị từ một hàm hay phương thức.
Câu lệnh import: được dùng để nhập các mô đun chứa các hàm và biến được sử dụng trong chương trình hiện tại.
Câu lệnh gán (=) hoạt động bằng cách liên kết một tên dưới dạng một tham chiếu với một đối tượng được cấp phát động riêng lẻ. Các biến có thể được dùng lại bất cứ lúc nào với bất cứ đối tượng nào. Trong Python, một tên biến chỉ giữ tham chiếu một cách chung chung và không có kiểu dữ liệu cố định đi kèm. Tuy nhiên, tại một thời điểm nhất định, một biến sẽ tham chiếu đến một vài đối tượng có kiểu. Nó được gọi là kiểu động, ngược lại với các ngôn ngữ lập trình kiểu tĩnh với mỗi biến chỉ có thể chứa giá trị của một kiểu nhất định.

Biểu thức
Một số biểu thức trong Python tương tự như những biểu thức trong những ngôn ngữ khác chẳng hạn như C và Java, trong khi số khác thì không:

Phép cộng, trừ và nhân thì đều giống nhau, nhưng hành vi của phép chia thì khác nhau. Có hai loại phép chia trong Python: phép chia phần nguyên (phép chia số nguyên) dùng dấu // và phép chia dấu phẩy động dùng dấu /.[75] Python cũng sử dụng toán tử ** cho phép luỹ thừa.
Từ Python 3.5, toán tử trung tố @ mới đã được giới thiệu. Nó được thiết kể để được sử dụng trong các thư viện như NumPy để nhân ma trận.[76][77]
Từ Python 3.8, cú pháp :=, hay "toán tử moóc" đã được giới thiệu. Nó gán giá trị vào biến trong một phần của một biểu thức lớn hơn.[78]
Trong Python, == so sánh theo giá trị, khác với Java, vốn so sánh các số theo giá trị[79] và các đối tượng theo tham chiếu.[80] (So sánh giá trị trong Java có thể được thực hiện bằng phương thức equals().) Toán tử is của Python có thể được dùng để so sánh danh tính của đối tượng (so sánh theo tham chiếu). Trong Python, các phép so sánh có thể được xâu chuỗi lại với nhau, ví dụ như a <= b <= c.
Python sử dụng các từ khoá and, or, not để so sánh luận lý (boolean) thay vì dùng các loại biểu tượng &&, ||, ! được dùng trong Java và C.
Python có một loại biểu thức được gọi là thông hiểu danh sách (list comprehension) cũng như một loại biểu thức chung được gọi là biểu thức bộ sinh (generator expression).[59]
Các hàm vô danh được triển khai thông qua các biểu thức lambda; tuy nhiên, phần thân của hàm vô danh chỉ có thể là đúng một biểu thức.
Biểu thức điều kiện trong Python được viết dưới dạng x if c else y[81] (có sự khác biệt về trật tự của các toán hạng so với toán tử c ? x : y thường có trong những ngôn ngữ khác).
Có sự phân biệt giữa danh sách và bộ trong Python. Danh sách được viết dưới dạng [1, 2, 3], biển đổi được, và không thể được dùng như khoá cho từ điển (các khoá từ điển phải là bất biến trong Python). Bộ được viết dưới dạng (1, 2, 3), không biến đổi được nên có thể được dùng làm khoá của từ điển, với điều kiện là tất cả các phần tử trong bộ cũng phải là bất biến. Toán tử + có thể được sử dụng để nối liền hai bộ lại với nhau, như không trực tiếp thay đổi nội dung của chúng, mà sẽ tạo ra một bộ mới chứa các phần tử của cả hai bộ ban đầu. Vì vậy, cho một biến t ban đầu bằng (1, 2, 3), chạy lệnh t = t + (4, 5) sẽ thực thì t + (4, 5) đầu tiên, tạo ra (1, 2, 3, 4, 5), rồi mới được gán lại cho t, bằng cách đó đã "chỉnh sửa nội dung" của t một cách hiệu quả, trong khi vẫn tuân theo bản chất bất biến của đối tượng bộ. Trong các ngữ cảnh không mơ hồ thì dấu ngoặc đơn là không cần thiết.[82]
Python có một tính năng là tháo tách chuỗi (sequence unpacking) trong đó các biểu thức, mà mỗi biểu thức được đánh giá thành bất kì thứ gì có thể được gán vào (một biến, một thuộc tính viết được...), được liên kết theo cùng một cách với các bộ ban đầu đó và được đặt vào vế bên trái dấu bằng trong một câu lệnh gán. Câu lệnh này mong đợi một một đối tượng lặp được (iterable) ở vế bên phải dấu bằng tạo ra cùng một số lượng giá trị giống như ở các biểu thức trước đó khi đã và sẽ lặp qua, rồi gán mỗi giá trị được tạo ra bằng các biểu thức tương ứng ở vế bến trái.[83]
Python có một toán tử "định dạng xâu" là %. Chức năng này tương tự như định dạng xâu printf trong C, thí dụ như "spam=%s eggs=%d" % ("blah", 2) được đánh giá thành "spam=blah eggs=2". Trong Python 3 và 2.6+, chức năng này được bổ sung bằng phương thức format() của lớp str, ví dụ như "spam={0} eggs={1}".format("blah", 2). Python 3.6 đã bổ sung thêm "f-string": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}'.[84]
Các xâu trong Python có thể được ghép móc với nhau bằng cách "cộng" chúng lại (dùng cùng toán tử với phép cộng số nguyên và số phẩy động). Thí dụ, "spam" + "eggs" cho ra "spameggs". Kể cả nếu xấu chứa số, chúng vẫn sẽ được ghép móc thành xâu thay vì số nguyên. Thí dụ, "2" + "2" cho ra"22".
Python có nhiều kiểu hằng xâu khác nhau:
Xâu được phân cách bởi dấu nháy đơn hoặc nháy kép. Khác với hệ vỏ Unix, Perl và các ngôn ngữ ảnh hưởng từ Perl, dấu nháy đơn và dấu nháy kép có cùng chức năng. Cả hai loại xâu đều dùng dấu chéo ngược (\) làm ký tự thoát (escape character). Nội suy xâu đã được thêm vào kể từ Python 3.6 với tên gọi "hằng xâu được định dạng".[84]
Xâu ba dấu nháy: bắt đầu và kết thúc bằng ba dấu nháy đơn hoặc kép. Chúng có thể trải dài trên nhiều dòng giống như trong tài liệu đây (here document) trong các hệ vỏ, Perl và Ruby.
Các loại xâu thô, được kí hiệu bằng cách đặt trước hằng xâu một kí tự r. Các chuỗi thoát sẽ không bị thông dịch; cho nên xâuthô khá là hữu ích khi xâu có chứa nhiều dấu chéo ngược, chẳng hạn như biểu thức chính quy và đường dẫn tệp trên Windows.
Python có các biểu thức chỉ số mảng và cắt lát mảng đối với danh sách, được kí hiệu là a[khoá], a[đầu:cuối] hay a[đầu:cuối:bước]. Các chỉ số được đánh từ số không, và chỉ số âm sẽ chỉ lùi từ cuối lên. Việc cắt lát sẽ lấy các phần tử từ đầu cho đến chỉ số cuối (không kể chỉ số cuối). Tham số cắt lát thứ ba, được gọi là bước, cho phép các phần tử có thể được bỏ qua hoặc đảo chiều. Chỉ số lát có thể được bỏ trống, ví dụ a[:]trả lại một bản sao của danh sách đó. Mỗi phần tử trong một lát là một bản sao nông.
Trong Python các biểu thức và câu lệnh được phân biệt một cách vững chắc, ngược lại với các ngôn ngữ như Common Lisp, Scheme, hay Ruby. Điều này đã dẫn tới nhiều biểu thức và câu lệnh có cùng chức năng. Thí dụ:

Thông hiểu danh sách và vòng lặp for
Biểu thức điều kiện và khối lệnh if
Hàm eval() (đánh giá các biểu thức) và exec() (thực thi các câu lệnh); trong Python 2, exec là một câu lệnh.
Câu lệnh không thể nằm trong biểu thức, vậy nên các loại thông hiểu (gồm cả danh sách) và biểu thức lambda, vốn là các biểu thức, không thể chứa các câu lệnh. Một trường hợp cụ thể là một câu lệnh gán chẳng hạn như a = 1 không thể là một phần của biểu thức điều kiện của một câu lệnh điều kiện. Điều này sẽ giúp tránh được các lỗi viết sai toán tử bằng == bằng toán tử gán = trong câu điều kiện thường thấy ở C. Ví dụ, if (c = 1) { ... } là một đoạn mã C hợp lệ (nhưng chắc là không đúng ý) còn if c = 1: ... sẽ báo lỗi cú pháp trong Python.

Phương thức
Phương thức của đối tượng là một hàm đi kèm với lớp của đối tượng đó. Cú pháp hiện_thể.phương_thức(đối số), đối với các hàm và phương thức bình thường, thức chất là dạng cú pháp đặc biệt của Lớp.phương_thức(hiện_thể, đối số). Các phương thức trong Python có một tham số self được dùng để truy cập dữ liệu của hiện thể (instance), ngược lại với biến bản thân (self haythis) trong một số ngôn ngữ lập trình hướng đối tượng khác (C++, Java, Objective-C, hay Ruby). Ngoại trừ điều này, Python cũng cung cấp các phương thức gạch dưới (do tên của chúng bắt đầu và kết thúc bằng hai dấu gạch dưới), cho phép các lớp do người dùng định nghĩa thay đổi cách các lớp này được xử lý bởi các thao tác của Python chẳng hạn như lấy chiều dài, so sánh, tính toán số học, chuyển đổi kiểu...[85]

Kiểu dữ liệu

Cấp bậc kiểu tiêu chuẩn trong Python 3
Python sử dụng định kiểu vịt (duck typing) và có các đối tượng có kiểu nhưng tên biến thì không có kiểu. Giới hạn về kiểu không được kiểm tra trong lúc biên dịch; thay vào đó. các thao tác lên một đối tượng có thể thất bại, chỉ ra rằng đối tượng đó không thuộc vào kiểu dữ liệu phù hợp. Tuy là định kiểu động, Python cũng định kiểu mạnh khi không cho phép các thao tác mà không được định nghĩa rõ ràng (chẳng hạn như cộng một số vào một xâu) thay vì lặng lẽ cố gắng diễn giải thao tác đó.

Python cho phép các lập trình viên định nghĩa các kiểu của riêng họ bằng cách sử dụng lớp, thường được dùng trong lập trình hướng đối tượng. Các hiện thể của một lớp thường được tạo ra bằng cách gọi lớp đó (chẳng hạn như SpamClass() hay EggsClass()), các lớp lại là hiện thể của siêu lớp type (bản thân nó cũng là một hiện thể của chính nó), cho phép siêu lập trình và phản xạ.

Trước phiên bản 3.0, Python có hai loại lớp là kiểu cũ và kiểu mới.[86] Cú pháp của cả hai kiểu đều giống nhau. Sự khác biệt nằm ở chỗ lớp đó có kế thừa từ lớp object một cách trực tiếp hoặc gián tiếp hay không (tất cả các lớp kiểu mới đều kế thừa từ object và là hiện thể của type). Từ phiên bản Python 2.2 trở đi, cả hai loại lớp đều có thể được sử dụng. Lớp kiểu cũ đã bị loại bỏ trong Python 3.0.

Kế hoạch dài hạn là hỗ trợ định kiểu dần dần[87] và từ Python 3.5, cú pháp của ngôn ngữ này cho phép chỉ rõ các kiểu tĩnh nhưng chúng lại không được kiểm tra trong bản triển khai mặc định, CPython. Một trình kiểm tra kiểu tĩnh đang trong quá trình thử nghiệm và tuỳ chọn tên là mypy có hỗ trợ kiểm tra kiểu trong thời gian biên dịch.[88]

Tóm tắt các kiểu dữ liệu có sẵn trong Python 3
Kiểu	Thay đổi được	Mô tả	Ví dụ cú pháp
bool	không	Kiểu dữ liệu luận lý	TrueFalse
bytearray	có	Chuỗi các byte nối tiếp	bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes	không	Chuỗi các byte nối tiếp	b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex	không	Số phức với phần thực và phần ảo	3+2.7j3 + 2.7j
dict	có	Mảng liên kết (hay từ điển) các cặp khoá và giá trị; có thể chứa lẫn lộn nhiều kiểu (khoá và giá trị), khoá phải là loại băm được	{'key1': 1.0, 3: False}{}
ellipsisa	không	Một kiểu giữ chỗ chấm lửng được dùng như một chỉ số trong một mảng NumPy	...Ellipsis
float	không	Số phẩy động độ chính xác đôi. Độ chính xác phụ thuộc vào từng máy nhưng trên thực tế thì nó thường được triển khai là một số IEEE 754 64-bit với độ chính xác là 53 bit.[89]	1.33333
frozenset	không	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	frozenset([4.0, 'string', True])
int	không	Số nguyên với độ lớn không giới hạn[90]	42
list	có	Danh sách, có thể chứa lẫn lộn nhiều kiểu	[4.0, 'string', True][]
NoneTypea	không	Một đối tượng đại diện cho sự không có mặt của dữ liệu, tương đương với null trong các ngôn ngữ khác	None
NotImplementedTypea	không	Một kiểu giữ chỗ có thể được trả lại từ toán tử nạp chồng để biểu thị kiểu toán hạng không được hỗ trợ.	NotImplemented
range	không	Một chuỗi các số thường được dùng để lặp với số lần biết trước trong vòng lặpfor[91]	range(-1, 10)range(10, -5, -2)
set	có	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	{4.0, 'string', True}set()
str	không	Một xâu ký tự (string): chuỗi các điểm mã Unicode	'Wikipedia'"Wikipedia"
"""Trải dài trên
nhiều
dòng"""
tuple	không	Bộ; có thể chứa lẫn lộn nhiều kiểu	(4.0, 'xâu kí tự', True)('phần tử',)()
^a Không thể được truy cập trực tiếp bằng tên

Phép tính số học
Python có các kí hiệu thường dùng cho các toán tử số học (+, -, *, /), toán tử chia sàn // và toán tử chia lấy dư % (số dư có thể âm, chẳng hạn như 4 % -3 == -2). Nó cũng có toán tử ** cho phép luỹ thừa, chẳng hạn như 5**3 == 125 và 9**0.5 == 3.0, và toán tử nhân ma trận @.[92] Các toán tử này hoạt động giống như trong toán học truyền thống, với cùng thứ tự tính toán, toán tử trung tố (+ và - cũng có thể làm toán tử một ngôi để biểu diễn số dương và số âm một cách tương ứng).

Phép chia giữa các số nguyên tạo ra kết quả là số phẩy động. Hành vi của phép chia đã thay đổi đáng kể theo thời gian:[93]

Python hiện tại (kể từ 3.0) thay đổi / thành phép chia số phẩy động, ví dụ: 5/2 == 2.5.
Python 2.2 đã thay đổi phép chia số nguyên để nó làm tròn về phía âm vô cực, ví dụ 7/3 == 2 và -7/3 == -3. Toán tử chia sàn // đã được giới thiệu. Cho nên 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 và -7.5//3 == -3.0. Thêm from __future__ import division sẽ làm cho một mô đun sử dụng quy tắc chia của Python 3.0.
Python 2.1 về trước sử dụng hành vi chia kiểu C. Toán tử / là phép chia nguyên nếu cả hai toán hạng là số nguyên, nếu không thì là phép chia số phẩy động. Phép chia nguyên làm tròn về 0, ví dụ 7/3 == 2 và -7/3 == -2.
Trong thuật ngữ Python, / là phép chia đúng (gọi tắt là phép chia), và // là phép chia sàn. Toán tử / trước phiên bản 3.0 là phép chia cổ điển.[93]

Việc làm tròn về phía âm vô cực, dù khác biết so với những ngôn ngữ khác, đem lại sự chắc chắn. Ví dụ, phương trình (a + b)//b == a//b + 1 là luôn đúng. Còn phương trình b*(a//b) + a%b == a thì hợp lệ với cả giá trị a dương và âm. Tuy nhiên, duy trì tính hợp lệ của phương trình này cũng đồng nghĩa răng trong khi kết quả của a%b là, đúng như mong đợi, nằm trong nửa khoảng mở [0, b), với b là một số nguyên dương, nó cũng cần phải nằm trong khoảng (b, 0] khi b âm.[94]

Python cung cấp một hàm round để làm tròn một số phẩy động thành số nguyên gần nhất. Để gỡ hoà (với những số có chữ số cuối là 5), Python 3 sử dụng làm tròn thành số chẵn: round(1.5) và round(2.5) đều là 2.[95] Các phiên bản trước 3 làm tròn xa số không: round(0.5) là 1.0, round(-0.5) là −1.0.[96]

Python cho phép sử dụng các biểu thức luận lý với nhiều quan hệ băng nhau theo một cách đồng nhất với cách dùng chung trong toán học. Thí dụ, biểu thức a < b < c kiểm tra xem a có nhỏ hơn b và b có nhỏ hơn c hay không.[97] Các ngôn ngữ dựa trên C sẽ hiểu biểu thức trên khác đi: trong C, biểu thức trên sẽ đánh giá a < b trước tiên, cho ra kết quả 0 hoặc 1, rồi kết quả đó mới được so sánh với c.[98]

Python sử dụng số học có độ chính xác tuỳ ý cho tất cả các thao tác với số nguyên. Kiểu/Lớp Decimal trong mô đun decimal cung cấp số dấu phẩy động thập phân với một độ chính xác tuỳ ý được định trước và một vài chế độ làm tròn.[99] Lớp Fraction trong mô đun fractions cung cấp độ chính xác tuỳ ý cho số hữu tỉ.[100]

Nhờ thư viện toán học rộng lớn của Python và thư viện bên thứ ba NumPy với nhiều tính năng hơn nữa, Python thường được dùng như một ngôn ngữ kịch bản để giải quyết các vấn đề chẳng hạn như thao tác và xử lí dữ liệu số.[101][102]

Chú thích
# dòng chú thích
In giá trị
# Từ Python 3
print((7 + 8) / 2.0)
print((2 + 3j) * (4 - 6j))
Nội suy xâu (string interpolation)

print("Hello {}!".format("world"))
print("a = {.2f} và b = {.2f}".format(a,b))
Cấu trúc rẽ nhánh
Dạng 1:
if biểu_thức_điều_kiện:
    # lệnh...
Dạng 2:
if biểu_thức_điều_kiện:
    # lệnh...
else:
    # lệnh...
Dạng 3:
if biểu_thức_điều_kiện_1:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là đúng/true)
elif biểu_thức_điều_kiện_2:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là sai/false, nhưng biểu_thức_điều_kiện_2 là đúng/true)
else:
    # lệnh... (được thực hiện nếu tất cả các biểu thức điều kiện đi kèm if và elif đều sai)
Khớp theo mẫu, được thêm vào từ bản 3.10.0:
match biến_1:
    case điều_kiện_1:
        #được thực hiện nếu biến_1 = điều_kiện_1
    case điều_kiện_2:
        #được thực hiện nếu biến_1 = điều_kiện_2
Cấu trúc lặp
while biểu_thức_đúng:
    # lệnh...
for phần_tử in dãy:
    # lệnh...
L = ["Hà Nội", "Hải Phòng", "TP Hồ Chí Minh"]
for thành_phố in L:
    print(thành_phố)

for i in range(10):
    print(i)
Hàm
def tên_hàm (tham_biến_1, tham_biến_2, tham_biến_n):
    # lệnh...
    return giá_trị_hàm
Hàm với tham số mặc định:

def luỹ_thừa(x, n=2):
   """Lũy thừa với số mũ mặc định là 2"""
   return x**n

print(luỹ_thừa(3))   # 9
print(luỹ_thừa(2,3)) # 8
Lớp
class Lớp:
    #...

class LớpCon(Lớp):
    """LớpCon kế thừa lớp Lớp"""
    x = 3  # biến thành viên của lớp
    #
    def phương_thức(self, tham_biến):
        #...

# khởi tạo
a = LớpCon()
print(a.x)
print(a.phương_thức(m))  # m là giá trị gán cho tham biến
Xử lý ngoại lệ
try:
    câu_lệnh
except Loại_Lỗi:
    thông báo lỗi
Thư viện
Bộ thư viện chuẩn rộng lớn của Python – một trong những điểm mạnh lớn nhất của Python[103] – cung cấp các công cụ phù hợp cho nhiều công việc khác nhau. Với các ứng dụng giao tiếp với Internet, nhiều giao thức và định dạng chuẩn chẳng hạn như MIME and HTTP được hỗ trợ. Nó cũng có chứa các mô đun đành cho việc tạo lập giao diện người dùng đồ hoạ, kết nối với cơ sở dữ liệu quan hệ, sinh số giả ngẫu nhiên, tính toán với số thập phân có độ chính xác tuỳ ý,[104] thao tác với biểu thức chính quy và kiểm thử đơn vị.

Một số phần của thư viện chuẩn nằm trong đặc tả (ví dụ, Giao diện Cổng vào Máy chủ Web (Web Server Gateway Interface hay WSGI) triển khai wsgiref theo PEP 333[105]), nhưng phần lớn mô đun thì không. Chúng được xác định dựa vào mã, tài liệu bên trong và bộ kiểm thử (test suite) của chúng. Tuy nhiên, vì phần lớn thư viện chuẩn là mã Python đa nền tảng, chỉ một vài mô đun cần được chỉnh sửa hoặc viết lại cho các bản triển khai khác nhau.

Tính đến tháng 9 năm 2021, Python Package Index (PyPI), kho chính thức dành cho các phần mềm Python bên thứ ba, có chứa hơn 329.000[106] gói với nhiều chức năng đa dạng và phong phú, bao gồm:
Tự động hoá
Phân tích dữ liệu
Cơ sở dữ liệu
Tài liệu
Giao diện người dùng đồ hoạ
Xử lý hình ảnh
Học máy
Ứng dụng di động
Đa phương tiện
Mạng máy tính
Khoa học tính toán
Quản trị hệ thống
Kiểm thử tự động
Xử lí văn bản
Bộ khung mạng
Thu thập web
Môi trường phát triển
Xem thêm: So sánh các môi trường phát triển tích hợp § Python
Phần lớn trình hiện thực Python (kể cả CPython) có chứa một trình lặp đọc–tính–in (REPL), cho phép chúng hoạt động như là một trình thông dịch dòng lệnh mà người dùng sẽ lần lượt nhập các câu lệnh và nhận kết quả ngay lập tức.

Python đì kèm với một môi trường phát triển tịch hợp (IDE) được gọi là IDLE, phù hợp với người mới bắt đầu.

Các hệ vỏ khác, bao gồm IDLE và IPython, có thêm khả năng tự hoàn thiện, khôi phục trạng thái phiên, và tô sáng cú pháp.

Ngoài các môi trường phát triển tích hợp trên máy để bàn, còn có những IDE chạy trên trình duyệt web: SageMath (dành cho việc phát triển các chương trình Python liên quan đền toán học và khoa học); PythonAnywhere, một IDE kiêm môi trường chủ nhà; và Canopy IDE, một IDE Python thương mại tập trung vào khoa học tính toán.[107]

Các bản triển khai
Xem thêm: Danh sách phần mềm Python § Các bản thực hiện Python
Bản triển khai tham khảo
CPython là bản triển khai tham khảo của Python. Nó được viết bằng C, đáp ứng tiêu chuẩn C89 vời một vào tính năng C99 chọn lọc (từ khi các phiên bản C mới hơn ra mắt, nó được coi là lỗi thời;[108][109] CPython có chứa phần mở rộng C của riêng nó, nhưng các phần mở rộng bên thứ ba không bị giới hạn bởi các phiên bản C cũ hơn, có thể được cài đặt với C11 hoặc C++[110]). Nó biên dịch các chương trình Python thành một dạng mã byte trung gian, sau đó thực thi mã byte trên máy ảo của nó. CPython được phân phối cùng với một thư viện chuẩn rộng lớn được viết bằng C và Python bản địa (native). Nó có sẵn trên nhiều nền tảng, bao gồm Windows (từ Python 3.9, trình cài đặt Python sẽ không chạy một cách có chủ ý trên Windows 7 và 8;[111][112] Windows XP đã từng được hỗ trợ cho đến Python 3.5) và phần lớn hệ điều hành tương tự Unix hiện đại, bao gồm macOS (và máy Mac Apple M1, kể từ Python 3.9.1, với trình cài đặt thử nghiệm) và hỗ trợ không chính thức cho chẳng hạn như VMS.[113] Tính khả chuyển nền tảng là một trong những ưu tiên sớm nhất của nó, trong khung thời gian Python 1 và Python 2, khi ngay cả OS/2 và Solaris cũng được hỗ trợ;[114] song nhiều hệ điều hành cũng không còn được hỗ trợ nữa.

Các bản triển khai khác
PyPy là một trình thông dịch nhanh, tuân thủ cú pháp của Python 2.7 và 3.6.[115] Trình biên dịch tức thời của nó mang đến tốc độ vượt trội so với CPython nhưng một vài thư viện được viết bằng C lại không thể được sử dụng cùng với nó.[116]
Stackless Python là một phân nhánh (fork) đáng chú ý của CPython có cài đặt vi luồng; nó không sử dụng ngăn xếp lời gọi theo cùng một cách với CPython, vậy nên nó hỗ trợ các chương trình đồng thời một cách ồ ạt. PyPy cũng có một phiên bản không có ngăn xếp.[117]
MicroPython và CircuitPython là các biến thể Python 3 được tối ưu hoá cho vi điều khiển, bao gồm Lego Mindstorms EV3.[118]
Pyston là một biến thể của Python sử dụng biên dịch tức thời để tăng tốc độ thực thi các chương trình Python.[119]
Cinder là một phân nhánh hướng hiệu năng của CPython 3.8 có chứa một số tối ưu hoá bao gồm đệm bộ nhớ mã byte trong dòng, đánh giá các chương trình con một cách tham vọng, một trình biên dịch tức thời "mỗi lúc một phương thức" và một trình biên dịch mã byte thử nghiệm.[120]
Trình biên dịch chéo sang ngôn ngữ khác
Có một số trình biên dịch sang những ngôn ngữ đối tượng bậc cao khác từ ngôn ngữ mã nguồn là Python, một tập con giới hạn của Python hoặc một ngôn ngữ tương tự Python:

Brython,[121] Transcrypt[122][123] và Pyjs (phát hành lần cuối năm 2012) biên dịch Python sang JavaScript.
Codon biên dịch một tập con Python định kiểu tĩnh[124] sang mã máy (thông qua LLVM) và hỗ trợ đa luồng cho hệ thống bản địa.[125]
Cython biên dịch (một tập cha của) Python 2.7 sang C. Phần mã kết quả cũng dùng được với Python thông qua các lệnh gọi API mức C trực tiếp vào trình thông dịch Python.
Nuitka biên dịch Python sang C.[126]
Numba sử dụng LLVM để biên dịch một tập con của Python sang mã máy.
Pythran biên dịch một tập con của Python 3 sang C++.[127][128][129]
Pyrex (bản mới nhất năm 2010) và Shed Skin (bản mới nhất năm 2013) biên dịch lần lượt sang C và C++.
Google's Grumpy (bản mới nhất năm 2017) phiên dịch Python 2 to Go.[130][131][132]
IronPython cho phép chạy các chương trình Python 2.7 trên .NET Common Language Runtime.[133]
Jython biên dịch Python 2.7 sang mã byte Java, cho phép sử dụng các thư viện Java từ một chương trình Python.[134]
RPython có thể được biên dịch sang C, và được dùng để xây dựng trình thông dịch PyPy của Python.
Phát triển
Sự phát triển của Python được chỉ đạo phần lớn là thông qua quy trình Đề nghị Cải tiến Python (Python Enhancement Proposal, hay PEP), cơ chế chủ yếu để đề nghị các tính năng lớn mới, thu thập ý kiến của cộng đồng về các vấn đề và ghi chép lại các quyết định về thiết kế của Python.[135] Phong cách viết mã của Python nằm trong PEP 8.[73] Các PEP xuất sắc sẽ được xem lại và bình luận bởi cộng đồng Python và hội đồng chèo lái.[135]

Sự cải tiến ngôn ngữ tương ứng với sự phát triển của bản triển khai tham khảo CPython. Danh sách thư python-dev là diễn đàn chính về sự phát triển của ngôn ngữ này. Các vấn đề cụ thể được thảo luận trong hệ theo dõi lỗi Roundup được tổ chức trên bugs.python.org.[136] Sự phát triển ban đầu chỉ xảy ra trên một kho mã nguồn tự làm chủ chạy Mercurial cho đến khi Python di chuyển mã nguồn sang Github vào tháng Một năm 2017.[137]

Các bản phát hành công khai của CPython được chia thành ba loại, được phân biệt theo phần nào của số phiên bản được tăng lên:

Phiên bản không tương thích ngược: các mã nhiều khả năng sẽ không hoạt động được và cần phải được chuyển mã thủ công. Phần đầu tiên của số phiên bản được tăng lên. Các bản này ít khi được phát hành: phiên bản 3.0 đã được phát hành 8 năm trước bản 2.0. Theo ông Guido van Rossum, phiên bản 4.0 có lẽ sẽ không bao giờ được phát hành.[138]
Bản phát hành lớn hay bản phát hành "tính năng": tương thích phần lớn với các phiên bản trước đó nhưng có thêm những tính năng mới. Phần thứ hai của số phiên bản được tăng lên. Bắt đầu từ Python 3.8, các bản phát hành được thông báo là sẽ xảy ra hằng năm.[139][140] Mỗi phiên bản lớn sẽ được hỗ trợ bằng sửa lỗi trong vòng vài năm sau khi nó được phát hành.[141]
Phiên bản sửa lỗi: không có tính năng mới, xảy ra mỗi ba tháng và được phát hành khi số lượng lỗi được sửa ngược dòng đủ lớn kể từ bản phát hành cuối. Các lỗ hổng cũng sẽ được vá trong những phiên bản này. Phần thứ ba và phần cuối cùng của số phiên bản được tăng lên.
Nhiều phiên bản alpha, beta và phiên bản ứng cử cũng được phát hành để xem trước và kiểm thử trước bản phát hành cuối cùng. Mặc dù có một lịch trình sơ bộ cho mỗi bản phát hành, chúng thường được lùi lại nếu mã vẫn chưa sẵn sàng. Đội ngũ phát triển Python giám sát tình trạng của mã bằng các chạy tập kiểm thử đơn vị lớn trong quá trình phát triển.[142]

Hội thảo học thuật lớn nhất của Python là PyCon. Ngoài ra, cũng có các chương trình hướng dẫn Python đặc biệt khác, chẳng hạn như Pyladies.

Python 3.10 không khuyên dùng wstr (sẽ bị loại bỏ từ Python 3.12; nghĩa là các phần mở rộng Python[143] cần được chỉnh sửa khi đó),[144] đông thời thêm tính năng khớp theo mẫu (pattern matching) vào ngôn ngữ.[145]

Sự phổ biến
Kể từ năm 2003, Python luôn được xếp vào một trong số mười ngôn ngữ lập trình phổ biến nhất trong Chỉ số Cộng đồng Lập trình TIOBE, nơi mà tính đến tháng 10 năm 2021, Python là ngôn ngữ phổ biến nhất (đứng trước Java và C).[89] Nó từng được chọn là Ngôn ngữ Lập trình của Năm (vì "có đánh giá tăng cao nhất trong năm") vào các năm 2007, 2010, 2018, và 2020 (chỉ Python là được bốn năm[91]).

Một nghiên cứu thức nghiệm chỉ ra rằng các ngôn ngữ kịch bản, chẳng hạn như Python, cho năng suất cao hơn so với các ngôn ngữ thông thường, chẳng hạn như C và Java, đối với các vấn đề lập trình liên quan đến thao tác xâu và tìm kiếm trong từ điển, đồng thời quả quyết rằng sự tiêu tốn bộ nhớ thường "tốt hơn Java và không quá tệ hơn so với C hay C++".[146]

Các tổ chức lớn sử dụng Python gồm có Wikipedia, Google,[147] Yahoo!,[148] CERN, NASA, Facebook,[149] Amazon, Instagram,[150] Spotify[151] và các tổ chức nhỏ hơn như ILM and ITA. Trang mạng tin tức xã hội Reddit cũng được viết phần lớn bằng Python.[152]

Sử dụng
Bài chi tiết: Danh sách phần mềm Python

Được vận hành bởi Python
Python có thể đóng vài trò như là một ngôn ngữ kịch bản cho ứng dụng web, chẳng hạn như thông qua mod wsgi đối với máy chủ web Apache.[153] Với Giao diện Cổng vào Máy chủ Web, một API chuẩn đã và đang dần phát triển để tạo điều kiện cho các ứng dụng này. Các bộ khung web như Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle và Zope hỗ trợ các nhà phát triển trong khâu thiết kế và bảo trì các ứng dụng phức tạp. Pyjs và IronPython có thể được dùng để phát triển phía khách của các ứng dụng dựa trên Ajax. SQLAlchemy có thể được dùng để ánh xạ dữ liệu sang một cơ sở dữ liệu quan hệ. Twisted là một bộ khung dành cho việc giao tiếp giữa các máy tính và được sử dụng bởi Dropbox chẳng hạn.

Các thư viện như NumPy, SciPy và Matplotlib cho phép sử dụng một cách có hiệu quả Python trong tính toán khoa học,[154][155] với các thư viện chuyên ngành chẳng hạn như Biopython và Astropy cung cấp các chức năng miền cụ thể. SageMath là một hệ thống đại số máy tính với một giao diện vở lập trình được trong Python: thư viện của nó trải dài trên nhiều lĩnh vực của toán học, bao gồm đại số, toán tổ hợp, giải tích số, lý thuyết số và vi tích phân.[156] OpenCV có gán kết Python với một tập hợp các tính năng phong phú về thị giác máy tính và xử lý ảnh.[157]

Python thường được sử dụng trong các dự án trí tuệ nhân tạo và học máy với sự giúp đỡ của các thư viện như TensorFlow, Keras, Pytorch và Scikit-learn.[158][159][160][161] Vì là một ngôn ngữ kịch bản với kiến trúc mô đun, cú pháp đơn giản và các công cụ xử lý văn bản phong phú, Python cũng thường được sử dụng trong xử lý ngôn ngữ tự nhiên.

Python có thể được sử dụng để phát triển các giao diện người dùng đồ hoạ (GUI) bằng cách sử dụng các thư viện như Tkinter[162][163], hay để tạo ra trò chơi thông qua các thư viện chẳng hạn như Pygame, một thư viện làm trò chơi 2D.

Python đã được nhúng thành công trong nhiều sản phẩm phần mềm như là một ngôn ngữ kịch bản, bao gồm trong phần mềm phương pháp phần tử hữu hạn chẳng hạn như Abaqus, một trình dựng mô hình tham số 3D giống như FreeCAD, trong các gói hoạt hình 3D chẳng hạn như 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, Modo, MotionBuilder, Softimage, trong trình tổng hợp hiệu ứng trực quan Nuke, trong các chương trình sửa ảnh 2D như GIMP,[164] Inkscape, Scribus và Paint Shop Pro, và trong các chương trình kí hiệu âm nhạc như trình soạn nhạc và Capella. GNU Debugger sử dụng Python như là một trình in đẹp để thể hiện các cấu trúc phức tạp chẳng hạn như các kiểu chứa (container) trong C++. Esri quảng bá Python là lựa chọn tốt nhất để viết tập lệnh trong ArcGIS. Nó cũng được sử dụng trong một số trò chơi video, và được chọn làm một trong ba ngôn ngữ lập trình có sẵn đầu tiên trong Google App Engine, với hai ngôn ngữ còn lại là Java và Go.

Nhiều hệ điều hành có chứa Python như là một thành phần tiêu chuẩn. Nó đi kèm với hầu hết các bản phân phối Linux,[165] AmigaOS 4 (sử dụng Python 2.7), FreeBSD (dưới dạng gói), NetBSD, OpenBSD (dưới dạng gói) và macOS và có thể được dùng từ dòng lệnh (tức terminal – đầu cuối). Nhiều bản phân phối Linux sử dụng các trình cài đặt được viết bằng Python: Ubuntu sử dụng trình cài đặt Ubiquity, trong khi Red Hat Linux và Fedora sử dụng trình cài đặt Anaconda. Gentoo Linux sử dụng Python trong hệ thống quản lý gói của nó là Portage.

Python còn được sử dụng rộng rãi trong ngành công nghiệp an toàn thông tin, bao gồm phát triển khai thác.

LibreOffice có nhúng Python và dự định sẽ thay thế Java bằng Python. Python Scripting Provider là một tính năng lõi của nó[166] kể từ phiên bản 4.0 phát hành mùng 7 tháng Hai năm 2013.

Ảnh hưởng ngôn ngữ
Thiết kế và triết lý của Python đã ảnh hưởng đến nhiều ngôn ngữ lập trình khác:

CoffeeScript – một ngôn ngữ lập trình biên dịch chéo sang JavaScript – có cú pháp lấy cảm hứng từ Python.
ECMAScript/JavaScript mượn biến lặp (iterator) và bộ sinh từ Python.
GDScript, một ngôn ngữ kịch bản rất giống Python, được tích hợp vào bộ máy trò chơi Godot.[167]
Go được thiết kế nhằm "tăng tốc độ làm việc trong một ngôn ngữ kiểu động giống như Python" và cả hai có cùng cú pháp cắt lát mảng.
Groovy được tạo ra với mong muốn đem triết lí thiết kế của Python vào Java.[168]
Julia được thiết kế để "có thể sử dụng được vào các mục đích chung giống như Python vậy".[169]
Mojo, một tập cha của Python, cố gắng tương thích với cú pháp và hệ sinh thái của Python[170], và có thể chạy nhanh hơn Python lên đến 35.000 lần.[171]
Nim cũng có thụt lề và cú pháp tương đồng.[172]
Matsumoto Yukihiro, tác giả của ngôn ngữ Ruby từng cho biết: "Tôi muốn một ngôn ngữ kịch bản mạnh mẽ hơn Perl và hướng đối tượng nhiều hơn Python. Đó là lí do tôi quyết định thiết kế ngôn ngữ cho riêng mình."[173]
Xem thêm
icon	Cổng thông tin Lập trình máy tính
	Cổng thông tin Phần mềm tự do và nguồn mở
Zen of Python
pip (trình quản lý gói)
Tham khảo
^ “Python 3.12.3 and 3.13.0a6 released” (bằng tiếng Anh). 9 tháng 4 2024. Truy cập 9 tháng 4 2024. Kiểm tra giá trị ngày tháng trong: |access-date= và |date= (trợ giúp)
^ “PEP 483 -- The Theory of Type Hints”. Python.org.
^ Phần mở rộng tệp .pyo đã bị loại bỏ trong Python 3.5. Xem PEP 0488
^ Holth, Moore (ngày 30 tháng 3 năm 2014). “PEP 0441 -- Improving Python ZIP Application Support”. Truy cập ngày 12 tháng 11 năm 2015.
^ “Starlark Language”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 25 tháng 5 năm 2019.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Truy cập ngày 22 tháng 3 năm 2007.
^ Kuchling, Andrew M. (ngày 22 tháng 12 năm 2006). “Interview with Guido van Rossum (July 1998)”. amk.ca. Bản gốc lưu trữ ngày 1 tháng 5 năm 2007. Truy cập ngày 12 tháng 3 năm 2012.
^ van Rossum, Guido (1993). “An Introduction to Python for UNIX/C Programmers”. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.
^ a b “Classes”. The Python Tutorial. Python Software Foundation. Truy cập ngày 20 tháng 2 năm 2012. It is a mixture of the class mechanisms found in C++ and Modula-3
^ Lundh, Fredrik. “Call By Object”. effbot.org. Bản gốc lưu trữ ngày 23 tháng 11 năm 2019. Truy cập ngày 21 tháng 11 năm 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.
^ Simionato, Michele. “The Python 2.3 Method Resolution Order”. Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers
^ Kuchling, A. M. “Functional Programming HOWTO”. Python v2.7.2 documentation. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (ngày 18 tháng 5 năm 2001). “PEP 255 – Simple Generators”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (ngày 2 tháng 9 năm 2004). “PEP 318 – Decorators for Functions and Methods”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 24 tháng 2 năm 2012.
^ “More Control Flow Tools”. Python 3 documentation. Python Software Foundation. Truy cập ngày 24 tháng 7 năm 2015.
^ “CoffeeScript borrows chained comparisons from Python”.
^ “Genie Language - A brief guide”. Truy cập ngày 28 tháng 12 năm 2015.
^ “Perl and Python influences in JavaScript”. www.2ality.com. ngày 24 tháng 2 năm 2013. Truy cập ngày 15 tháng 5 năm 2015.
^ Rauschmayer, Axel. “Chapter 3: The Nature of JavaScript; Influences”. O'Reilly, Speaking JavaScript. Bản gốc lưu trữ ngày 26 tháng 12 năm 2018. Truy cập ngày 15 tháng 5 năm 2015.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ Ring Team (ngày 4 tháng 12 năm 2017). “Ring and other languages”. ring-lang.net. ring-lang.
^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. tr. 3. ISBN 978-1-59059-881-8.
^ Lattner, Chris (ngày 3 tháng 6 năm 2014). “Chris Lattner's Homepage”. Chris Lattner. Truy cập ngày 3 tháng 6 năm 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.
^ Bài phỏng vấn Guido van Rossum [1].
^ “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal”. www.linuxjournal.com (bằng tiếng Anh).
^ “Python boss Guido van Rossum steps down after 30 years | TheINQUIRER”. theinquirer.net (bằng tiếng Anh). Bản gốc lưu trữ ngày 19 tháng 2 năm 2019. Truy cập ngày 25 tháng 8 năm 2018.
^ “About the Python Software Foundation”. Truy cập 28 tháng 8 năm 2019.
^ “Stack Overflow Developer Survey 2020”. Stack Overflow. Lưu trữ bản gốc ngày 2 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “The State of Developer Ecosystem in 2020 Infographic”. JetBrains: Developer Tools for Professionals and Teams (bằng tiếng Anh). Lưu trữ bản gốc ngày 1 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “index | TIOBE - The Software Quality Company”. www.tiobe.com. Lưu trữ bản gốc ngày 25 tháng 2 năm 2018. Truy cập ngày 2 tháng 2 năm 2021. Python has won the TIOBE programming language of the year award! This is for the fourth time in the history, which is a record! The title is awarded to the programming language that has gained most popularity in one year.
^ “PYPL PopularitY of Programming Language index”. pypl.github.io (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 3 năm 2017. Truy cập ngày 26 tháng 3 năm 2021.
^ a b Venners, Bill (13 tháng 1 năm 2003). “The Making of Python”. Artima Developer. Artima. Lưu trữ bản gốc ngày 1 tháng 9 năm 2016. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (29 tháng 8 năm 2000). “SETL (was: Lukewarm about range literals)”. Python-Dev (Danh sách thư). Lưu trữ bản gốc ngày 14 tháng 7 năm 2018. Truy cập ngày 13 tháng 3 năm 2011.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (20 tháng 1 năm 2009). “A Brief Timeline of Python”. The History of Python. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 20 tháng 1 năm 2009.
^ Fairchild, Carlie (12 tháng 7 năm 2018). “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life”. Linux Journal. Lưu trữ bản gốc ngày 13 tháng 7 năm 2018. Truy cập ngày 13 tháng 7 năm 2018.
^ “PEP 8100”. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 4 tháng 5 năm 2019.
^ “PEP 13 -- Python Language Governance”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 5 năm 2021. Truy cập ngày 25 tháng 8 năm 2021.
^ Kuchling, A. M.; Zadka, Moshe (16 tháng 10 năm 2000). “What's New in Python 2.0”. Python Software Foundation. Lưu trữ bản gốc ngày 23 tháng 10 năm 2012. Truy cập ngày 11 tháng 2 năm 2012.
^ “Python 3.0 Release”. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 8 tháng 7 năm 2009.
^ van Rossum, Guido (5 tháng 4 năm 2006). “PEP 3000 – Python 3000”. Python Enhancement Proposals. Python Software Foundation. Bản gốc lưu trữ ngày 3 tháng 3 năm 2016. Truy cập ngày 27 tháng 6 năm 2009.
^ “2to3 – Automated Python 2 to 3 code translation”. docs.python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 2 tháng 2 năm 2021.
^ Langa, Łukasz (19 tháng 2 năm 2021). “Python Insider: Python 3.9.2 and 3.8.8 are now available”. Python Insider. Lưu trữ bản gốc ngày 25 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “Red Hat Customer Portal - Access to 24x7 support and knowledge”. access.redhat.com. Lưu trữ bản gốc ngày 6 tháng 3 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-3177”. cve.mitre.org. Lưu trữ bản gốc ngày 27 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-23336”. cve.mitre.org. Lưu trữ bản gốc ngày 24 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ Langa, Łukasz (24 tháng 3 năm 2022). “Python Insider: Python 3.10.4 and 3.9.12 are now available out of schedule”. Python Insider. Lưu trữ bản gốc ngày 21 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (16 tháng 3 năm 2022). “Python Insider: Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (17 tháng 5 năm 2022). “Python Insider: Python 3.9.13 is now available”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 5 năm 2022. Truy cập ngày 21 tháng 5 năm 2022.
^ “Python Insider: Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available”. pythoninsider.blogspot.com. 7 tháng 9 năm 2022. Lưu trữ bản gốc ngày 13 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “CVE - CVE-2020-10735”. cve.mitre.org. Lưu trữ bản gốc ngày 20 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “What's New In Python 3.12”. Python documentation. Truy cập 26 tháng 11 năm 2023.
^ The Cain Gang Ltd. “Python Metaclasses: Who? Why? When?” (PDF). Bản gốc (PDF) lưu trữ ngày 30 tháng 5 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “3.3. Special method names”. The Python Language Reference. Python Software Foundation. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “PyDBC: method preconditions, method postconditions and class invariants for Python”. Lưu trữ bản gốc ngày 23 tháng 11 năm 2019. Truy cập ngày 24 tháng 9 năm 2011.
^ “Contracts for Python”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “PyDatalog”. Lưu trữ bản gốc ngày 13 tháng 6 năm 2020. Truy cập ngày 22 tháng 7 năm 2012.
^ “Extending and Embedding the Python Interpreter: Reference Counts” (bằng tiếng Anh). Docs.python.org. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 5 tháng 6 năm 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.
^ a b Hettinger, Raymond (30 tháng 1 năm 2002). “PEP 289 – Generator Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “6.5 itertools – Functions creating iterators for efficient looping”. Docs.python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 22 tháng 11 năm 2016.
^ “PEP 206 -- Python Advanced Library”. Python.org.
^ Peters, Tim (19 tháng 8 năm 2004). “PEP 20 – The Zen of Python”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 26 tháng 12 năm 2018. Truy cập ngày 24 tháng 11 năm 2008.
^ a b “Python Culture”. ebeab. 21 tháng 1 năm 2014. Bản gốc lưu trữ ngày 30 tháng 1 năm 2014.
^ “General Python FAQ”. Python v2.7.3 documentation. Docs.python.org. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 4 tháng 6 năm 2020.
^ “15 Ways Python Is a Powerful Force on the Web”. Bản gốc lưu trữ ngày 11 tháng 5 năm 2019. Truy cập ngày 3 tháng 7 năm 2018.
^ “8.18. pprint — Data pretty printer — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 22 tháng 1 năm 2021. Truy cập ngày 4 tháng 6 năm 2020.
^ Clark, Robert (26 tháng 4 năm 2019). “How to be Pythonic and why you should care”. Medium. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “Code Style — The Hitchhiker's Guide to Python”. docs.python-guide.org. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ Goodger, David. “Code Like a Pythonista: Idiomatic Python”. Bản gốc lưu trữ ngày 27 tháng 5 năm 2014. Truy cập ngày 24 tháng 3 năm 2009.
^ “How to think like a Pythonista”. Bản gốc lưu trữ ngày 23 tháng 3 năm 2018. Truy cập ngày 24 tháng 3 năm 2009.
^ “Is Python a good language for beginning programmers?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 21 tháng 3 năm 2007.
^ Guttag, John V. (12 tháng 8 năm 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.
^ a b “PEP 8 -- Style Guide for Python Code”. Python.org. Lưu trữ bản gốc ngày 17 tháng 4 năm 2019. Truy cập ngày 26 tháng 3 năm 2019.
^ “Highlights: Python 2.5”. Python.org. Lưu trữ bản gốc ngày 4 tháng 8 năm 2019. Truy cập ngày 20 tháng 3 năm 2018.
^ “division”. python.org. Lưu trữ bản gốc ngày 20 tháng 7 năm 2006. Truy cập ngày 30 tháng 7 năm 2014.
^ “PEP 0465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “Python 3.5.1 Release and Changelog”. python.org. Lưu trữ bản gốc ngày 14 tháng 5 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “What's New in Python 3.8”. Lưu trữ bản gốc ngày 8 tháng 6 năm 2020. Truy cập ngày 14 tháng 10 năm 2019.
^ “Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ “Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ van Rossum, Guido; Hettinger, Raymond (7 tháng 2 năm 2003). “PEP 308 – Conditional Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 13 tháng 3 năm 2016. Truy cập ngày 13 tháng 7 năm 2011.
^ “4. Built-in Types — Python 3.6.3rc1 documentation”. python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 1 tháng 10 năm 2017.
^ “5.3. Tuples and Sequences — Python 3.7.1rc2 documentation”. python.org. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 17 tháng 10 năm 2018.
^ a b “PEP 498 -- Literal String Interpolation”. python.org. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 8 tháng 3 năm 2017.
^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code (bằng tiếng Anh). No Starch Press. tr. 322. ISBN 978-1-59327-966-0. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 7 tháng 7 năm 2021.
^ “The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1”. Bản gốc lưu trữ ngày 26 tháng 10 năm 2012. Truy cập ngày 12 tháng 1 năm 2011.
^ “Type hinting for Python”. LWN.net. 24 tháng 12 năm 2014. Lưu trữ bản gốc ngày 20 tháng 6 năm 2019. Truy cập ngày 5 tháng 5 năm 2015.
^ “mypy - Optional Static Typing for Python”. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 28 tháng 1 năm 2017.
^ a b “15. Floating Point Arithmetic: Issues and Limitations — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 6 tháng 6 năm 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".
^ Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 237 – Unifying Long Integers and Integers”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ a b “Built-in Types”. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 3 tháng 10 năm 2019.
^ “PEP 465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 29 tháng 5 năm 2020. Truy cập ngày 3 tháng 7 năm 2018.
^ a b Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 238 – Changing the Division Operator”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 23 tháng 10 năm 2013.
^ “Why Python's Integer Division Floors”. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 25 tháng 8 năm 2010.
^ “round”, The Python standard library, release 3.2, §2: Built-in functions, lưu trữ bản gốc ngày 25 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ “round”, The Python standard library, release 2.7, §2: Built-in functions, lưu trữ bản gốc ngày 27 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ Beazley, David M. (2009). Python Essential Reference (ấn bản 4). tr. 66.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (ấn bản 2). tr. 206.
^ Batista, Facundo. “PEP 0327 -- Decimal Data Type”. Python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 26 tháng 9 năm 2015.
^ “What's New in Python 2.6 — Python v2.6.9 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 12 năm 2019. Truy cập ngày 26 tháng 9 năm 2015.
^ “10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke”. www.stat.washington.edu. Bản gốc lưu trữ ngày 31 tháng 5 năm 2020. Truy cập ngày 3 tháng 2 năm 2019.
^ Shell, Scott (17 tháng 6 năm 2014). “An introduction to Python for scientific computing” (PDF). Lưu trữ (PDF) bản gốc ngày 4 tháng 2 năm 2019. Truy cập ngày 3 tháng 2 năm 2019.
^ Piotrowski, Przemyslaw (tháng 7 năm 2006). “Build a Rapid Web Development Environment for Python Server Pages and Oracle”. Oracle Technology Network. Oracle. Lưu trữ bản gốc ngày 2 tháng 4 năm 2019. Truy cập ngày 12 tháng 3 năm 2012.
^ Batista, Facundo (17 tháng 10 năm 2003). “PEP 327 – Decimal Data Type”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 24 tháng 11 năm 2008.
^ Eby, Phillip J. (7 tháng 12 năm 2003). “PEP 333 – Python Web Server Gateway Interface v1.0”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “Modulecounts”. Modulecounts. 28 tháng 9 năm 2021. Lưu trữ bản gốc ngày 24 tháng 9 năm 2021. Truy cập ngày 28 tháng 9 năm 2021.
^ Enthought, Canopy. “Canopy”. www.enthought.com. Bản gốc lưu trữ ngày 15 tháng 7 năm 2017. Truy cập ngày 20 tháng 8 năm 2016.
^ “Mailman 3 Why aren't we allowing the use of C11? - Python-Dev - python.org”. mail.python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Issue 35473: Intel compiler (icc) does not fully support C11 Features, including atomics - Python tracker”. bugs.python.org. Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “4. Building C and C++ Extensions — Python 3.9.2 documentation”. docs.python.org. Lưu trữ bản gốc ngày 3 tháng 3 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Changelog — Python 3.9.0 documentation”. docs.python.org. Lưu trữ bản gốc ngày 7 tháng 2 năm 2021. Truy cập ngày 8 tháng 2 năm 2021.
^ “Download Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 8 tháng 12 năm 2020. Truy cập ngày 13 tháng 12 năm 2020.
^ “history [vmspython]”. www.vmspython.org. Lưu trữ bản gốc ngày 2 tháng 12 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “Download Python for Other Platforms”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 11 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “PyPy compatibility”. Pypy.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 3 tháng 12 năm 2012.
^ “speed comparison between CPython and Pypy”. Speed.pypy.org. Lưu trữ bản gốc ngày 10 tháng 5 năm 2021. Truy cập ngày 3 tháng 12 năm 2012.
^ “Application-level Stackless features — PyPy 2.0.2 documentation”. Doc.pypy.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 17 tháng 7 năm 2013.
^ “Python-for-EV3”. LEGO Education (bằng tiếng Anh). Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 17 tháng 4 năm 2019.
^ Yegulalp, Serdar (29 tháng 10 năm 2020). “Pyston returns from the dead to speed Python”. InfoWorld. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 26 tháng 1 năm 2021.
^ “cinder: Instagram's performance oriented fork of CPython” (bằng tiếng Anh). Lưu trữ bản gốc ngày 4 tháng 5 năm 2021. Truy cập ngày 4 tháng 5 năm 2021.
^ “Brython”. brython.info. Lưu trữ bản gốc ngày 3 tháng 8 năm 2018. Truy cập ngày 21 tháng 1 năm 2021.
^ “Transcrypt – Python in the browser”. transcrypt.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 8 năm 2018. Truy cập ngày 22 tháng 12 năm 2020.
^ “Transcrypt: Anatomy of a Python to JavaScript Compiler”. InfoQ. Lưu trữ bản gốc ngày 5 tháng 12 năm 2020. Truy cập ngày 20 tháng 1 năm 2021.
^ “Codon: Differences with Python”. Lưu trữ bản gốc ngày 25 tháng 5 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ Lawson, Loraine (14 tháng 3 năm 2023). “MIT-Created Compiler Speeds up Python Code”. The New Stack (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 4 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ “Nuitka Home | Nuitka Home”. nuitka.net (bằng tiếng Anh). Lưu trữ bản gốc ngày 30 tháng 5 năm 2020. Truy cập ngày 18 tháng 8 năm 2017.
^ Borderies, Olivier (24 tháng 1 năm 2019). “Pythran: Python at C++ speed !”. Medium. Lưu trữ bản gốc ngày 25 tháng 3 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Pythran — Pythran 0.9.5 documentation”. pythran.readthedocs.io. Lưu trữ bản gốc ngày 19 tháng 2 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Archived copy” (PDF). Lưu trữ (PDF) bản gốc ngày 18 tháng 4 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “google/grumpy”. 10 tháng 4 năm 2020. Lưu trữ bản gốc ngày 15 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020 – qua GitHub.
^ “Projects”. opensource.google. Lưu trữ bản gốc ngày 24 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ Francisco, Thomas Claburn in San. “Google's Grumpy code makes Python Go”. www.theregister.com. Lưu trữ bản gốc ngày 7 tháng 3 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “IronPython.net /”. ironpython.net. Lưu trữ bản gốc ngày 17 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ “Jython FAQ”. www.jython.org. Lưu trữ bản gốc ngày 22 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 tháng 6 năm 2000). “PEP 1 – PEP Purpose and Guidelines”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 19 tháng 4 năm 2011.
^ Cannon, Brett. “Guido, Some Guys, and a Mailing List: How Python is Developed”. python.org. Python Software Foundation. Bản gốc lưu trữ ngày 1 tháng 6 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Developer's Guide — Python Developer's Guide”. devguide.python.org. Lưu trữ bản gốc ngày 9 tháng 11 năm 2020. Truy cập ngày 17 tháng 12 năm 2019.
^ Hughes, Owen (24 tháng 5 năm 2021). “Programming languages: Why Python 4.0 might never arrive, according to its creator”. TechRepublic (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 7 năm 2022. Truy cập ngày 16 tháng 5 năm 2022.
^ “PEP 602 -- Annual Release Cycle for Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 6 tháng 11 năm 2019.
^ “Changing the Python release cadence [LWN.net]”. lwn.net. Lưu trữ bản gốc ngày 6 tháng 11 năm 2019. Truy cập ngày 6 tháng 11 năm 2019.
^ Norwitz, Neal (8 tháng 4 năm 2002). “[Python-Dev] Release Schedules (was Stability & change)”. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Buildbot”. Python Developer's Guide. Python Software Foundation. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “1. Extending Python with C or C++ — Python 3.9.1 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 6 năm 2020. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 623 -- Remove wstr from Unicode”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 3 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 634 -- Structural Pattern Matching: Specification”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 5 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ Prechelt, Lutz (14 tháng 3 năm 2000). “An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl” (PDF). Lưu trữ (PDF) bản gốc ngày 3 tháng 1 năm 2020. Truy cập ngày 30 tháng 8 năm 2013.
^ “Quotes about Python”. Python Software Foundation. Lưu trữ bản gốc ngày 3 tháng 6 năm 2020. Truy cập ngày 8 tháng 1 năm 2012.
^ “Organizations Using Python”. Python Software Foundation. Lưu trữ bản gốc ngày 21 tháng 8 năm 2018. Truy cập ngày 15 tháng 1 năm 2009.
^ “Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers”. Facebook for Developers (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 19 tháng 6 năm 2018.
^ “What Powers Instagram: Hundreds of Instances, Dozens of Technologies”. Instagram Engineering. 11 tháng 12 năm 2016. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 27 tháng 5 năm 2019.
^ “How we use Python at Spotify”. Spotify Labs (bằng tiếng Anh). 20 tháng 3 năm 2013. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 25 tháng 7 năm 2018.
^ GitHub - reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, lưu trữ bản gốc ngày 1 tháng 6 năm 2020, truy cập ngày 20 tháng 3 năm 2019
^ “Usage statistics and market share of Python for websites”. 2012. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 18 tháng 12 năm 2012.
^ Oliphant, Travis (2007). “Python for Scientific Computing”. Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 10 tháng 4 năm 2015.
^ Millman, K. Jarrod; Aivazis, Michael (2011). “Python for Scientists and Engineers”. Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 7 tháng 7 năm 2014.
^ Science education with SageMath, Innovative Computing in Science Education, Bản gốc lưu trữ ngày 15 tháng 6 năm 2020, truy cập ngày 22 tháng 4 năm 2019
^ “OpenCV: OpenCV-Python Tutorials”. docs.opencv.org. Lưu trữ bản gốc ngày 23 tháng 9 năm 2020. Truy cập ngày 14 tháng 9 năm 2020.
^ Dean, Jeff; Monga, Rajat; và đồng nghiệp (9 tháng 11 năm 2015). “TensorFlow: Large-scale machine learning on heterogeneous systems” (PDF). TensorFlow.org. Google Research. Lưu trữ (PDF) bản gốc ngày 20 tháng 11 năm 2015. Truy cập ngày 10 tháng 11 năm 2015.
^ Piatetsky, Gregory. “Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis”. KDnuggets. KDnuggets. Lưu trữ bản gốc ngày 15 tháng 11 năm 2019. Truy cập ngày 30 tháng 5 năm 2018.
^ “Who is using scikit-learn? — scikit-learn 0.20.1 documentation”. scikit-learn.org. Lưu trữ bản gốc ngày 6 tháng 5 năm 2020. Truy cập ngày 30 tháng 11 năm 2018.
^ Jouppi, Norm. “Google supercharges machine learning tasks with TPU custom chip”. Google Cloud Platform Blog. Lưu trữ bản gốc ngày 18 tháng 5 năm 2016. Truy cập ngày 19 tháng 5 năm 2016.
^ “Tkinter — Python interface to TCL/Tk”. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 9 tháng 6 năm 2023.
^ “Python Tkinter Tutorial”. 3 tháng 6 năm 2020. Lưu trữ bản gốc ngày 9 tháng 6 năm 2023. Truy cập ngày 9 tháng 6 năm 2023.
^ “Installers for GIMP for Windows - Frequently Asked Questions”. 26 tháng 7 năm 2013. Bản gốc lưu trữ ngày 17 tháng 7 năm 2013. Truy cập ngày 26 tháng 7 năm 2013.
^ “Python Setup and Usage”. Python Software Foundation. Lưu trữ bản gốc ngày 17 tháng 6 năm 2020. Truy cập ngày 10 tháng 1 năm 2020.
^ “4.0 New Features and Fixes”. LibreOffice.org. The Document Foundation. 2013. Lưu trữ bản gốc ngày 9 tháng 2 năm 2014. Truy cập ngày 25 tháng 2 năm 2013.
^ “Frequently asked questions”. Godot Engine documentation. Lưu trữ bản gốc ngày 28 tháng 4 năm 2021. Truy cập ngày 10 tháng 5 năm 2021.
^ Strachan, James (29 tháng 8 năm 2003). “Groovy – the birth of a new dynamic language for the Java platform”. Bản gốc lưu trữ ngày 5 tháng 4 năm 2007. Truy cập ngày 11 tháng 6 năm 2007.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Lưu trữ bản gốc ngày 2 tháng 5 năm 2020. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ “Modular Docs - Why Mojo🔥”. docs.modular.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.
^ Spencer, Michael (4 tháng 5 năm 2023). “What is Mojo Programming Language?”. datasciencelearningcenter.substack.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023.
^ Yegulalp, Serdar (16 tháng 1 năm 2017). “Nim language draws from best of Python, Rust, Go, and Lisp”. InfoWorld. Lưu trữ bản gốc ngày 13 tháng 10 năm 2018. Truy cập ngày 7 tháng 6 năm 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).
^ “An Interview with the Creator of Ruby”. Linuxdevcenter.com. Lưu trữ bản gốc ngày 28 tháng 4 năm 2018. Truy cập ngày 3 tháng 12 năm 2012.
Liên kết ngoài
Tìm hiểu thêm về
Python
tại các dự án liên quan
Tìm kiếm Commons	Tập tin phương tiện từ Commons
Tìm kiếm Wikiquote	Danh ngôn từ Wikiquote
Tìm kiếm Wikibooks	Tủ sách giáo khoa từ Wikibooks
Tìm kiếm Wikiversity	Tài nguyên học tập từ Wikiversity
Tìm kiếm Wikidata	Dữ liệu từ Wikidata
Trang chủ chính thức
Python Wiki
Tài liệu Python
Python Cheese Shop – Kho đựng phần mềm viết bằng Python; trước đây gọi là Python Package Index (PyPI)
xts
Ngôn ngữ lập trình
xts
Phần mềm tự do nguồn mở
Tiêu đề chuẩn Sửa dữ liệu tại Wikidata	
BNF: cb13560465c (data)GND: 4434275-5LCCN: sh96008834NKC: ph170668SUDOC: 051626225
Thể loại: Ngôn ngữ lập trình hướng đối tượngPython (ngôn ngữ lập trình)Phần mềm tự doNgôn ngữ lập trình giáo dụcPhát minh của Hà LanPhần mềm đa nền tảngNgôn ngữ lập trình đa mẫu hìnhNgôn ngữ lập trìnhHọ ngôn ngữ lập trình SmalltalkNgôn ngữ lập trình đồng thờiPhần mềm tự do đa nền tảngNgôn ngữ lập trình được nhập độngNgôn ngữ lập trình bậc caoNgôn ngữ lập trình đối sánh mẫu
Trang này được sửa đổi lần cuối vào ngày 28 tháng 12 năm 2023, 15:26.
Văn bản được phát hành theo Giấy phép Creative Commons Ghi công–Chia sẻ tương tự; có thể áp dụng điều khoản bổ sung. Với việc sử dụng trang web này, bạn chấp nhận Điều khoản Sử dụng và Quy định quyền riêng tư. Wikipedia® là thương hiệu đã đăng ký của Wikimedia Foundation, Inc., một tổ chức phi lợi nhuận.
Quy định quyền riêng tưGiới thiệu WikipediaLời phủ nhậnBộ Quy tắc Ứng xử ChungLập trình viênThống kêTuyên bố về cookiePhiên bản di độngWikimedia FoundationPowered by MediaWiki
Chuyển đổi chiều rộng nội dung giới hạn

Trình đơn chính

WikipediaBách khoa toàn thư mở
Tìm kiếm trên Wikipedia
Tìm kiếm
Tạo tài khoản
Đăng nhập

Công cụ cá nhân
Tính năng Tạo tài khoản · Hướng dẫn người mới · Quy định · Viết bài mới · Chỗ thử · Câu thường hỏi · Sách hướng dẫn · Dịch bài · Thêm chú thích · Thảo luận · Liên hệ quản lý
Tiêu chuẩn bài viết Đủ độ nổi bật, văn phong trung lập và có nguồn đáng tin cậy · Không spam quảng cáo · Không vi phạm bản quyền · Cẩm nang biên soạn
Đóng (mở lại bằng cách xóa cookie dismissASN1 trong trình duyệt)
Nội dung ẩn
Đầu
Lịch sử
Triết lý thiết kế và tính năng
Cú pháp
Hiện/ẩn mục Cú pháp
Thư viện
Môi trường phát triển
Các bản triển khai
Hiện/ẩn mục Các bản triển khai
Phát triển
Sự phổ biến
Sử dụng
Ảnh hưởng ngôn ngữ
Xem thêm
Tham khảo
Liên kết ngoài
Python (ngôn ngữ lập trình)

Bài viết
Thảo luận
Đọc
Sửa đổi
Sửa mã nguồn
Xem lịch sử

Công cụ
Bách khoa toàn thư mở Wikipedia
Python

Mẫu hình	Ngôn ngữ lập trình hướng đối tượng, lập trình câu lệnh, lập trình hàm, lập trình thủ tục, lập trình phản xạ
Thiết kế bởi	Guido van Rossum
Nhà phát triển	Python Software Foundation
Xuất hiện lần đầu	1991; 33 năm trước
Phiên bản ổn định	
3.12.3[1] Sửa đổi tại Wikidata / 9 tháng 4 2024
Kiểm tra kiểu	Vịt, động, mạnh
từ phiên bản 3.5:

dần dần[2]
Giấy phép	Giấy phép Python Software Foundation
Phần mở rộng tên tập tin	.py,.pyc,.pyd,.pyo (trước 3.5),[3] .pyw,.pyz (từ 3.5)[4]
Trang mạng	www.python.org
Các bản triển khai lớn
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Phương ngữ
Cython, RPython, Starlark[5]
Ảnh hưởng từ
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl, Smalltalk
Ảnh hưởng tới
Boo, Cobra, CoffeeScript,[16] D, F#, Falcon, Genie,[17] Go, Apache Groovy, JavaScript,[18][19] Julia,[20] Nim, Ring,[21] Ruby,[22] Swift[23]
Python (phát âm tiếng Anh: /ˈpaɪθɑːn/) là một ngôn ngữ lập trình bậc cao cho các mục đích lập trình đa năng, do Guido van Rossum tạo ra và lần đầu ra mắt vào năm 1991. Python được thiết kế với ưu điểm mạnh là dễ đọc, dễ học và dễ nhớ. Python là ngôn ngữ có hình thức rất sáng sủa, cấu trúc rõ ràng, thuận tiện cho người mới học lập trình và là ngôn ngữ lập trình dễ học; được dùng rộng rãi trong phát triển trí tuệ nhân tạo. Cấu trúc của Python còn cho phép người sử dụng viết mã lệnh với số lần gõ phím tối thiểu.[24] Vào tháng 7 năm 2018, van Rossum đã từ chức lãnh đạo trong cộng đồng ngôn ngữ Python sau 30 năm làm việc.[25][26]

Python hoàn toàn tạo kiểu động và dùng cơ chế cấp phát bộ nhớ tự động; do vậy nó tương tự như Perl, Ruby, Scheme, Smalltalk, và Tcl. Python được phát triển trong một dự án mã mở, do tổ chức phi lợi nhuận Python Software Foundation quản lý.[27]

Ban đầu, Python được phát triển để chạy trên nền Unix. Nhưng rồi theo thời gian, Python dần mở rộng sang mọi hệ điều hành từ MS-DOS đến Mac OS, OS/2, Windows, Linux và các hệ điều hành khác thuộc họ Unix. Mặc dù sự phát triển của Python có sự đóng góp của rất nhiều cá nhân, nhưng Guido van Rossum hiện nay vẫn là tác giả chủ yếu của Python. Ông giữ vai trò chủ chốt trong việc quyết định hướng phát triển của Python.

Python luôn được xếp hạng vào những ngôn ngữ lập trình phổ biến nhất.[28][29][30][31]


Guido van Rossum, nhà sáng lập ngôn ngữ Python.
Lịch sử
Bài chi tiết: Lịch sử Python
Python đã được Guido van Rossum tạo ra vào những năm 1980[32] tại Trung tâm Toán học – Tin học (Centrum Wiskunde & Informatica, CWI) ở Hà Lan như là một ngôn ngữ kế tục ngôn ngữ ABC – một ngôn ngữ được lấy cảm hứng từ SETL,[33] có khả năng xử lí ngoại lệ và giao tiếp với hệ điều hành Amoeba.[34] Nó bắt đầu được triển khai vào tháng 12 năm 1989.[35] Van Rossum đã tự mình gánh vác trách nhiệm cho dự án, với vai trò là nhà phát triển chính, cho đến ngày 12 tháng 7 năm 2018, khi ông thông báo rằng ông sẽ rời bỏ trách nhiệm của ông và cả danh hiệu "Nhà độc tài nhân từ cho cuộc sống" của Python, một danh hiệu mà cộng đồng Python đã trao tặng cho ông vì sự tận tụy lâu dài của ông với vai trò là người ra quyết định chính cho dự án.[36] Vào tháng 1 năm 2019, các nhà phát triển phần lõi Python đã bầu ra một "Hội đồng chèo lái" gồm năm thành viên để dẫn dắt dự án.[37][38]

Python 2.0 được ra mắt vào ngày 16 tháng 10 năm 2000, với nhiều tính năng mới mẻ, bao gồm một bộ dọn rác phát hiện theo chu kỳ và khả năng hỗ trợ Unicode.[39]

Python 3.0 được ra mắt vào ngày mùng 3 tháng 12 năm 2008. Đây là một phiên bản lớn của Python không tương thích ngược hoàn toàn.[40] Nhiều tính năng lớn của nó đã được chuyển mã ngược (backport) về loạt phiên bản Python 2.6.x và 2.7.x.[41] Các bản phát hành của Python 3 có đi kèm với công cụ 2to3, có tác dụng tự động hoá việc dịch mã Python 2 sang Python 3.[42]

Python 3.9.2 và 3.8.8 được xúc tiến[43] vì tất cả các phiên bản trước của Python (bao gồm cả 2.7)[44] gặp một số vấn đề bảo mật, có thể dẫn đến thực thị mã từ xa[45] và "đầu độc" bộ nhớ đệm.[46]

Trong năm 2022, Python 3.10.4 và 3.9.12 được xúc tiến[47] cùng với 3.8.13 và 3.7.13, nguyên nhân là do một vài vấn đề về bảo mật.[48] Khi Python 3.9.13 được phát hành vào tháng Năm năm 2022, loạt phiên bản 3.9 (cùng với loạt 3.8 và 3.7) được thông báo rằng sẽ chỉ nhận được các bản vá bảo mật trong tương lai.[49] Vào ngày 7 tháng Chín năm 2022, bốn bản cập nhật mới được phát hành do có khả năng xảy ra một cuộc tấn công từ chối dịch vụ: 3.10.7, 3.9.14, 3.8.14 và 3.7.14.[50][51]

Tính đến tháng 10 năm 2023, Python 3.12 là bản phát hành ổn định mới nhất. Một số thay đổi đáng chú ý từ bản 3.11 bao gồm các thay đổi về ngôn ngữ và thư viện chuẩn.[52]

Triết lý thiết kế và tính năng
Python là một ngôn ngữ lập trình đa mẫu hình, lập trình hướng đối tượng và lập trình cấu trúc được hỗ trợ hoàn toàn, và nhiều tính năng của nó cũng hỗ trợ lập trình hàm và lập trình hướng khía cạnh (bao gồm siêu lập trình[53] và siêu đối tượng (phương thức thần kỳ)).[54] Các mẫu hình khác cũng được hỗ trợ thông qua các phần mở rộng, bao gồm thiết kế theo hợp đồng[55][56] và lập trình logic.[57]

Python sử dụng kiểu động và một dạng kết hợp giữa đếm tham chiếu và bộ dọn rác kiểm tra theo chu kì để quản lí bộ nhớ.[58] Nó cũng có tính năng phân giải tên động (liên kết muộn), cho phép liên kết các tên biến và phương thức trong quá trình thực thi chương trình.

Thiết kế của Python cung cấp một số tính năng cho lập trình hàm giống như trong ngôn ngữ Lisp. Python có các hàm filter, map và reduce; thông hiểu danh sách (list comprehension), từ điển (dictionary), tập hợp (set), và các biểu thức bộ sinh (generator).[59] Thư viện chuẩn cũng có hai mô đun (itertools và functools) triển khai các công cụ hàm được vay mượn từ Haskell và Standard ML.[60]

Triết lý căn bản của ngôn ngữ Python được trình bày trong tài liệu The Zen of Python (PEP 20), có dạng thơ Haiku, tóm gọn như sau:

Đẹp đẽ tốt hơn xấu xí
Minh bạch tốt hơn ngầm định
Đơn giản tốt hơn phức tạp
Phức tạp tốt hơn rắc rối
Tính dễ đọc rất quan trọng.
Thay vì tích hợp hết tất cả các tính năng vào phần cốt lõi, Python được thiết kế để dễ dàng mở rộng (bằng các mô đun). Tính mô đun nhỏ gọn này đã làm cho Python trở nên phổ biến như là một cách thêm các giao diện lập trình được vào các ứng dụng hiện có. Tầm nhìn của Van Rossum về một ngôn ngữ có phần lõi nhỏ với một thư viện chuẩn rộng lớn và một trình thông dịch dễ dàng mở rộng bắt nguồn từ việc ông nản lòng trước ABC, một ngôn ngữ lập trình tán thành hướng tiếp cận ngược lại.[32] Python thường được mô tả là một ngôn ngữ "tặng kèm pin" nhờ vào thư viện chuẩn bao quát của nó.[61]

Python nỗ lực hướng đến một cú pháp đơn giản hơn, gọn gàng hơn trong khi vẫn cho các nhà phát triển lựa chọn phương pháp viết mã của họ. Đối lập với khẩu hiệu "có nhiều hơn một cách để làm việc này," triết lý thiết kế của Python lại nằm trong châm ngôn "chỉ nên có một— và tốt nhất là chỉ một—cách rõ ràng để làm việc này".[62] Alex Martelli, một Viện sĩ (Fellow) tại Tổ chức Phần mềm Python (Python Software Foundation) và là một tác giả viết sách Python, viết rằng "Mô tả một thứ gì đó là "tài tình" không được coi là một lời khen ngợi trong văn hoá Python."[63]

Các nhà phát triển Python nỗ lực tránh xa việc tối ưu hoá quá sớm và không chấp nhận các bản vá không cải thiện đáng kể tốc độ mà lại làm mất đi tính rõ ràng lên những phần không thiết yếu của bản triển khai tham khảo CPython.[63] Khi cần đến tốc độ, một lập trình viên Python có thể di chuyển các hàm bị giới hạn về thời gian sang các mô đun mở rộng được viết bằng những ngôn ngữ như C, hoặc sử dụng PyPy, một trình biên dịch tức thời. Cython cũng có thể được dùng để phiên dịch một tập lệnh Python sang C và tạo ra các lệnh gọi API ở cấp độ của C trực tiếp vào trình thông dịch Python.

Mục tiêu mà các nhà phát triển Python hướng đến là đem đến niềm vui khi sử dụng ngôn ngữ này. Điều này được thể hiện qua bản thân cái tên – một sự tôn vinh dành cho nhóm hài người Anh Monty Python[64] – và trong một số cách tiếp cận thi thoảng vui tươi trong hướng dẫn và các tài liệu tham khảo, chẳng hạn như một vi dụ có đề cập đến trứng và spam (gợi nhắc đến một tiểu phẩm trong Monty Python) thay cho foo và bar tiêu chuẩn.[65][66]

Một từ ngữ mới phổ biến trong cộng đồng Python là pythonic (đậm chất Python), một từ có thể có nhiều ý nghĩa liên quan đến phong cách lập trình. Nói rằng một phần mã nào đó là pythonic tức là phần mã đó sử dụng tốt các thành ngữ Python, trông tự nhiên hoặc trôi chảy về ngôn ngữ, phù hợp với triết lý tối giản của Python và nhấn mạnh vào tính dễ đọc. Ngược lại, những phần mã khó hiểu hoặc trông như một bản dịch thô từ một ngôn ngữ lập trình khác được gọi là unpythonic (không đậm chất Python).[67][68]

Những người sử dụng và say mê Python, nhất là những người được cho là am hiểu hay có nhiều kinh nghiệm, thường được gọi là các Pythonista.[69][70]

Cú pháp
Bài chi tiết: Cú pháp Python
Python là một ngôn ngữ dễ đọc, dễ hiểu. Định dạng của nó rất gọn gàng về mặt trực quan, và nó thường sử dụng các từ khoá tiếng Anh trong khi các ngôn ngữ khác lại sử dụng các dấu câu. Khác với nhiều ngôn ngữ khác, nó không sử dụng các dấu ngoặc nhọn để giới hạn các khối lệnh, và dấu chấm phẩy cuối câu lệnh rất ít khi được sử dụng dù không bị cấm. Nó có ít ngoại lệ cú pháp và trường hợp đặc biệt hơn C và Pascal.[71]

Thụt lề
Python sử dụng thụt lề bằng khoảng trắng hoặc ký tự tab thay vì dùng ngoặc nhọn hay các từ khoá để giới hạn khối lệnh. Lề thường được thụt vào sau một câu lệnh và thụt ra để đánh dấu kết thúc khối lệnh hiện tại. Cho nên, cấu trúc trực quan của chương trình sẽ thể hiện một cách chính xác cấu trúc ngữ nghĩa của chương trình đó.[72] Tính năng này thỉnh thoảng cũng được gọi là "quy tắc việt vị", một quy tắc cũng xuất hiện ở một số ngôn ngữ; nhưng trong phần lớn ngôn ngữ thì thụt lề không phụ thuộc vào cú pháp. Cỡ thụt lề được khuyến cáo là bốn dấu cách.[73]

Câu lệnh và luồng điều khiển
Một số câu lệnh trong Python gồm có:

Câu lệnh gán, sử dụng một dấu bằng =.
Câu lệnh if: thực thi một khối lệnh nếu thoả mãn điều kiện, sử dụng cùng với else và elif (viết tắt của else-if).
Câu lệnh for: lặp qua một đối tượng lặp được, gán mỗi phần tử và một biến cục bộ để sử dụng trong khối lệnh của vòng lặp.
Câu lệnh while: thực thi một khối lệnh chừng nào điều kiện còn đúng.
Câu lệnh try: cho phép bắt ngoại lệ được nâng lên (raise) trong khối lệnh và dùng vế except để xử lý; câu lệnh cũng đảm bảo rằng phần mã dọn dẹp trong khối finally sẽ được chạy dù có lỗi hay không.
Câu lệnh raise: được dùng để nâng một ngoại lệ hoặc nâng lại một ngoại lệ đã được bắt từ trước.
Câu lệnh class: thực thi một khối lệnh và gắn không gian tên cục bộ của nó vào một lớp, để dùng trong lập trình hướng đối tượng.
Câu lệnh def: định nghĩa một hàm hoặc phương thức.
Câu lệnh with: bao bọc một khối lệnh bằng một bộ quản lí ngữ cảnh (context manager) (ví dụ như khoá luồng lại trước khi chạy mã rồi mở khoá, hoặc mở một tệp rồi đóng tệp lại), cho phép các hành vi kiểu RAII (sự đạt được tài nguyên là sự khởi tạo) và thay thể cho các câu lệnh try/finally thường thấy.[74]
Câu lệnh break: thoát ra khỏi vòng lặp.
Câu lệnh continue: bỏ qua lần lặp này và tiếp tục với mục kế tiếp.
Câu lệnh del: loại bỏ một biến, tức là tham chiếu từ tên đến giá trị sẽ bị xoá và cố gắng sử dụng biến đó sẽ gây lỗi. Một biến đã bị xoá có thể được gán lại.
Câu lệnh pass: đóng vai trò như là một dạng NOP. Câu lệnh này được dùng để tạo các khối lệnh rỗng.
Câu lệnh assert: được dùng trong khi gỡ lỗi để kiểm tra điều kiện nên đúng.
Câu lệnh yield: trả lại giá trị từ một hàm bộ sinh; bản thân yield cũng là một toán tử. Dạng này được dùng để triển khai các đồng thường trình.
Câu lệnh return: trả lại một giá trị từ một hàm hay phương thức.
Câu lệnh import: được dùng để nhập các mô đun chứa các hàm và biến được sử dụng trong chương trình hiện tại.
Câu lệnh gán (=) hoạt động bằng cách liên kết một tên dưới dạng một tham chiếu với một đối tượng được cấp phát động riêng lẻ. Các biến có thể được dùng lại bất cứ lúc nào với bất cứ đối tượng nào. Trong Python, một tên biến chỉ giữ tham chiếu một cách chung chung và không có kiểu dữ liệu cố định đi kèm. Tuy nhiên, tại một thời điểm nhất định, một biến sẽ tham chiếu đến một vài đối tượng có kiểu. Nó được gọi là kiểu động, ngược lại với các ngôn ngữ lập trình kiểu tĩnh với mỗi biến chỉ có thể chứa giá trị của một kiểu nhất định.

Biểu thức
Một số biểu thức trong Python tương tự như những biểu thức trong những ngôn ngữ khác chẳng hạn như C và Java, trong khi số khác thì không:

Phép cộng, trừ và nhân thì đều giống nhau, nhưng hành vi của phép chia thì khác nhau. Có hai loại phép chia trong Python: phép chia phần nguyên (phép chia số nguyên) dùng dấu // và phép chia dấu phẩy động dùng dấu /.[75] Python cũng sử dụng toán tử ** cho phép luỹ thừa.
Từ Python 3.5, toán tử trung tố @ mới đã được giới thiệu. Nó được thiết kể để được sử dụng trong các thư viện như NumPy để nhân ma trận.[76][77]
Từ Python 3.8, cú pháp :=, hay "toán tử moóc" đã được giới thiệu. Nó gán giá trị vào biến trong một phần của một biểu thức lớn hơn.[78]
Trong Python, == so sánh theo giá trị, khác với Java, vốn so sánh các số theo giá trị[79] và các đối tượng theo tham chiếu.[80] (So sánh giá trị trong Java có thể được thực hiện bằng phương thức equals().) Toán tử is của Python có thể được dùng để so sánh danh tính của đối tượng (so sánh theo tham chiếu). Trong Python, các phép so sánh có thể được xâu chuỗi lại với nhau, ví dụ như a <= b <= c.
Python sử dụng các từ khoá and, or, not để so sánh luận lý (boolean) thay vì dùng các loại biểu tượng &&, ||, ! được dùng trong Java và C.
Python có một loại biểu thức được gọi là thông hiểu danh sách (list comprehension) cũng như một loại biểu thức chung được gọi là biểu thức bộ sinh (generator expression).[59]
Các hàm vô danh được triển khai thông qua các biểu thức lambda; tuy nhiên, phần thân của hàm vô danh chỉ có thể là đúng một biểu thức.
Biểu thức điều kiện trong Python được viết dưới dạng x if c else y[81] (có sự khác biệt về trật tự của các toán hạng so với toán tử c ? x : y thường có trong những ngôn ngữ khác).
Có sự phân biệt giữa danh sách và bộ trong Python. Danh sách được viết dưới dạng [1, 2, 3], biển đổi được, và không thể được dùng như khoá cho từ điển (các khoá từ điển phải là bất biến trong Python). Bộ được viết dưới dạng (1, 2, 3), không biến đổi được nên có thể được dùng làm khoá của từ điển, với điều kiện là tất cả các phần tử trong bộ cũng phải là bất biến. Toán tử + có thể được sử dụng để nối liền hai bộ lại với nhau, như không trực tiếp thay đổi nội dung của chúng, mà sẽ tạo ra một bộ mới chứa các phần tử của cả hai bộ ban đầu. Vì vậy, cho một biến t ban đầu bằng (1, 2, 3), chạy lệnh t = t + (4, 5) sẽ thực thì t + (4, 5) đầu tiên, tạo ra (1, 2, 3, 4, 5), rồi mới được gán lại cho t, bằng cách đó đã "chỉnh sửa nội dung" của t một cách hiệu quả, trong khi vẫn tuân theo bản chất bất biến của đối tượng bộ. Trong các ngữ cảnh không mơ hồ thì dấu ngoặc đơn là không cần thiết.[82]
Python có một tính năng là tháo tách chuỗi (sequence unpacking) trong đó các biểu thức, mà mỗi biểu thức được đánh giá thành bất kì thứ gì có thể được gán vào (một biến, một thuộc tính viết được...), được liên kết theo cùng một cách với các bộ ban đầu đó và được đặt vào vế bên trái dấu bằng trong một câu lệnh gán. Câu lệnh này mong đợi một một đối tượng lặp được (iterable) ở vế bên phải dấu bằng tạo ra cùng một số lượng giá trị giống như ở các biểu thức trước đó khi đã và sẽ lặp qua, rồi gán mỗi giá trị được tạo ra bằng các biểu thức tương ứng ở vế bến trái.[83]
Python có một toán tử "định dạng xâu" là %. Chức năng này tương tự như định dạng xâu printf trong C, thí dụ như "spam=%s eggs=%d" % ("blah", 2) được đánh giá thành "spam=blah eggs=2". Trong Python 3 và 2.6+, chức năng này được bổ sung bằng phương thức format() của lớp str, ví dụ như "spam={0} eggs={1}".format("blah", 2). Python 3.6 đã bổ sung thêm "f-string": blah = "blah"; eggs = 2; f'spam={blah} eggs={eggs}'.[84]
Các xâu trong Python có thể được ghép móc với nhau bằng cách "cộng" chúng lại (dùng cùng toán tử với phép cộng số nguyên và số phẩy động). Thí dụ, "spam" + "eggs" cho ra "spameggs". Kể cả nếu xấu chứa số, chúng vẫn sẽ được ghép móc thành xâu thay vì số nguyên. Thí dụ, "2" + "2" cho ra"22".
Python có nhiều kiểu hằng xâu khác nhau:
Xâu được phân cách bởi dấu nháy đơn hoặc nháy kép. Khác với hệ vỏ Unix, Perl và các ngôn ngữ ảnh hưởng từ Perl, dấu nháy đơn và dấu nháy kép có cùng chức năng. Cả hai loại xâu đều dùng dấu chéo ngược (\) làm ký tự thoát (escape character). Nội suy xâu đã được thêm vào kể từ Python 3.6 với tên gọi "hằng xâu được định dạng".[84]
Xâu ba dấu nháy: bắt đầu và kết thúc bằng ba dấu nháy đơn hoặc kép. Chúng có thể trải dài trên nhiều dòng giống như trong tài liệu đây (here document) trong các hệ vỏ, Perl và Ruby.
Các loại xâu thô, được kí hiệu bằng cách đặt trước hằng xâu một kí tự r. Các chuỗi thoát sẽ không bị thông dịch; cho nên xâuthô khá là hữu ích khi xâu có chứa nhiều dấu chéo ngược, chẳng hạn như biểu thức chính quy và đường dẫn tệp trên Windows.
Python có các biểu thức chỉ số mảng và cắt lát mảng đối với danh sách, được kí hiệu là a[khoá], a[đầu:cuối] hay a[đầu:cuối:bước]. Các chỉ số được đánh từ số không, và chỉ số âm sẽ chỉ lùi từ cuối lên. Việc cắt lát sẽ lấy các phần tử từ đầu cho đến chỉ số cuối (không kể chỉ số cuối). Tham số cắt lát thứ ba, được gọi là bước, cho phép các phần tử có thể được bỏ qua hoặc đảo chiều. Chỉ số lát có thể được bỏ trống, ví dụ a[:]trả lại một bản sao của danh sách đó. Mỗi phần tử trong một lát là một bản sao nông.
Trong Python các biểu thức và câu lệnh được phân biệt một cách vững chắc, ngược lại với các ngôn ngữ như Common Lisp, Scheme, hay Ruby. Điều này đã dẫn tới nhiều biểu thức và câu lệnh có cùng chức năng. Thí dụ:

Thông hiểu danh sách và vòng lặp for
Biểu thức điều kiện và khối lệnh if
Hàm eval() (đánh giá các biểu thức) và exec() (thực thi các câu lệnh); trong Python 2, exec là một câu lệnh.
Câu lệnh không thể nằm trong biểu thức, vậy nên các loại thông hiểu (gồm cả danh sách) và biểu thức lambda, vốn là các biểu thức, không thể chứa các câu lệnh. Một trường hợp cụ thể là một câu lệnh gán chẳng hạn như a = 1 không thể là một phần của biểu thức điều kiện của một câu lệnh điều kiện. Điều này sẽ giúp tránh được các lỗi viết sai toán tử bằng == bằng toán tử gán = trong câu điều kiện thường thấy ở C. Ví dụ, if (c = 1) { ... } là một đoạn mã C hợp lệ (nhưng chắc là không đúng ý) còn if c = 1: ... sẽ báo lỗi cú pháp trong Python.

Phương thức
Phương thức của đối tượng là một hàm đi kèm với lớp của đối tượng đó. Cú pháp hiện_thể.phương_thức(đối số), đối với các hàm và phương thức bình thường, thức chất là dạng cú pháp đặc biệt của Lớp.phương_thức(hiện_thể, đối số). Các phương thức trong Python có một tham số self được dùng để truy cập dữ liệu của hiện thể (instance), ngược lại với biến bản thân (self haythis) trong một số ngôn ngữ lập trình hướng đối tượng khác (C++, Java, Objective-C, hay Ruby). Ngoại trừ điều này, Python cũng cung cấp các phương thức gạch dưới (do tên của chúng bắt đầu và kết thúc bằng hai dấu gạch dưới), cho phép các lớp do người dùng định nghĩa thay đổi cách các lớp này được xử lý bởi các thao tác của Python chẳng hạn như lấy chiều dài, so sánh, tính toán số học, chuyển đổi kiểu...[85]

Kiểu dữ liệu

Cấp bậc kiểu tiêu chuẩn trong Python 3
Python sử dụng định kiểu vịt (duck typing) và có các đối tượng có kiểu nhưng tên biến thì không có kiểu. Giới hạn về kiểu không được kiểm tra trong lúc biên dịch; thay vào đó. các thao tác lên một đối tượng có thể thất bại, chỉ ra rằng đối tượng đó không thuộc vào kiểu dữ liệu phù hợp. Tuy là định kiểu động, Python cũng định kiểu mạnh khi không cho phép các thao tác mà không được định nghĩa rõ ràng (chẳng hạn như cộng một số vào một xâu) thay vì lặng lẽ cố gắng diễn giải thao tác đó.

Python cho phép các lập trình viên định nghĩa các kiểu của riêng họ bằng cách sử dụng lớp, thường được dùng trong lập trình hướng đối tượng. Các hiện thể của một lớp thường được tạo ra bằng cách gọi lớp đó (chẳng hạn như SpamClass() hay EggsClass()), các lớp lại là hiện thể của siêu lớp type (bản thân nó cũng là một hiện thể của chính nó), cho phép siêu lập trình và phản xạ.

Trước phiên bản 3.0, Python có hai loại lớp là kiểu cũ và kiểu mới.[86] Cú pháp của cả hai kiểu đều giống nhau. Sự khác biệt nằm ở chỗ lớp đó có kế thừa từ lớp object một cách trực tiếp hoặc gián tiếp hay không (tất cả các lớp kiểu mới đều kế thừa từ object và là hiện thể của type). Từ phiên bản Python 2.2 trở đi, cả hai loại lớp đều có thể được sử dụng. Lớp kiểu cũ đã bị loại bỏ trong Python 3.0.

Kế hoạch dài hạn là hỗ trợ định kiểu dần dần[87] và từ Python 3.5, cú pháp của ngôn ngữ này cho phép chỉ rõ các kiểu tĩnh nhưng chúng lại không được kiểm tra trong bản triển khai mặc định, CPython. Một trình kiểm tra kiểu tĩnh đang trong quá trình thử nghiệm và tuỳ chọn tên là mypy có hỗ trợ kiểm tra kiểu trong thời gian biên dịch.[88]

Tóm tắt các kiểu dữ liệu có sẵn trong Python 3
Kiểu	Thay đổi được	Mô tả	Ví dụ cú pháp
bool	không	Kiểu dữ liệu luận lý	TrueFalse
bytearray	có	Chuỗi các byte nối tiếp	bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes	không	Chuỗi các byte nối tiếp	b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex	không	Số phức với phần thực và phần ảo	3+2.7j3 + 2.7j
dict	có	Mảng liên kết (hay từ điển) các cặp khoá và giá trị; có thể chứa lẫn lộn nhiều kiểu (khoá và giá trị), khoá phải là loại băm được	{'key1': 1.0, 3: False}{}
ellipsisa	không	Một kiểu giữ chỗ chấm lửng được dùng như một chỉ số trong một mảng NumPy	...Ellipsis
float	không	Số phẩy động độ chính xác đôi. Độ chính xác phụ thuộc vào từng máy nhưng trên thực tế thì nó thường được triển khai là một số IEEE 754 64-bit với độ chính xác là 53 bit.[89]	1.33333
frozenset	không	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	frozenset([4.0, 'string', True])
int	không	Số nguyên với độ lớn không giới hạn[90]	42
list	có	Danh sách, có thể chứa lẫn lộn nhiều kiểu	[4.0, 'string', True][]
NoneTypea	không	Một đối tượng đại diện cho sự không có mặt của dữ liệu, tương đương với null trong các ngôn ngữ khác	None
NotImplementedTypea	không	Một kiểu giữ chỗ có thể được trả lại từ toán tử nạp chồng để biểu thị kiểu toán hạng không được hỗ trợ.	NotImplemented
range	không	Một chuỗi các số thường được dùng để lặp với số lần biết trước trong vòng lặpfor[91]	range(-1, 10)range(10, -5, -2)
set	có	Tập hợp không được sắp xếp, không chứa các giá trị giống nhau; có thể chửa lẫn lộn nhiều kiểu, nếu băm được	{4.0, 'string', True}set()
str	không	Một xâu ký tự (string): chuỗi các điểm mã Unicode	'Wikipedia'"Wikipedia"
"""Trải dài trên
nhiều
dòng"""
tuple	không	Bộ; có thể chứa lẫn lộn nhiều kiểu	(4.0, 'xâu kí tự', True)('phần tử',)()
^a Không thể được truy cập trực tiếp bằng tên

Phép tính số học
Python có các kí hiệu thường dùng cho các toán tử số học (+, -, *, /), toán tử chia sàn // và toán tử chia lấy dư % (số dư có thể âm, chẳng hạn như 4 % -3 == -2). Nó cũng có toán tử ** cho phép luỹ thừa, chẳng hạn như 5**3 == 125 và 9**0.5 == 3.0, và toán tử nhân ma trận @.[92] Các toán tử này hoạt động giống như trong toán học truyền thống, với cùng thứ tự tính toán, toán tử trung tố (+ và - cũng có thể làm toán tử một ngôi để biểu diễn số dương và số âm một cách tương ứng).

Phép chia giữa các số nguyên tạo ra kết quả là số phẩy động. Hành vi của phép chia đã thay đổi đáng kể theo thời gian:[93]

Python hiện tại (kể từ 3.0) thay đổi / thành phép chia số phẩy động, ví dụ: 5/2 == 2.5.
Python 2.2 đã thay đổi phép chia số nguyên để nó làm tròn về phía âm vô cực, ví dụ 7/3 == 2 và -7/3 == -3. Toán tử chia sàn // đã được giới thiệu. Cho nên 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 và -7.5//3 == -3.0. Thêm from __future__ import division sẽ làm cho một mô đun sử dụng quy tắc chia của Python 3.0.
Python 2.1 về trước sử dụng hành vi chia kiểu C. Toán tử / là phép chia nguyên nếu cả hai toán hạng là số nguyên, nếu không thì là phép chia số phẩy động. Phép chia nguyên làm tròn về 0, ví dụ 7/3 == 2 và -7/3 == -2.
Trong thuật ngữ Python, / là phép chia đúng (gọi tắt là phép chia), và // là phép chia sàn. Toán tử / trước phiên bản 3.0 là phép chia cổ điển.[93]

Việc làm tròn về phía âm vô cực, dù khác biết so với những ngôn ngữ khác, đem lại sự chắc chắn. Ví dụ, phương trình (a + b)//b == a//b + 1 là luôn đúng. Còn phương trình b*(a//b) + a%b == a thì hợp lệ với cả giá trị a dương và âm. Tuy nhiên, duy trì tính hợp lệ của phương trình này cũng đồng nghĩa răng trong khi kết quả của a%b là, đúng như mong đợi, nằm trong nửa khoảng mở [0, b), với b là một số nguyên dương, nó cũng cần phải nằm trong khoảng (b, 0] khi b âm.[94]

Python cung cấp một hàm round để làm tròn một số phẩy động thành số nguyên gần nhất. Để gỡ hoà (với những số có chữ số cuối là 5), Python 3 sử dụng làm tròn thành số chẵn: round(1.5) và round(2.5) đều là 2.[95] Các phiên bản trước 3 làm tròn xa số không: round(0.5) là 1.0, round(-0.5) là −1.0.[96]

Python cho phép sử dụng các biểu thức luận lý với nhiều quan hệ băng nhau theo một cách đồng nhất với cách dùng chung trong toán học. Thí dụ, biểu thức a < b < c kiểm tra xem a có nhỏ hơn b và b có nhỏ hơn c hay không.[97] Các ngôn ngữ dựa trên C sẽ hiểu biểu thức trên khác đi: trong C, biểu thức trên sẽ đánh giá a < b trước tiên, cho ra kết quả 0 hoặc 1, rồi kết quả đó mới được so sánh với c.[98]

Python sử dụng số học có độ chính xác tuỳ ý cho tất cả các thao tác với số nguyên. Kiểu/Lớp Decimal trong mô đun decimal cung cấp số dấu phẩy động thập phân với một độ chính xác tuỳ ý được định trước và một vài chế độ làm tròn.[99] Lớp Fraction trong mô đun fractions cung cấp độ chính xác tuỳ ý cho số hữu tỉ.[100]

Nhờ thư viện toán học rộng lớn của Python và thư viện bên thứ ba NumPy với nhiều tính năng hơn nữa, Python thường được dùng như một ngôn ngữ kịch bản để giải quyết các vấn đề chẳng hạn như thao tác và xử lí dữ liệu số.[101][102]

Chú thích
# dòng chú thích
In giá trị
# Từ Python 3
print((7 + 8) / 2.0)
print((2 + 3j) * (4 - 6j))
Nội suy xâu (string interpolation)

print("Hello {}!".format("world"))
print("a = {.2f} và b = {.2f}".format(a,b))
Cấu trúc rẽ nhánh
Dạng 1:
if biểu_thức_điều_kiện:
    # lệnh...
Dạng 2:
if biểu_thức_điều_kiện:
    # lệnh...
else:
    # lệnh...
Dạng 3:
if biểu_thức_điều_kiện_1:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là đúng/true)
elif biểu_thức_điều_kiện_2:
    # lệnh... (được thực hiện nếu biểu_thức_điều_kiện_1 là sai/false, nhưng biểu_thức_điều_kiện_2 là đúng/true)
else:
    # lệnh... (được thực hiện nếu tất cả các biểu thức điều kiện đi kèm if và elif đều sai)
Khớp theo mẫu, được thêm vào từ bản 3.10.0:
match biến_1:
    case điều_kiện_1:
        #được thực hiện nếu biến_1 = điều_kiện_1
    case điều_kiện_2:
        #được thực hiện nếu biến_1 = điều_kiện_2
Cấu trúc lặp
while biểu_thức_đúng:
    # lệnh...
for phần_tử in dãy:
    # lệnh...
L = ["Hà Nội", "Hải Phòng", "TP Hồ Chí Minh"]
for thành_phố in L:
    print(thành_phố)

for i in range(10):
    print(i)
Hàm
def tên_hàm (tham_biến_1, tham_biến_2, tham_biến_n):
    # lệnh...
    return giá_trị_hàm
Hàm với tham số mặc định:

def luỹ_thừa(x, n=2):
   """Lũy thừa với số mũ mặc định là 2"""
   return x**n

print(luỹ_thừa(3))   # 9
print(luỹ_thừa(2,3)) # 8
Lớp
class Lớp:
    #...

class LớpCon(Lớp):
    """LớpCon kế thừa lớp Lớp"""
    x = 3  # biến thành viên của lớp
    #
    def phương_thức(self, tham_biến):
        #...

# khởi tạo
a = LớpCon()
print(a.x)
print(a.phương_thức(m))  # m là giá trị gán cho tham biến
Xử lý ngoại lệ
try:
    câu_lệnh
except Loại_Lỗi:
    thông báo lỗi
Thư viện
Bộ thư viện chuẩn rộng lớn của Python – một trong những điểm mạnh lớn nhất của Python[103] – cung cấp các công cụ phù hợp cho nhiều công việc khác nhau. Với các ứng dụng giao tiếp với Internet, nhiều giao thức và định dạng chuẩn chẳng hạn như MIME and HTTP được hỗ trợ. Nó cũng có chứa các mô đun đành cho việc tạo lập giao diện người dùng đồ hoạ, kết nối với cơ sở dữ liệu quan hệ, sinh số giả ngẫu nhiên, tính toán với số thập phân có độ chính xác tuỳ ý,[104] thao tác với biểu thức chính quy và kiểm thử đơn vị.

Một số phần của thư viện chuẩn nằm trong đặc tả (ví dụ, Giao diện Cổng vào Máy chủ Web (Web Server Gateway Interface hay WSGI) triển khai wsgiref theo PEP 333[105]), nhưng phần lớn mô đun thì không. Chúng được xác định dựa vào mã, tài liệu bên trong và bộ kiểm thử (test suite) của chúng. Tuy nhiên, vì phần lớn thư viện chuẩn là mã Python đa nền tảng, chỉ một vài mô đun cần được chỉnh sửa hoặc viết lại cho các bản triển khai khác nhau.

Tính đến tháng 9 năm 2021, Python Package Index (PyPI), kho chính thức dành cho các phần mềm Python bên thứ ba, có chứa hơn 329.000[106] gói với nhiều chức năng đa dạng và phong phú, bao gồm:
Tự động hoá
Phân tích dữ liệu
Cơ sở dữ liệu
Tài liệu
Giao diện người dùng đồ hoạ
Xử lý hình ảnh
Học máy
Ứng dụng di động
Đa phương tiện
Mạng máy tính
Khoa học tính toán
Quản trị hệ thống
Kiểm thử tự động
Xử lí văn bản
Bộ khung mạng
Thu thập web
Môi trường phát triển
Xem thêm: So sánh các môi trường phát triển tích hợp § Python
Phần lớn trình hiện thực Python (kể cả CPython) có chứa một trình lặp đọc–tính–in (REPL), cho phép chúng hoạt động như là một trình thông dịch dòng lệnh mà người dùng sẽ lần lượt nhập các câu lệnh và nhận kết quả ngay lập tức.

Python đì kèm với một môi trường phát triển tịch hợp (IDE) được gọi là IDLE, phù hợp với người mới bắt đầu.

Các hệ vỏ khác, bao gồm IDLE và IPython, có thêm khả năng tự hoàn thiện, khôi phục trạng thái phiên, và tô sáng cú pháp.

Ngoài các môi trường phát triển tích hợp trên máy để bàn, còn có những IDE chạy trên trình duyệt web: SageMath (dành cho việc phát triển các chương trình Python liên quan đền toán học và khoa học); PythonAnywhere, một IDE kiêm môi trường chủ nhà; và Canopy IDE, một IDE Python thương mại tập trung vào khoa học tính toán.[107]

Các bản triển khai
Xem thêm: Danh sách phần mềm Python § Các bản thực hiện Python
Bản triển khai tham khảo
CPython là bản triển khai tham khảo của Python. Nó được viết bằng C, đáp ứng tiêu chuẩn C89 vời một vào tính năng C99 chọn lọc (từ khi các phiên bản C mới hơn ra mắt, nó được coi là lỗi thời;[108][109] CPython có chứa phần mở rộng C của riêng nó, nhưng các phần mở rộng bên thứ ba không bị giới hạn bởi các phiên bản C cũ hơn, có thể được cài đặt với C11 hoặc C++[110]). Nó biên dịch các chương trình Python thành một dạng mã byte trung gian, sau đó thực thi mã byte trên máy ảo của nó. CPython được phân phối cùng với một thư viện chuẩn rộng lớn được viết bằng C và Python bản địa (native). Nó có sẵn trên nhiều nền tảng, bao gồm Windows (từ Python 3.9, trình cài đặt Python sẽ không chạy một cách có chủ ý trên Windows 7 và 8;[111][112] Windows XP đã từng được hỗ trợ cho đến Python 3.5) và phần lớn hệ điều hành tương tự Unix hiện đại, bao gồm macOS (và máy Mac Apple M1, kể từ Python 3.9.1, với trình cài đặt thử nghiệm) và hỗ trợ không chính thức cho chẳng hạn như VMS.[113] Tính khả chuyển nền tảng là một trong những ưu tiên sớm nhất của nó, trong khung thời gian Python 1 và Python 2, khi ngay cả OS/2 và Solaris cũng được hỗ trợ;[114] song nhiều hệ điều hành cũng không còn được hỗ trợ nữa.

Các bản triển khai khác
PyPy là một trình thông dịch nhanh, tuân thủ cú pháp của Python 2.7 và 3.6.[115] Trình biên dịch tức thời của nó mang đến tốc độ vượt trội so với CPython nhưng một vài thư viện được viết bằng C lại không thể được sử dụng cùng với nó.[116]
Stackless Python là một phân nhánh (fork) đáng chú ý của CPython có cài đặt vi luồng; nó không sử dụng ngăn xếp lời gọi theo cùng một cách với CPython, vậy nên nó hỗ trợ các chương trình đồng thời một cách ồ ạt. PyPy cũng có một phiên bản không có ngăn xếp.[117]
MicroPython và CircuitPython là các biến thể Python 3 được tối ưu hoá cho vi điều khiển, bao gồm Lego Mindstorms EV3.[118]
Pyston là một biến thể của Python sử dụng biên dịch tức thời để tăng tốc độ thực thi các chương trình Python.[119]
Cinder là một phân nhánh hướng hiệu năng của CPython 3.8 có chứa một số tối ưu hoá bao gồm đệm bộ nhớ mã byte trong dòng, đánh giá các chương trình con một cách tham vọng, một trình biên dịch tức thời "mỗi lúc một phương thức" và một trình biên dịch mã byte thử nghiệm.[120]
Trình biên dịch chéo sang ngôn ngữ khác
Có một số trình biên dịch sang những ngôn ngữ đối tượng bậc cao khác từ ngôn ngữ mã nguồn là Python, một tập con giới hạn của Python hoặc một ngôn ngữ tương tự Python:

Brython,[121] Transcrypt[122][123] và Pyjs (phát hành lần cuối năm 2012) biên dịch Python sang JavaScript.
Codon biên dịch một tập con Python định kiểu tĩnh[124] sang mã máy (thông qua LLVM) và hỗ trợ đa luồng cho hệ thống bản địa.[125]
Cython biên dịch (một tập cha của) Python 2.7 sang C. Phần mã kết quả cũng dùng được với Python thông qua các lệnh gọi API mức C trực tiếp vào trình thông dịch Python.
Nuitka biên dịch Python sang C.[126]
Numba sử dụng LLVM để biên dịch một tập con của Python sang mã máy.
Pythran biên dịch một tập con của Python 3 sang C++.[127][128][129]
Pyrex (bản mới nhất năm 2010) và Shed Skin (bản mới nhất năm 2013) biên dịch lần lượt sang C và C++.
Google's Grumpy (bản mới nhất năm 2017) phiên dịch Python 2 to Go.[130][131][132]
IronPython cho phép chạy các chương trình Python 2.7 trên .NET Common Language Runtime.[133]
Jython biên dịch Python 2.7 sang mã byte Java, cho phép sử dụng các thư viện Java từ một chương trình Python.[134]
RPython có thể được biên dịch sang C, và được dùng để xây dựng trình thông dịch PyPy của Python.
Phát triển
Sự phát triển của Python được chỉ đạo phần lớn là thông qua quy trình Đề nghị Cải tiến Python (Python Enhancement Proposal, hay PEP), cơ chế chủ yếu để đề nghị các tính năng lớn mới, thu thập ý kiến của cộng đồng về các vấn đề và ghi chép lại các quyết định về thiết kế của Python.[135] Phong cách viết mã của Python nằm trong PEP 8.[73] Các PEP xuất sắc sẽ được xem lại và bình luận bởi cộng đồng Python và hội đồng chèo lái.[135]

Sự cải tiến ngôn ngữ tương ứng với sự phát triển của bản triển khai tham khảo CPython. Danh sách thư python-dev là diễn đàn chính về sự phát triển của ngôn ngữ này. Các vấn đề cụ thể được thảo luận trong hệ theo dõi lỗi Roundup được tổ chức trên bugs.python.org.[136] Sự phát triển ban đầu chỉ xảy ra trên một kho mã nguồn tự làm chủ chạy Mercurial cho đến khi Python di chuyển mã nguồn sang Github vào tháng Một năm 2017.[137]

Các bản phát hành công khai của CPython được chia thành ba loại, được phân biệt theo phần nào của số phiên bản được tăng lên:

Phiên bản không tương thích ngược: các mã nhiều khả năng sẽ không hoạt động được và cần phải được chuyển mã thủ công. Phần đầu tiên của số phiên bản được tăng lên. Các bản này ít khi được phát hành: phiên bản 3.0 đã được phát hành 8 năm trước bản 2.0. Theo ông Guido van Rossum, phiên bản 4.0 có lẽ sẽ không bao giờ được phát hành.[138]
Bản phát hành lớn hay bản phát hành "tính năng": tương thích phần lớn với các phiên bản trước đó nhưng có thêm những tính năng mới. Phần thứ hai của số phiên bản được tăng lên. Bắt đầu từ Python 3.8, các bản phát hành được thông báo là sẽ xảy ra hằng năm.[139][140] Mỗi phiên bản lớn sẽ được hỗ trợ bằng sửa lỗi trong vòng vài năm sau khi nó được phát hành.[141]
Phiên bản sửa lỗi: không có tính năng mới, xảy ra mỗi ba tháng và được phát hành khi số lượng lỗi được sửa ngược dòng đủ lớn kể từ bản phát hành cuối. Các lỗ hổng cũng sẽ được vá trong những phiên bản này. Phần thứ ba và phần cuối cùng của số phiên bản được tăng lên.
Nhiều phiên bản alpha, beta và phiên bản ứng cử cũng được phát hành để xem trước và kiểm thử trước bản phát hành cuối cùng. Mặc dù có một lịch trình sơ bộ cho mỗi bản phát hành, chúng thường được lùi lại nếu mã vẫn chưa sẵn sàng. Đội ngũ phát triển Python giám sát tình trạng của mã bằng các chạy tập kiểm thử đơn vị lớn trong quá trình phát triển.[142]

Hội thảo học thuật lớn nhất của Python là PyCon. Ngoài ra, cũng có các chương trình hướng dẫn Python đặc biệt khác, chẳng hạn như Pyladies.

Python 3.10 không khuyên dùng wstr (sẽ bị loại bỏ từ Python 3.12; nghĩa là các phần mở rộng Python[143] cần được chỉnh sửa khi đó),[144] đông thời thêm tính năng khớp theo mẫu (pattern matching) vào ngôn ngữ.[145]

Sự phổ biến
Kể từ năm 2003, Python luôn được xếp vào một trong số mười ngôn ngữ lập trình phổ biến nhất trong Chỉ số Cộng đồng Lập trình TIOBE, nơi mà tính đến tháng 10 năm 2021, Python là ngôn ngữ phổ biến nhất (đứng trước Java và C).[89] Nó từng được chọn là Ngôn ngữ Lập trình của Năm (vì "có đánh giá tăng cao nhất trong năm") vào các năm 2007, 2010, 2018, và 2020 (chỉ Python là được bốn năm[91]).

Một nghiên cứu thức nghiệm chỉ ra rằng các ngôn ngữ kịch bản, chẳng hạn như Python, cho năng suất cao hơn so với các ngôn ngữ thông thường, chẳng hạn như C và Java, đối với các vấn đề lập trình liên quan đến thao tác xâu và tìm kiếm trong từ điển, đồng thời quả quyết rằng sự tiêu tốn bộ nhớ thường "tốt hơn Java và không quá tệ hơn so với C hay C++".[146]

Các tổ chức lớn sử dụng Python gồm có Wikipedia, Google,[147] Yahoo!,[148] CERN, NASA, Facebook,[149] Amazon, Instagram,[150] Spotify[151] và các tổ chức nhỏ hơn như ILM and ITA. Trang mạng tin tức xã hội Reddit cũng được viết phần lớn bằng Python.[152]

Sử dụng
Bài chi tiết: Danh sách phần mềm Python

Được vận hành bởi Python
Python có thể đóng vài trò như là một ngôn ngữ kịch bản cho ứng dụng web, chẳng hạn như thông qua mod wsgi đối với máy chủ web Apache.[153] Với Giao diện Cổng vào Máy chủ Web, một API chuẩn đã và đang dần phát triển để tạo điều kiện cho các ứng dụng này. Các bộ khung web như Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle và Zope hỗ trợ các nhà phát triển trong khâu thiết kế và bảo trì các ứng dụng phức tạp. Pyjs và IronPython có thể được dùng để phát triển phía khách của các ứng dụng dựa trên Ajax. SQLAlchemy có thể được dùng để ánh xạ dữ liệu sang một cơ sở dữ liệu quan hệ. Twisted là một bộ khung dành cho việc giao tiếp giữa các máy tính và được sử dụng bởi Dropbox chẳng hạn.

Các thư viện như NumPy, SciPy và Matplotlib cho phép sử dụng một cách có hiệu quả Python trong tính toán khoa học,[154][155] với các thư viện chuyên ngành chẳng hạn như Biopython và Astropy cung cấp các chức năng miền cụ thể. SageMath là một hệ thống đại số máy tính với một giao diện vở lập trình được trong Python: thư viện của nó trải dài trên nhiều lĩnh vực của toán học, bao gồm đại số, toán tổ hợp, giải tích số, lý thuyết số và vi tích phân.[156] OpenCV có gán kết Python với một tập hợp các tính năng phong phú về thị giác máy tính và xử lý ảnh.[157]

Python thường được sử dụng trong các dự án trí tuệ nhân tạo và học máy với sự giúp đỡ của các thư viện như TensorFlow, Keras, Pytorch và Scikit-learn.[158][159][160][161] Vì là một ngôn ngữ kịch bản với kiến trúc mô đun, cú pháp đơn giản và các công cụ xử lý văn bản phong phú, Python cũng thường được sử dụng trong xử lý ngôn ngữ tự nhiên.

Python có thể được sử dụng để phát triển các giao diện người dùng đồ hoạ (GUI) bằng cách sử dụng các thư viện như Tkinter[162][163], hay để tạo ra trò chơi thông qua các thư viện chẳng hạn như Pygame, một thư viện làm trò chơi 2D.

Python đã được nhúng thành công trong nhiều sản phẩm phần mềm như là một ngôn ngữ kịch bản, bao gồm trong phần mềm phương pháp phần tử hữu hạn chẳng hạn như Abaqus, một trình dựng mô hình tham số 3D giống như FreeCAD, trong các gói hoạt hình 3D chẳng hạn như 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, Modo, MotionBuilder, Softimage, trong trình tổng hợp hiệu ứng trực quan Nuke, trong các chương trình sửa ảnh 2D như GIMP,[164] Inkscape, Scribus và Paint Shop Pro, và trong các chương trình kí hiệu âm nhạc như trình soạn nhạc và Capella. GNU Debugger sử dụng Python như là một trình in đẹp để thể hiện các cấu trúc phức tạp chẳng hạn như các kiểu chứa (container) trong C++. Esri quảng bá Python là lựa chọn tốt nhất để viết tập lệnh trong ArcGIS. Nó cũng được sử dụng trong một số trò chơi video, và được chọn làm một trong ba ngôn ngữ lập trình có sẵn đầu tiên trong Google App Engine, với hai ngôn ngữ còn lại là Java và Go.

Nhiều hệ điều hành có chứa Python như là một thành phần tiêu chuẩn. Nó đi kèm với hầu hết các bản phân phối Linux,[165] AmigaOS 4 (sử dụng Python 2.7), FreeBSD (dưới dạng gói), NetBSD, OpenBSD (dưới dạng gói) và macOS và có thể được dùng từ dòng lệnh (tức terminal – đầu cuối). Nhiều bản phân phối Linux sử dụng các trình cài đặt được viết bằng Python: Ubuntu sử dụng trình cài đặt Ubiquity, trong khi Red Hat Linux và Fedora sử dụng trình cài đặt Anaconda. Gentoo Linux sử dụng Python trong hệ thống quản lý gói của nó là Portage.

Python còn được sử dụng rộng rãi trong ngành công nghiệp an toàn thông tin, bao gồm phát triển khai thác.

LibreOffice có nhúng Python và dự định sẽ thay thế Java bằng Python. Python Scripting Provider là một tính năng lõi của nó[166] kể từ phiên bản 4.0 phát hành mùng 7 tháng Hai năm 2013.

Ảnh hưởng ngôn ngữ
Thiết kế và triết lý của Python đã ảnh hưởng đến nhiều ngôn ngữ lập trình khác:

CoffeeScript – một ngôn ngữ lập trình biên dịch chéo sang JavaScript – có cú pháp lấy cảm hứng từ Python.
ECMAScript/JavaScript mượn biến lặp (iterator) và bộ sinh từ Python.
GDScript, một ngôn ngữ kịch bản rất giống Python, được tích hợp vào bộ máy trò chơi Godot.[167]
Go được thiết kế nhằm "tăng tốc độ làm việc trong một ngôn ngữ kiểu động giống như Python" và cả hai có cùng cú pháp cắt lát mảng.
Groovy được tạo ra với mong muốn đem triết lí thiết kế của Python vào Java.[168]
Julia được thiết kế để "có thể sử dụng được vào các mục đích chung giống như Python vậy".[169]
Mojo, một tập cha của Python, cố gắng tương thích với cú pháp và hệ sinh thái của Python[170], và có thể chạy nhanh hơn Python lên đến 35.000 lần.[171]
Nim cũng có thụt lề và cú pháp tương đồng.[172]
Matsumoto Yukihiro, tác giả của ngôn ngữ Ruby từng cho biết: "Tôi muốn một ngôn ngữ kịch bản mạnh mẽ hơn Perl và hướng đối tượng nhiều hơn Python. Đó là lí do tôi quyết định thiết kế ngôn ngữ cho riêng mình."[173]
Xem thêm
icon	Cổng thông tin Lập trình máy tính
	Cổng thông tin Phần mềm tự do và nguồn mở
Zen of Python
pip (trình quản lý gói)
Tham khảo
^ “Python 3.12.3 and 3.13.0a6 released” (bằng tiếng Anh). 9 tháng 4 2024. Truy cập 9 tháng 4 2024. Kiểm tra giá trị ngày tháng trong: |access-date= và |date= (trợ giúp)
^ “PEP 483 -- The Theory of Type Hints”. Python.org.
^ Phần mở rộng tệp .pyo đã bị loại bỏ trong Python 3.5. Xem PEP 0488
^ Holth, Moore (ngày 30 tháng 3 năm 2014). “PEP 0441 -- Improving Python ZIP Application Support”. Truy cập ngày 12 tháng 11 năm 2015.
^ “Starlark Language”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 25 tháng 5 năm 2019.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Truy cập ngày 22 tháng 3 năm 2007.
^ Kuchling, Andrew M. (ngày 22 tháng 12 năm 2006). “Interview with Guido van Rossum (July 1998)”. amk.ca. Bản gốc lưu trữ ngày 1 tháng 5 năm 2007. Truy cập ngày 12 tháng 3 năm 2012.
^ van Rossum, Guido (1993). “An Introduction to Python for UNIX/C Programmers”. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.
^ a b “Classes”. The Python Tutorial. Python Software Foundation. Truy cập ngày 20 tháng 2 năm 2012. It is a mixture of the class mechanisms found in C++ and Modula-3
^ Lundh, Fredrik. “Call By Object”. effbot.org. Bản gốc lưu trữ ngày 23 tháng 11 năm 2019. Truy cập ngày 21 tháng 11 năm 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model.
^ Simionato, Michele. “The Python 2.3 Method Resolution Order”. Python Software Foundation. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers
^ Kuchling, A. M. “Functional Programming HOWTO”. Python v2.7.2 documentation. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (ngày 18 tháng 5 năm 2001). “PEP 255 – Simple Generators”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 9 tháng 2 năm 2012.
^ Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (ngày 2 tháng 9 năm 2004). “PEP 318 – Decorators for Functions and Methods”. Python Enhancement Proposals. Python Software Foundation. Truy cập ngày 24 tháng 2 năm 2012.
^ “More Control Flow Tools”. Python 3 documentation. Python Software Foundation. Truy cập ngày 24 tháng 7 năm 2015.
^ “CoffeeScript borrows chained comparisons from Python”.
^ “Genie Language - A brief guide”. Truy cập ngày 28 tháng 12 năm 2015.
^ “Perl and Python influences in JavaScript”. www.2ality.com. ngày 24 tháng 2 năm 2013. Truy cập ngày 15 tháng 5 năm 2015.
^ Rauschmayer, Axel. “Chapter 3: The Nature of JavaScript; Influences”. O'Reilly, Speaking JavaScript. Bản gốc lưu trữ ngày 26 tháng 12 năm 2018. Truy cập ngày 15 tháng 5 năm 2015.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ Ring Team (ngày 4 tháng 12 năm 2017). “Ring and other languages”. ring-lang.net. ring-lang.
^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. tr. 3. ISBN 978-1-59059-881-8.
^ Lattner, Chris (ngày 3 tháng 6 năm 2014). “Chris Lattner's Homepage”. Chris Lattner. Truy cập ngày 3 tháng 6 năm 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.
^ Bài phỏng vấn Guido van Rossum [1].
^ “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal”. www.linuxjournal.com (bằng tiếng Anh).
^ “Python boss Guido van Rossum steps down after 30 years | TheINQUIRER”. theinquirer.net (bằng tiếng Anh). Bản gốc lưu trữ ngày 19 tháng 2 năm 2019. Truy cập ngày 25 tháng 8 năm 2018.
^ “About the Python Software Foundation”. Truy cập 28 tháng 8 năm 2019.
^ “Stack Overflow Developer Survey 2020”. Stack Overflow. Lưu trữ bản gốc ngày 2 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “The State of Developer Ecosystem in 2020 Infographic”. JetBrains: Developer Tools for Professionals and Teams (bằng tiếng Anh). Lưu trữ bản gốc ngày 1 tháng 3 năm 2021. Truy cập ngày 5 tháng 3 năm 2021.
^ “index | TIOBE - The Software Quality Company”. www.tiobe.com. Lưu trữ bản gốc ngày 25 tháng 2 năm 2018. Truy cập ngày 2 tháng 2 năm 2021. Python has won the TIOBE programming language of the year award! This is for the fourth time in the history, which is a record! The title is awarded to the programming language that has gained most popularity in one year.
^ “PYPL PopularitY of Programming Language index”. pypl.github.io (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 3 năm 2017. Truy cập ngày 26 tháng 3 năm 2021.
^ a b Venners, Bill (13 tháng 1 năm 2003). “The Making of Python”. Artima Developer. Artima. Lưu trữ bản gốc ngày 1 tháng 9 năm 2016. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (29 tháng 8 năm 2000). “SETL (was: Lukewarm about range literals)”. Python-Dev (Danh sách thư). Lưu trữ bản gốc ngày 14 tháng 7 năm 2018. Truy cập ngày 13 tháng 3 năm 2011.
^ “Why was Python created in the first place?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 22 tháng 3 năm 2007.
^ van Rossum, Guido (20 tháng 1 năm 2009). “A Brief Timeline of Python”. The History of Python. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 20 tháng 1 năm 2009.
^ Fairchild, Carlie (12 tháng 7 năm 2018). “Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life”. Linux Journal. Lưu trữ bản gốc ngày 13 tháng 7 năm 2018. Truy cập ngày 13 tháng 7 năm 2018.
^ “PEP 8100”. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 4 tháng 5 năm 2019.
^ “PEP 13 -- Python Language Governance”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 5 năm 2021. Truy cập ngày 25 tháng 8 năm 2021.
^ Kuchling, A. M.; Zadka, Moshe (16 tháng 10 năm 2000). “What's New in Python 2.0”. Python Software Foundation. Lưu trữ bản gốc ngày 23 tháng 10 năm 2012. Truy cập ngày 11 tháng 2 năm 2012.
^ “Python 3.0 Release”. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 8 tháng 7 năm 2009.
^ van Rossum, Guido (5 tháng 4 năm 2006). “PEP 3000 – Python 3000”. Python Enhancement Proposals. Python Software Foundation. Bản gốc lưu trữ ngày 3 tháng 3 năm 2016. Truy cập ngày 27 tháng 6 năm 2009.
^ “2to3 – Automated Python 2 to 3 code translation”. docs.python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 2 tháng 2 năm 2021.
^ Langa, Łukasz (19 tháng 2 năm 2021). “Python Insider: Python 3.9.2 and 3.8.8 are now available”. Python Insider. Lưu trữ bản gốc ngày 25 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “Red Hat Customer Portal - Access to 24x7 support and knowledge”. access.redhat.com. Lưu trữ bản gốc ngày 6 tháng 3 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-3177”. cve.mitre.org. Lưu trữ bản gốc ngày 27 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ “CVE - CVE-2021-23336”. cve.mitre.org. Lưu trữ bản gốc ngày 24 tháng 2 năm 2021. Truy cập ngày 26 tháng 2 năm 2021.
^ Langa, Łukasz (24 tháng 3 năm 2022). “Python Insider: Python 3.10.4 and 3.9.12 are now available out of schedule”. Python Insider. Lưu trữ bản gốc ngày 21 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (16 tháng 3 năm 2022). “Python Insider: Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 4 năm 2022. Truy cập ngày 19 tháng 4 năm 2022.
^ Langa, Łukasz (17 tháng 5 năm 2022). “Python Insider: Python 3.9.13 is now available”. Python Insider. Lưu trữ bản gốc ngày 17 tháng 5 năm 2022. Truy cập ngày 21 tháng 5 năm 2022.
^ “Python Insider: Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available”. pythoninsider.blogspot.com. 7 tháng 9 năm 2022. Lưu trữ bản gốc ngày 13 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “CVE - CVE-2020-10735”. cve.mitre.org. Lưu trữ bản gốc ngày 20 tháng 9 năm 2022. Truy cập ngày 16 tháng 9 năm 2022.
^ “What's New In Python 3.12”. Python documentation. Truy cập 26 tháng 11 năm 2023.
^ The Cain Gang Ltd. “Python Metaclasses: Who? Why? When?” (PDF). Bản gốc (PDF) lưu trữ ngày 30 tháng 5 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “3.3. Special method names”. The Python Language Reference. Python Software Foundation. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “PyDBC: method preconditions, method postconditions and class invariants for Python”. Lưu trữ bản gốc ngày 23 tháng 11 năm 2019. Truy cập ngày 24 tháng 9 năm 2011.
^ “Contracts for Python”. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “PyDatalog”. Lưu trữ bản gốc ngày 13 tháng 6 năm 2020. Truy cập ngày 22 tháng 7 năm 2012.
^ “Extending and Embedding the Python Interpreter: Reference Counts” (bằng tiếng Anh). Docs.python.org. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 5 tháng 6 năm 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.
^ a b Hettinger, Raymond (30 tháng 1 năm 2002). “PEP 289 – Generator Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “6.5 itertools – Functions creating iterators for efficient looping”. Docs.python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 22 tháng 11 năm 2016.
^ “PEP 206 -- Python Advanced Library”. Python.org.
^ Peters, Tim (19 tháng 8 năm 2004). “PEP 20 – The Zen of Python”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 26 tháng 12 năm 2018. Truy cập ngày 24 tháng 11 năm 2008.
^ a b “Python Culture”. ebeab. 21 tháng 1 năm 2014. Bản gốc lưu trữ ngày 30 tháng 1 năm 2014.
^ “General Python FAQ”. Python v2.7.3 documentation. Docs.python.org. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 4 tháng 6 năm 2020.
^ “15 Ways Python Is a Powerful Force on the Web”. Bản gốc lưu trữ ngày 11 tháng 5 năm 2019. Truy cập ngày 3 tháng 7 năm 2018.
^ “8.18. pprint — Data pretty printer — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 22 tháng 1 năm 2021. Truy cập ngày 4 tháng 6 năm 2020.
^ Clark, Robert (26 tháng 4 năm 2019). “How to be Pythonic and why you should care”. Medium. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “Code Style — The Hitchhiker's Guide to Python”. docs.python-guide.org. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ Goodger, David. “Code Like a Pythonista: Idiomatic Python”. Bản gốc lưu trữ ngày 27 tháng 5 năm 2014. Truy cập ngày 24 tháng 3 năm 2009.
^ “How to think like a Pythonista”. Bản gốc lưu trữ ngày 23 tháng 3 năm 2018. Truy cập ngày 24 tháng 3 năm 2009.
^ “Is Python a good language for beginning programmers?”. General Python FAQ. Python Software Foundation. Lưu trữ bản gốc ngày 24 tháng 10 năm 2012. Truy cập ngày 21 tháng 3 năm 2007.
^ Guttag, John V. (12 tháng 8 năm 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.
^ a b “PEP 8 -- Style Guide for Python Code”. Python.org. Lưu trữ bản gốc ngày 17 tháng 4 năm 2019. Truy cập ngày 26 tháng 3 năm 2019.
^ “Highlights: Python 2.5”. Python.org. Lưu trữ bản gốc ngày 4 tháng 8 năm 2019. Truy cập ngày 20 tháng 3 năm 2018.
^ “division”. python.org. Lưu trữ bản gốc ngày 20 tháng 7 năm 2006. Truy cập ngày 30 tháng 7 năm 2014.
^ “PEP 0465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “Python 3.5.1 Release and Changelog”. python.org. Lưu trữ bản gốc ngày 14 tháng 5 năm 2020. Truy cập ngày 1 tháng 1 năm 2016.
^ “What's New in Python 3.8”. Lưu trữ bản gốc ngày 8 tháng 6 năm 2020. Truy cập ngày 14 tháng 10 năm 2019.
^ “Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ “Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=”. Oracle Corporation. Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 28 tháng 8 năm 2016.
^ van Rossum, Guido; Hettinger, Raymond (7 tháng 2 năm 2003). “PEP 308 – Conditional Expressions”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 13 tháng 3 năm 2016. Truy cập ngày 13 tháng 7 năm 2011.
^ “4. Built-in Types — Python 3.6.3rc1 documentation”. python.org. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 1 tháng 10 năm 2017.
^ “5.3. Tuples and Sequences — Python 3.7.1rc2 documentation”. python.org. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 17 tháng 10 năm 2018.
^ a b “PEP 498 -- Literal String Interpolation”. python.org. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 8 tháng 3 năm 2017.
^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code (bằng tiếng Anh). No Starch Press. tr. 322. ISBN 978-1-59327-966-0. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 7 tháng 7 năm 2021.
^ “The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1”. Bản gốc lưu trữ ngày 26 tháng 10 năm 2012. Truy cập ngày 12 tháng 1 năm 2011.
^ “Type hinting for Python”. LWN.net. 24 tháng 12 năm 2014. Lưu trữ bản gốc ngày 20 tháng 6 năm 2019. Truy cập ngày 5 tháng 5 năm 2015.
^ “mypy - Optional Static Typing for Python”. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 28 tháng 1 năm 2017.
^ a b “15. Floating Point Arithmetic: Issues and Limitations — Python 3.8.3 documentation”. docs.python.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 6 tháng 6 năm 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".
^ Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 237 – Unifying Long Integers and Integers”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ a b “Built-in Types”. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 3 tháng 10 năm 2019.
^ “PEP 465 -- A dedicated infix operator for matrix multiplication”. python.org. Lưu trữ bản gốc ngày 29 tháng 5 năm 2020. Truy cập ngày 3 tháng 7 năm 2018.
^ a b Zadka, Moshe; van Rossum, Guido (11 tháng 3 năm 2001). “PEP 238 – Changing the Division Operator”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 28 tháng 5 năm 2020. Truy cập ngày 23 tháng 10 năm 2013.
^ “Why Python's Integer Division Floors”. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 25 tháng 8 năm 2010.
^ “round”, The Python standard library, release 3.2, §2: Built-in functions, lưu trữ bản gốc ngày 25 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ “round”, The Python standard library, release 2.7, §2: Built-in functions, lưu trữ bản gốc ngày 27 tháng 10 năm 2012, truy cập ngày 14 tháng 8 năm 2011
^ Beazley, David M. (2009). Python Essential Reference (ấn bản 4). tr. 66.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (ấn bản 2). tr. 206.
^ Batista, Facundo. “PEP 0327 -- Decimal Data Type”. Python.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 26 tháng 9 năm 2015.
^ “What's New in Python 2.6 — Python v2.6.9 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 12 năm 2019. Truy cập ngày 26 tháng 9 năm 2015.
^ “10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke”. www.stat.washington.edu. Bản gốc lưu trữ ngày 31 tháng 5 năm 2020. Truy cập ngày 3 tháng 2 năm 2019.
^ Shell, Scott (17 tháng 6 năm 2014). “An introduction to Python for scientific computing” (PDF). Lưu trữ (PDF) bản gốc ngày 4 tháng 2 năm 2019. Truy cập ngày 3 tháng 2 năm 2019.
^ Piotrowski, Przemyslaw (tháng 7 năm 2006). “Build a Rapid Web Development Environment for Python Server Pages and Oracle”. Oracle Technology Network. Oracle. Lưu trữ bản gốc ngày 2 tháng 4 năm 2019. Truy cập ngày 12 tháng 3 năm 2012.
^ Batista, Facundo (17 tháng 10 năm 2003). “PEP 327 – Decimal Data Type”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 24 tháng 11 năm 2008.
^ Eby, Phillip J. (7 tháng 12 năm 2003). “PEP 333 – Python Web Server Gateway Interface v1.0”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 19 tháng 2 năm 2012.
^ “Modulecounts”. Modulecounts. 28 tháng 9 năm 2021. Lưu trữ bản gốc ngày 24 tháng 9 năm 2021. Truy cập ngày 28 tháng 9 năm 2021.
^ Enthought, Canopy. “Canopy”. www.enthought.com. Bản gốc lưu trữ ngày 15 tháng 7 năm 2017. Truy cập ngày 20 tháng 8 năm 2016.
^ “Mailman 3 Why aren't we allowing the use of C11? - Python-Dev - python.org”. mail.python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Issue 35473: Intel compiler (icc) does not fully support C11 Features, including atomics - Python tracker”. bugs.python.org. Lưu trữ bản gốc ngày 14 tháng 4 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “4. Building C and C++ Extensions — Python 3.9.2 documentation”. docs.python.org. Lưu trữ bản gốc ngày 3 tháng 3 năm 2021. Truy cập ngày 1 tháng 3 năm 2021.
^ “Changelog — Python 3.9.0 documentation”. docs.python.org. Lưu trữ bản gốc ngày 7 tháng 2 năm 2021. Truy cập ngày 8 tháng 2 năm 2021.
^ “Download Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 8 tháng 12 năm 2020. Truy cập ngày 13 tháng 12 năm 2020.
^ “history [vmspython]”. www.vmspython.org. Lưu trữ bản gốc ngày 2 tháng 12 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “Download Python for Other Platforms”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 27 tháng 11 năm 2020. Truy cập ngày 4 tháng 12 năm 2020.
^ “PyPy compatibility”. Pypy.org. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 3 tháng 12 năm 2012.
^ “speed comparison between CPython and Pypy”. Speed.pypy.org. Lưu trữ bản gốc ngày 10 tháng 5 năm 2021. Truy cập ngày 3 tháng 12 năm 2012.
^ “Application-level Stackless features — PyPy 2.0.2 documentation”. Doc.pypy.org. Lưu trữ bản gốc ngày 4 tháng 6 năm 2020. Truy cập ngày 17 tháng 7 năm 2013.
^ “Python-for-EV3”. LEGO Education (bằng tiếng Anh). Lưu trữ bản gốc ngày 7 tháng 6 năm 2020. Truy cập ngày 17 tháng 4 năm 2019.
^ Yegulalp, Serdar (29 tháng 10 năm 2020). “Pyston returns from the dead to speed Python”. InfoWorld. Lưu trữ bản gốc ngày 27 tháng 1 năm 2021. Truy cập ngày 26 tháng 1 năm 2021.
^ “cinder: Instagram's performance oriented fork of CPython” (bằng tiếng Anh). Lưu trữ bản gốc ngày 4 tháng 5 năm 2021. Truy cập ngày 4 tháng 5 năm 2021.
^ “Brython”. brython.info. Lưu trữ bản gốc ngày 3 tháng 8 năm 2018. Truy cập ngày 21 tháng 1 năm 2021.
^ “Transcrypt – Python in the browser”. transcrypt.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 8 năm 2018. Truy cập ngày 22 tháng 12 năm 2020.
^ “Transcrypt: Anatomy of a Python to JavaScript Compiler”. InfoQ. Lưu trữ bản gốc ngày 5 tháng 12 năm 2020. Truy cập ngày 20 tháng 1 năm 2021.
^ “Codon: Differences with Python”. Lưu trữ bản gốc ngày 25 tháng 5 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ Lawson, Loraine (14 tháng 3 năm 2023). “MIT-Created Compiler Speeds up Python Code”. The New Stack (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 4 năm 2023. Truy cập ngày 28 tháng 8 năm 2023.
^ “Nuitka Home | Nuitka Home”. nuitka.net (bằng tiếng Anh). Lưu trữ bản gốc ngày 30 tháng 5 năm 2020. Truy cập ngày 18 tháng 8 năm 2017.
^ Borderies, Olivier (24 tháng 1 năm 2019). “Pythran: Python at C++ speed !”. Medium. Lưu trữ bản gốc ngày 25 tháng 3 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Pythran — Pythran 0.9.5 documentation”. pythran.readthedocs.io. Lưu trữ bản gốc ngày 19 tháng 2 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ “Archived copy” (PDF). Lưu trữ (PDF) bản gốc ngày 18 tháng 4 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “google/grumpy”. 10 tháng 4 năm 2020. Lưu trữ bản gốc ngày 15 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020 – qua GitHub.
^ “Projects”. opensource.google. Lưu trữ bản gốc ngày 24 tháng 4 năm 2020. Truy cập ngày 25 tháng 3 năm 2020.
^ Francisco, Thomas Claburn in San. “Google's Grumpy code makes Python Go”. www.theregister.com. Lưu trữ bản gốc ngày 7 tháng 3 năm 2021. Truy cập ngày 20 tháng 1 năm 2021.
^ “IronPython.net /”. ironpython.net. Lưu trữ bản gốc ngày 17 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ “Jython FAQ”. www.jython.org. Lưu trữ bản gốc ngày 22 tháng 4 năm 2021. Truy cập ngày 22 tháng 4 năm 2021.
^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 tháng 6 năm 2000). “PEP 1 – PEP Purpose and Guidelines”. Python Enhancement Proposals. Python Software Foundation. Lưu trữ bản gốc ngày 6 tháng 6 năm 2020. Truy cập ngày 19 tháng 4 năm 2011.
^ Cannon, Brett. “Guido, Some Guys, and a Mailing List: How Python is Developed”. python.org. Python Software Foundation. Bản gốc lưu trữ ngày 1 tháng 6 năm 2009. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Developer's Guide — Python Developer's Guide”. devguide.python.org. Lưu trữ bản gốc ngày 9 tháng 11 năm 2020. Truy cập ngày 17 tháng 12 năm 2019.
^ Hughes, Owen (24 tháng 5 năm 2021). “Programming languages: Why Python 4.0 might never arrive, according to its creator”. TechRepublic (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 7 năm 2022. Truy cập ngày 16 tháng 5 năm 2022.
^ “PEP 602 -- Annual Release Cycle for Python”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 14 tháng 6 năm 2020. Truy cập ngày 6 tháng 11 năm 2019.
^ “Changing the Python release cadence [LWN.net]”. lwn.net. Lưu trữ bản gốc ngày 6 tháng 11 năm 2019. Truy cập ngày 6 tháng 11 năm 2019.
^ Norwitz, Neal (8 tháng 4 năm 2002). “[Python-Dev] Release Schedules (was Stability & change)”. Lưu trữ bản gốc ngày 15 tháng 12 năm 2018. Truy cập ngày 27 tháng 6 năm 2009.
^ “Python Buildbot”. Python Developer's Guide. Python Software Foundation. Lưu trữ bản gốc ngày 5 tháng 6 năm 2020. Truy cập ngày 24 tháng 9 năm 2011.
^ “1. Extending Python with C or C++ — Python 3.9.1 documentation”. docs.python.org. Lưu trữ bản gốc ngày 23 tháng 6 năm 2020. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 623 -- Remove wstr from Unicode”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 3 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ “PEP 634 -- Structural Pattern Matching: Specification”. Python.org (bằng tiếng Anh). Lưu trữ bản gốc ngày 6 tháng 5 năm 2021. Truy cập ngày 14 tháng 2 năm 2021.
^ Prechelt, Lutz (14 tháng 3 năm 2000). “An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl” (PDF). Lưu trữ (PDF) bản gốc ngày 3 tháng 1 năm 2020. Truy cập ngày 30 tháng 8 năm 2013.
^ “Quotes about Python”. Python Software Foundation. Lưu trữ bản gốc ngày 3 tháng 6 năm 2020. Truy cập ngày 8 tháng 1 năm 2012.
^ “Organizations Using Python”. Python Software Foundation. Lưu trữ bản gốc ngày 21 tháng 8 năm 2018. Truy cập ngày 15 tháng 1 năm 2009.
^ “Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers”. Facebook for Developers (bằng tiếng Anh). Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 19 tháng 6 năm 2018.
^ “What Powers Instagram: Hundreds of Instances, Dozens of Technologies”. Instagram Engineering. 11 tháng 12 năm 2016. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 27 tháng 5 năm 2019.
^ “How we use Python at Spotify”. Spotify Labs (bằng tiếng Anh). 20 tháng 3 năm 2013. Lưu trữ bản gốc ngày 10 tháng 6 năm 2020. Truy cập ngày 25 tháng 7 năm 2018.
^ GitHub - reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, lưu trữ bản gốc ngày 1 tháng 6 năm 2020, truy cập ngày 20 tháng 3 năm 2019
^ “Usage statistics and market share of Python for websites”. 2012. Lưu trữ bản gốc ngày 13 tháng 8 năm 2021. Truy cập ngày 18 tháng 12 năm 2012.
^ Oliphant, Travis (2007). “Python for Scientific Computing”. Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Lưu trữ bản gốc ngày 15 tháng 6 năm 2020. Truy cập ngày 10 tháng 4 năm 2015.
^ Millman, K. Jarrod; Aivazis, Michael (2011). “Python for Scientists and Engineers”. Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Lưu trữ bản gốc ngày 19 tháng 2 năm 2019. Truy cập ngày 7 tháng 7 năm 2014.
^ Science education with SageMath, Innovative Computing in Science Education, Bản gốc lưu trữ ngày 15 tháng 6 năm 2020, truy cập ngày 22 tháng 4 năm 2019
^ “OpenCV: OpenCV-Python Tutorials”. docs.opencv.org. Lưu trữ bản gốc ngày 23 tháng 9 năm 2020. Truy cập ngày 14 tháng 9 năm 2020.
^ Dean, Jeff; Monga, Rajat; và đồng nghiệp (9 tháng 11 năm 2015). “TensorFlow: Large-scale machine learning on heterogeneous systems” (PDF). TensorFlow.org. Google Research. Lưu trữ (PDF) bản gốc ngày 20 tháng 11 năm 2015. Truy cập ngày 10 tháng 11 năm 2015.
^ Piatetsky, Gregory. “Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis”. KDnuggets. KDnuggets. Lưu trữ bản gốc ngày 15 tháng 11 năm 2019. Truy cập ngày 30 tháng 5 năm 2018.
^ “Who is using scikit-learn? — scikit-learn 0.20.1 documentation”. scikit-learn.org. Lưu trữ bản gốc ngày 6 tháng 5 năm 2020. Truy cập ngày 30 tháng 11 năm 2018.
^ Jouppi, Norm. “Google supercharges machine learning tasks with TPU custom chip”. Google Cloud Platform Blog. Lưu trữ bản gốc ngày 18 tháng 5 năm 2016. Truy cập ngày 19 tháng 5 năm 2016.
^ “Tkinter — Python interface to TCL/Tk”. Lưu trữ bản gốc ngày 18 tháng 10 năm 2012. Truy cập ngày 9 tháng 6 năm 2023.
^ “Python Tkinter Tutorial”. 3 tháng 6 năm 2020. Lưu trữ bản gốc ngày 9 tháng 6 năm 2023. Truy cập ngày 9 tháng 6 năm 2023.
^ “Installers for GIMP for Windows - Frequently Asked Questions”. 26 tháng 7 năm 2013. Bản gốc lưu trữ ngày 17 tháng 7 năm 2013. Truy cập ngày 26 tháng 7 năm 2013.
^ “Python Setup and Usage”. Python Software Foundation. Lưu trữ bản gốc ngày 17 tháng 6 năm 2020. Truy cập ngày 10 tháng 1 năm 2020.
^ “4.0 New Features and Fixes”. LibreOffice.org. The Document Foundation. 2013. Lưu trữ bản gốc ngày 9 tháng 2 năm 2014. Truy cập ngày 25 tháng 2 năm 2013.
^ “Frequently asked questions”. Godot Engine documentation. Lưu trữ bản gốc ngày 28 tháng 4 năm 2021. Truy cập ngày 10 tháng 5 năm 2021.
^ Strachan, James (29 tháng 8 năm 2003). “Groovy – the birth of a new dynamic language for the Java platform”. Bản gốc lưu trữ ngày 5 tháng 4 năm 2007. Truy cập ngày 11 tháng 6 năm 2007.
^ “Why We Created Julia”. Julia website. tháng 2 năm 2012. Lưu trữ bản gốc ngày 2 tháng 5 năm 2020. Truy cập ngày 5 tháng 6 năm 2014. We want something as usable for general programming as Python [...]
^ “Modular Docs - Why Mojo🔥”. docs.modular.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.
^ Spencer, Michael (4 tháng 5 năm 2023). “What is Mojo Programming Language?”. datasciencelearningcenter.substack.com (bằng tiếng Anh). Lưu trữ bản gốc ngày 5 tháng 5 năm 2023. Truy cập ngày 5 tháng 5 năm 2023.
^ Yegulalp, Serdar (16 tháng 1 năm 2017). “Nim language draws from best of Python, Rust, Go, and Lisp”. InfoWorld. Lưu trữ bản gốc ngày 13 tháng 10 năm 2018. Truy cập ngày 7 tháng 6 năm 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).
^ “An Interview with the Creator of Ruby”. Linuxdevcenter.com. Lưu trữ bản gốc ngày 28 tháng 4 năm 2018. Truy cập ngày 3 tháng 12 năm 2012.
Liên kết ngoài
Tìm hiểu thêm về
Python
tại các dự án liên quan
Tìm kiếm Commons	Tập tin phương tiện từ Commons
Tìm kiếm Wikiquote	Danh ngôn từ Wikiquote
Tìm kiếm Wikibooks	Tủ sách giáo khoa từ Wikibooks
Tìm kiếm Wikiversity	Tài nguyên học tập từ Wikiversity
Tìm kiếm Wikidata	Dữ liệu từ Wikidata
Trang chủ chính thức
Python Wiki
Tài liệu Python
Python Cheese Shop – Kho đựng phần mềm viết bằng Python; trước đây gọi là Python Package Index (PyPI)
xts
Ngôn ngữ lập trình
xts
Phần mềm tự do nguồn mở
Tiêu đề chuẩn Sửa dữ liệu tại Wikidata	
BNF: cb13560465c (data)GND: 4434275-5LCCN: sh96008834NKC: ph170668SUDOC: 051626225
Thể loại: Ngôn ngữ lập trình hướng đối tượngPython (ngôn ngữ lập trình)Phần mềm tự doNgôn ngữ lập trình giáo dụcPhát minh của Hà LanPhần mềm đa nền tảngNgôn ngữ lập trình đa mẫu hìnhNgôn ngữ lập trìnhHọ ngôn ngữ lập trình SmalltalkNgôn ngữ lập trình đồng thờiPhần mềm tự do đa nền tảngNgôn ngữ lập trình được nhập độngNgôn ngữ lập trình bậc caoNgôn ngữ lập trình đối sánh mẫu
Trang này được sửa đổi lần cuối vào ngày 28 tháng 12 năm 2023, 15:26.
Văn bản được phát hành theo Giấy phép Creative Commons Ghi công–Chia sẻ tương tự; có thể áp dụng điều khoản bổ sung. Với việc sử dụng trang web này, bạn chấp nhận Điều khoản Sử dụng và Quy định quyền riêng tư. Wikipedia® là thương hiệu đã đăng ký của Wikimedia Foundation, Inc., một tổ chức phi lợi nhuận.
Quy định quyền riêng tưGiới thiệu WikipediaLời phủ nhậnBộ Quy tắc Ứng xử ChungLập trình viênThống kêTuyên bố về cookiePhiên bản di độngWikimedia FoundationPowered by MediaWiki
Chuyển đổi chiều rộng nội dung giới hạn